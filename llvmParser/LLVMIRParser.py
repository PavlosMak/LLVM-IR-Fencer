# Generated from LLVMIR.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,509,4305,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,
        7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,
        2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,
        7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,7,257,
        2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,2,263,
        7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,7,268,
        2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,2,274,
        7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
        2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,
        7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
        2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
        7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,
        2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,
        7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,
        2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,
        7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,7,323,
        2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,2,329,
        7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,7,334,
        2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,2,340,
        7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
        2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,
        7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
        2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
        7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,
        2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,
        7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,
        2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,
        7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,7,389,
        2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,2,395,
        7,395,1,0,5,0,794,8,0,10,0,12,0,797,9,0,1,0,1,0,1,1,1,1,3,1,803,
        8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,834,
        8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
        1,9,1,9,1,9,3,9,854,8,9,1,9,3,9,857,8,9,1,9,3,9,860,8,9,1,9,3,9,
        863,8,9,1,9,3,9,866,8,9,1,9,3,9,869,8,9,1,9,3,9,872,8,9,1,9,1,9,
        1,9,1,9,5,9,878,8,9,10,9,12,9,881,9,9,1,9,1,9,5,9,885,8,9,10,9,12,
        9,888,9,9,1,9,5,9,891,8,9,10,9,12,9,894,9,9,1,10,1,10,1,10,3,10,
        899,8,10,1,10,3,10,902,8,10,1,10,3,10,905,8,10,1,10,3,10,908,8,10,
        1,10,3,10,911,8,10,1,10,3,10,914,8,10,1,10,3,10,917,8,10,1,10,3,
        10,920,8,10,1,10,1,10,1,10,1,10,1,10,5,10,927,8,10,10,10,12,10,930,
        9,10,1,10,1,10,5,10,934,8,10,10,10,12,10,937,9,10,1,10,5,10,940,
        8,10,10,10,12,10,943,9,10,1,11,1,11,1,11,3,11,948,8,11,1,11,3,11,
        951,8,11,1,11,3,11,954,8,11,1,11,3,11,957,8,11,1,11,3,11,960,8,11,
        1,11,3,11,963,8,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,971,8,11,10,
        11,12,11,974,9,11,1,12,1,12,5,12,978,8,12,10,12,12,12,981,9,12,1,
        12,1,12,1,13,1,13,1,13,5,13,988,8,13,10,13,12,13,991,9,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,5,14,1000,8,14,10,14,12,14,1003,9,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,5,15,1014,8,15,10,15,
        12,15,1017,9,15,3,15,1019,8,15,1,15,1,15,1,16,1,16,1,16,3,16,1026,
        8,16,1,16,1,16,3,16,1030,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        5,17,1039,8,17,10,17,12,17,1042,9,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,5,18,1055,8,18,10,18,12,18,1058,9,18,
        1,18,1,18,1,19,3,19,1063,8,19,1,19,3,19,1066,8,19,1,19,3,19,1069,
        8,19,1,19,3,19,1072,8,19,1,19,3,19,1075,8,19,1,19,5,19,1078,8,19,
        10,19,12,19,1081,9,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1089,8,
        19,1,19,3,19,1092,8,19,1,19,5,19,1095,8,19,10,19,12,19,1098,9,19,
        1,20,1,20,1,20,1,20,1,20,3,20,1105,8,20,1,21,1,21,3,21,1109,8,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,
        1123,8,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,3,28,1139,8,28,1,29,1,29,4,29,1143,8,29,11,29,12,
        29,1144,1,29,5,29,1148,8,29,10,29,12,29,1151,9,29,1,29,1,29,1,30,
        3,30,1156,8,30,1,30,5,30,1159,8,30,10,30,12,30,1162,9,30,1,30,1,
        30,1,31,1,31,1,31,1,31,3,31,1170,8,31,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,3,32,1183,8,32,1,33,1,33,1,33,1,33,1,
        34,1,34,1,34,3,34,1192,8,34,1,35,1,35,1,35,1,35,5,35,1198,8,35,10,
        35,12,35,1201,9,35,1,35,1,35,1,35,1,35,1,35,5,35,1208,8,35,10,35,
        12,35,1211,9,35,3,35,1213,8,35,1,36,1,36,1,36,1,36,5,36,1219,8,36,
        10,36,12,36,1222,9,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,5,37,1233,8,37,10,37,12,37,1236,9,37,1,38,1,38,1,38,1,38,1,38,
        1,38,5,38,1244,8,38,10,38,12,38,1247,9,38,1,38,1,38,1,38,5,38,1252,
        8,38,10,38,12,38,1255,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,
        39,1264,8,39,3,39,1266,8,39,1,39,1,39,1,39,5,39,1271,8,39,10,39,
        12,39,1274,9,39,1,40,1,40,1,40,1,40,5,40,1280,8,40,10,40,12,40,1283,
        9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,1292,8,41,10,41,12,
        41,1295,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,5,42,1304,8,42,10,
        42,12,42,1307,9,42,1,43,1,43,1,43,5,43,1312,8,43,10,43,12,43,1315,
        9,43,1,44,1,44,3,44,1319,8,44,1,44,5,44,1322,8,44,10,44,12,44,1325,
        9,44,1,44,3,44,1328,8,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,1336,
        8,44,10,44,12,44,1339,9,44,1,44,1,44,1,44,1,44,4,44,1345,8,44,11,
        44,12,44,1346,1,44,1,44,3,44,1351,8,44,1,44,1,44,1,44,1,44,1,44,
        1,44,5,44,1359,8,44,10,44,12,44,1362,9,44,1,45,1,45,3,45,1366,8,
        45,1,45,5,45,1369,8,45,10,45,12,45,1372,9,45,1,45,3,45,1375,8,45,
        1,45,1,45,1,45,1,45,1,45,1,45,5,45,1383,8,45,10,45,12,45,1386,9,
        45,1,45,1,45,1,45,1,45,4,45,1392,8,45,11,45,12,45,1393,1,45,1,45,
        3,45,1398,8,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,1406,8,45,10,45,
        12,45,1409,9,45,3,45,1411,8,45,1,45,1,45,1,45,5,45,1416,8,45,10,
        45,12,45,1419,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,5,46,1431,8,46,10,46,12,46,1434,9,46,1,47,1,47,1,47,1,48,1,
        48,1,48,1,48,1,49,1,49,1,49,3,49,1446,8,49,1,50,1,50,1,50,5,50,1451,
        8,50,10,50,12,50,1454,9,50,1,51,1,51,3,51,1458,8,51,1,52,1,52,1,
        52,1,52,1,52,5,52,1465,8,52,10,52,12,52,1468,9,52,3,52,1470,8,52,
        1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,1481,8,54,1,55,
        1,55,1,55,1,56,1,56,1,56,1,56,3,56,1490,8,56,1,57,1,57,1,57,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,3,58,1511,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
        1,63,1,63,1,64,1,64,1,64,1,64,5,64,1527,8,64,10,64,12,64,1530,9,
        64,3,64,1532,8,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,1540,8,64,10,
        64,12,64,1543,9,64,3,64,1545,8,64,1,64,1,64,3,64,1549,8,64,1,65,
        1,65,1,65,1,65,1,65,1,65,5,65,1557,8,65,10,65,12,65,1560,9,65,3,
        65,1562,8,65,1,65,3,65,1565,8,65,1,66,1,66,1,66,1,66,5,66,1571,8,
        66,10,66,12,66,1574,9,66,3,66,1576,8,66,1,66,1,66,1,67,1,67,1,68,
        1,68,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,
        1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1629,8,73,1,74,1,74,1,74,
        1,75,1,75,1,75,1,76,1,76,1,76,3,76,1640,8,76,1,77,1,77,1,77,1,77,
        1,77,5,77,1647,8,77,10,77,12,77,1650,9,77,3,77,1652,8,77,1,77,1,
        77,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1662,8,78,1,79,1,79,1,79,1,
        79,1,79,5,79,1669,8,79,10,79,12,79,1672,9,79,3,79,1674,8,79,1,79,
        1,79,1,80,1,80,1,80,1,81,1,81,1,81,3,81,1684,8,81,1,82,1,82,3,82,
        1688,8,82,1,82,3,82,1691,8,82,1,82,3,82,1694,8,82,1,82,3,82,1697,
        8,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,84,1,84,3,84,1708,8,84,
        1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
        1,86,3,86,1724,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,3,87,1740,8,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,3,87,1749,8,87,1,87,5,87,1752,8,87,10,87,12,87,1755,9,
        87,1,88,3,88,1758,8,88,1,88,1,88,1,88,5,88,1763,8,88,10,88,12,88,
        1766,9,88,1,88,1,88,3,88,1770,8,88,3,88,1772,8,88,1,89,1,89,5,89,
        1776,8,89,10,89,12,89,1779,9,89,1,89,3,89,1782,8,89,1,90,1,90,1,
        90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1796,8,90,1,
        91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1810,
        8,93,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,
        1,96,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,3,98,1835,
        8,98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,3,99,1844,8,99,1,100,1,100,
        1,100,1,100,1,100,1,100,3,100,1852,8,100,1,100,3,100,1855,8,100,
        1,101,1,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,3,102,
        1867,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,
        1877,8,103,1,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,
        1,105,1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,
        1,108,1,108,1,109,1,109,3,109,1903,8,109,1,110,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,1,110,1,110,3,110,1915,8,110,1,111,1,111,
        1,112,1,112,1,113,1,113,3,113,1923,8,113,1,113,1,113,1,113,3,113,
        1928,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,3,114,1944,8,114,1,115,1,115,1,116,
        1,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,5,117,1958,
        8,117,10,117,12,117,1961,9,117,3,117,1963,8,117,1,117,1,117,1,117,
        1,117,1,117,1,117,5,117,1971,8,117,10,117,12,117,1974,9,117,3,117,
        1976,8,117,1,117,1,117,3,117,1980,8,117,1,118,1,118,1,119,1,119,
        1,120,1,120,1,121,1,121,3,121,1990,8,121,1,122,1,122,1,122,1,122,
        1,122,1,123,1,123,1,123,1,123,1,123,3,123,2002,8,123,1,124,1,124,
        1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,126,1,126,3,126,2015,
        8,126,1,126,1,126,1,126,1,126,1,126,1,126,5,126,2023,8,126,10,126,
        12,126,2026,9,126,1,126,1,126,1,127,3,127,2031,8,127,1,127,1,127,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,132,1,132,1,132,
        1,132,1,132,1,132,1,132,1,132,1,132,1,133,1,133,1,133,1,133,1,133,
        1,133,1,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,135,1,135,
        1,135,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,136,1,136,1,136,
        1,136,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,1,142,1,142,1,143,
        1,143,1,143,1,143,1,143,1,143,1,143,1,144,1,144,1,144,1,144,1,144,
        1,144,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,145,1,145,
        1,145,1,145,1,146,1,146,5,146,2171,8,146,10,146,12,146,2174,9,146,
        1,146,1,146,1,146,1,146,1,146,1,146,1,147,1,147,3,147,2184,8,147,
        1,147,1,147,1,147,1,147,1,147,1,147,1,148,1,148,3,148,2194,8,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,1,149,
        1,149,1,149,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,1,152,1,152,5,152,2225,8,152,10,152,
        12,152,2228,9,152,1,152,1,152,1,152,1,152,1,152,1,152,1,153,1,153,
        5,153,2238,8,153,10,153,12,153,2241,9,153,1,153,1,153,1,153,1,153,
        1,153,1,153,1,154,1,154,5,154,2251,8,154,10,154,12,154,2254,9,154,
        1,154,1,154,1,154,1,154,1,154,1,154,1,155,1,155,1,155,1,155,1,155,
        1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
        1,157,3,157,2323,8,157,1,158,1,158,3,158,2327,8,158,1,158,1,158,
        1,158,1,158,1,158,3,158,2334,8,158,1,158,1,158,5,158,2338,8,158,
        10,158,12,158,2341,9,158,1,158,1,158,1,158,3,158,2346,8,158,1,158,
        1,158,1,158,1,158,3,158,2352,8,158,1,158,1,158,1,158,3,158,2357,
        8,158,1,158,1,158,5,158,2361,8,158,10,158,12,158,2364,9,158,3,158,
        2366,8,158,1,159,1,159,1,159,1,159,1,159,1,160,1,160,3,160,2375,
        8,160,1,160,1,160,1,160,5,160,2380,8,160,10,160,12,160,2383,9,160,
        1,161,1,161,5,161,2387,8,161,10,161,12,161,2390,9,161,1,161,1,161,
        1,161,5,161,2395,8,161,10,161,12,161,2398,9,161,1,162,1,162,5,162,
        2402,8,162,10,162,12,162,2405,9,162,1,162,1,162,1,162,1,162,1,162,
        5,162,2412,8,162,10,162,12,162,2415,9,162,1,163,1,163,5,163,2419,
        8,163,10,163,12,163,2422,9,163,1,163,1,163,1,163,1,163,1,163,5,163,
        2429,8,163,10,163,12,163,2432,9,163,1,164,1,164,5,164,2436,8,164,
        10,164,12,164,2439,9,164,1,164,1,164,1,164,1,164,1,164,5,164,2446,
        8,164,10,164,12,164,2449,9,164,1,165,1,165,5,165,2453,8,165,10,165,
        12,165,2456,9,165,1,165,1,165,1,165,1,165,1,165,5,165,2463,8,165,
        10,165,12,165,2466,9,165,1,166,1,166,5,166,2470,8,166,10,166,12,
        166,2473,9,166,1,166,1,166,1,166,1,166,1,166,5,166,2480,8,166,10,
        166,12,166,2483,9,166,1,167,1,167,5,167,2487,8,167,10,167,12,167,
        2490,9,167,1,167,1,167,1,167,1,167,1,167,5,167,2497,8,167,10,167,
        12,167,2500,9,167,1,168,1,168,3,168,2504,8,168,1,168,1,168,1,168,
        1,168,1,168,5,168,2511,8,168,10,168,12,168,2514,9,168,1,169,1,169,
        3,169,2518,8,169,1,169,1,169,1,169,1,169,1,169,5,169,2525,8,169,
        10,169,12,169,2528,9,169,1,170,1,170,5,170,2532,8,170,10,170,12,
        170,2535,9,170,1,170,1,170,1,170,1,170,1,170,5,170,2542,8,170,10,
        170,12,170,2545,9,170,1,171,1,171,1,171,1,171,1,171,1,171,5,171,
        2553,8,171,10,171,12,171,2556,9,171,1,172,1,172,1,172,1,172,1,172,
        1,172,5,172,2564,8,172,10,172,12,172,2567,9,172,1,173,1,173,5,173,
        2571,8,173,10,173,12,173,2574,9,173,1,173,1,173,1,173,1,173,1,173,
        5,173,2581,8,173,10,173,12,173,2584,9,173,1,174,1,174,5,174,2588,
        8,174,10,174,12,174,2591,9,174,1,174,1,174,1,174,1,174,1,174,5,174,
        2598,8,174,10,174,12,174,2601,9,174,1,175,1,175,3,175,2605,8,175,
        1,175,1,175,1,175,1,175,1,175,5,175,2612,8,175,10,175,12,175,2615,
        9,175,1,176,1,176,3,176,2619,8,176,1,176,1,176,1,176,1,176,1,176,
        5,176,2626,8,176,10,176,12,176,2629,9,176,1,177,1,177,1,177,1,177,
        1,177,1,177,5,177,2637,8,177,10,177,12,177,2640,9,177,1,178,1,178,
        1,178,1,178,1,178,1,178,5,178,2648,8,178,10,178,12,178,2651,9,178,
        1,179,1,179,1,179,1,179,1,179,1,179,5,179,2659,8,179,10,179,12,179,
        2662,9,179,1,180,1,180,1,180,1,180,1,180,1,180,5,180,2670,8,180,
        10,180,12,180,2673,9,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
        1,181,5,181,2683,8,181,10,181,12,181,2686,9,181,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,5,182,2696,8,182,10,182,12,182,2699,
        9,182,1,183,1,183,1,183,1,183,4,183,2705,8,183,11,183,12,183,2706,
        1,183,1,183,5,183,2711,8,183,10,183,12,183,2714,9,183,1,184,1,184,
        1,184,1,184,1,184,1,184,4,184,2722,8,184,11,184,12,184,2723,1,184,
        1,184,5,184,2728,8,184,10,184,12,184,2731,9,184,1,185,1,185,3,185,
        2735,8,185,1,185,3,185,2738,8,185,1,185,1,185,1,185,3,185,2743,8,
        185,1,185,1,185,3,185,2747,8,185,1,185,1,185,3,185,2751,8,185,1,
        185,1,185,5,185,2755,8,185,10,185,12,185,2758,9,185,1,186,1,186,
        3,186,2762,8,186,1,186,1,186,1,186,1,186,1,186,3,186,2769,8,186,
        1,186,1,186,5,186,2773,8,186,10,186,12,186,2776,9,186,1,186,1,186,
        1,186,3,186,2781,8,186,1,186,1,186,1,186,1,186,3,186,2787,8,186,
        1,186,1,186,1,186,3,186,2792,8,186,1,186,1,186,5,186,2796,8,186,
        10,186,12,186,2799,9,186,3,186,2801,8,186,1,187,1,187,3,187,2805,
        8,187,1,187,3,187,2808,8,187,1,187,1,187,1,187,1,187,1,187,1,187,
        3,187,2816,8,187,1,187,1,187,1,187,1,187,3,187,2822,8,187,1,187,
        1,187,5,187,2826,8,187,10,187,12,187,2829,9,187,1,188,1,188,3,188,
        2833,8,188,1,188,1,188,1,188,1,188,1,188,3,188,2840,8,188,1,188,
        1,188,1,188,3,188,2845,8,188,1,188,1,188,5,188,2849,8,188,10,188,
        12,188,2852,9,188,1,189,1,189,3,189,2856,8,189,1,189,1,189,1,189,
        1,189,1,189,5,189,2863,8,189,10,189,12,189,2866,9,189,1,189,1,189,
        5,189,2870,8,189,10,189,12,189,2873,9,189,1,190,1,190,1,190,1,190,
        1,190,1,190,5,190,2881,8,190,10,190,12,190,2884,9,190,1,191,1,191,
        1,191,1,191,1,191,1,191,5,191,2892,8,191,10,191,12,191,2895,9,191,
        1,192,1,192,1,192,1,192,1,192,1,192,5,192,2903,8,192,10,192,12,192,
        2906,9,192,1,193,1,193,1,193,1,193,1,193,1,193,5,193,2914,8,193,
        10,193,12,193,2917,9,193,1,194,1,194,1,194,1,194,1,194,1,194,5,194,
        2925,8,194,10,194,12,194,2928,9,194,1,195,1,195,1,195,1,195,1,195,
        1,195,5,195,2936,8,195,10,195,12,195,2939,9,195,1,196,1,196,1,196,
        1,196,1,196,1,196,5,196,2947,8,196,10,196,12,196,2950,9,196,1,197,
        1,197,1,197,1,197,1,197,1,197,5,197,2958,8,197,10,197,12,197,2961,
        9,197,1,198,1,198,1,198,1,198,1,198,1,198,5,198,2969,8,198,10,198,
        12,198,2972,9,198,1,199,1,199,1,199,1,199,1,199,1,199,5,199,2980,
        8,199,10,199,12,199,2983,9,199,1,200,1,200,1,200,1,200,1,200,1,200,
        5,200,2991,8,200,10,200,12,200,2994,9,200,1,201,1,201,1,201,1,201,
        1,201,1,201,5,201,3002,8,201,10,201,12,201,3005,9,201,1,202,1,202,
        1,202,1,202,1,202,1,202,5,202,3013,8,202,10,202,12,202,3016,9,202,
        1,203,1,203,1,203,1,203,1,203,1,203,1,203,5,203,3025,8,203,10,203,
        12,203,3028,9,203,1,204,1,204,5,204,3032,8,204,10,204,12,204,3035,
        9,204,1,204,1,204,1,204,1,204,1,204,1,204,5,204,3043,8,204,10,204,
        12,204,3046,9,204,1,205,1,205,5,205,3050,8,205,10,205,12,205,3053,
        9,205,1,205,1,205,1,205,1,205,5,205,3059,8,205,10,205,12,205,3062,
        9,205,1,205,1,205,5,205,3066,8,205,10,205,12,205,3069,9,205,1,206,
        1,206,5,206,3073,8,206,10,206,12,206,3076,9,206,1,206,1,206,1,206,
        1,206,1,206,1,206,1,206,5,206,3085,8,206,10,206,12,206,3088,9,206,
        1,207,1,207,1,207,1,208,3,208,3094,8,208,1,208,1,208,5,208,3098,
        8,208,10,208,12,208,3101,9,208,1,208,3,208,3104,8,208,1,208,5,208,
        3107,8,208,10,208,12,208,3110,9,208,1,208,3,208,3113,8,208,1,208,
        1,208,1,208,1,208,1,208,1,208,5,208,3121,8,208,10,208,12,208,3124,
        9,208,1,208,1,208,1,208,1,208,5,208,3130,8,208,10,208,12,208,3133,
        9,208,1,208,1,208,3,208,3137,8,208,1,208,1,208,5,208,3141,8,208,
        10,208,12,208,3144,9,208,1,209,1,209,1,209,1,209,1,209,1,209,5,209,
        3152,8,209,10,209,12,209,3155,9,209,1,210,1,210,1,210,3,210,3160,
        8,210,1,210,5,210,3163,8,210,10,210,12,210,3166,9,210,1,210,1,210,
        5,210,3170,8,210,10,210,12,210,3173,9,210,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,5,211,3182,8,211,10,211,12,211,3185,9,211,3,211,
        3187,8,211,1,211,1,211,1,211,5,211,3192,8,211,10,211,12,211,3195,
        9,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,5,212,3204,8,212,
        10,212,12,212,3207,9,212,3,212,3209,8,212,1,212,1,212,1,212,5,212,
        3214,8,212,10,212,12,212,3217,9,212,1,213,1,213,1,213,1,213,1,213,
        1,213,1,214,1,214,1,214,1,214,1,214,5,214,3230,8,214,10,214,12,214,
        3233,9,214,3,214,3235,8,214,1,214,1,214,1,215,1,215,1,215,1,216,
        3,216,3243,8,216,1,216,1,216,1,216,5,216,3248,8,216,10,216,12,216,
        3251,9,216,1,216,1,216,3,216,3255,8,216,3,216,3257,8,216,1,217,1,
        217,5,217,3261,8,217,10,217,12,217,3264,9,217,1,217,1,217,1,217,
        1,217,1,217,3,217,3271,8,217,1,218,1,218,1,218,1,218,1,218,1,218,
        3,218,3279,8,218,1,219,1,219,3,219,3283,8,219,1,220,1,220,1,221,
        1,221,1,222,1,222,3,222,3291,8,222,1,223,1,223,1,224,1,224,1,225,
        1,225,1,226,1,226,1,227,1,227,1,228,1,228,1,229,1,229,1,230,1,230,
        1,231,1,231,1,232,1,232,1,233,1,233,1,234,1,234,1,235,1,235,1,236,
        1,236,1,237,1,237,1,238,1,238,1,239,1,239,1,240,1,240,1,241,1,241,
        1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,
        1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,
        1,242,1,242,1,242,1,242,1,242,1,242,3,242,3359,8,242,1,243,1,243,
        1,243,1,243,1,243,5,243,3366,8,243,10,243,12,243,3369,9,243,3,243,
        3371,8,243,1,243,1,243,1,244,1,244,1,244,1,244,1,244,5,244,3380,
        8,244,10,244,12,244,3383,9,244,3,244,3385,8,244,1,244,1,244,1,245,
        1,245,1,245,1,245,1,245,5,245,3394,8,245,10,245,12,245,3397,9,245,
        3,245,3399,8,245,1,245,1,245,1,246,1,246,1,246,1,246,1,246,5,246,
        3408,8,246,10,246,12,246,3411,9,246,3,246,3413,8,246,1,246,1,246,
        1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
        1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,3,247,
        3438,8,247,1,248,1,248,1,248,1,248,1,248,5,248,3445,8,248,10,248,
        12,248,3448,9,248,3,248,3450,8,248,1,248,1,248,1,249,1,249,1,249,
        1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,
        3467,8,249,1,250,1,250,1,250,1,250,1,250,5,250,3474,8,250,10,250,
        12,250,3477,9,250,3,250,3479,8,250,1,250,1,250,1,251,1,251,1,251,
        3,251,3486,8,251,1,252,1,252,1,252,1,252,1,252,5,252,3493,8,252,
        10,252,12,252,3496,9,252,3,252,3498,8,252,1,252,1,252,1,253,1,253,
        1,253,1,253,1,253,3,253,3507,8,253,1,254,1,254,1,254,1,254,1,254,
        5,254,3514,8,254,10,254,12,254,3517,9,254,3,254,3519,8,254,1,254,
        1,254,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
        1,255,1,255,3,255,3535,8,255,1,256,1,256,1,256,1,256,1,256,5,256,
        3542,8,256,10,256,12,256,3545,9,256,3,256,3547,8,256,1,256,1,256,
        1,257,1,257,3,257,3553,8,257,1,258,1,258,1,258,1,258,1,258,5,258,
        3560,8,258,10,258,12,258,3563,9,258,3,258,3565,8,258,1,258,1,258,
        1,259,1,259,1,259,1,259,1,259,1,259,1,259,3,259,3576,8,259,1,260,
        1,260,1,260,1,260,1,260,5,260,3583,8,260,10,260,12,260,3586,9,260,
        3,260,3588,8,260,1,260,1,260,1,261,1,261,1,261,1,261,3,261,3596,
        8,261,1,262,1,262,1,262,1,262,1,262,5,262,3603,8,262,10,262,12,262,
        3606,9,262,3,262,3608,8,262,1,262,1,262,1,263,1,263,1,263,1,263,
        3,263,3616,8,263,1,264,1,264,1,264,1,264,1,264,5,264,3623,8,264,
        10,264,12,264,3626,9,264,3,264,3628,8,264,1,264,1,264,1,265,1,265,
        1,265,3,265,3635,8,265,1,266,1,266,1,266,1,266,1,266,5,266,3642,
        8,266,10,266,12,266,3645,9,266,3,266,3647,8,266,1,266,1,266,1,267,
        1,267,1,267,1,267,1,267,1,267,1,267,1,267,1,267,3,267,3660,8,267,
        1,268,1,268,1,268,1,268,1,268,5,268,3667,8,268,10,268,12,268,3670,
        9,268,3,268,3672,8,268,1,268,1,268,1,269,1,269,1,269,1,269,1,269,
        3,269,3681,8,269,1,270,1,270,1,270,1,270,1,270,5,270,3688,8,270,
        10,270,12,270,3691,9,270,3,270,3693,8,270,1,270,1,270,1,271,1,271,
        1,271,1,271,3,271,3701,8,271,1,272,1,272,1,272,1,272,1,272,5,272,
        3708,8,272,10,272,12,272,3711,9,272,3,272,3713,8,272,1,272,1,272,
        1,273,1,273,1,273,1,273,3,273,3721,8,273,1,274,1,274,1,274,1,274,
        1,274,5,274,3728,8,274,10,274,12,274,3731,9,274,3,274,3733,8,274,
        1,274,1,274,1,275,1,275,1,275,1,275,1,275,1,275,1,275,1,275,3,275,
        3745,8,275,1,276,1,276,1,276,1,276,1,276,5,276,3752,8,276,10,276,
        12,276,3755,9,276,3,276,3757,8,276,1,276,1,276,1,277,1,277,1,277,
        3,277,3764,8,277,1,278,1,278,1,278,1,278,1,278,5,278,3771,8,278,
        10,278,12,278,3774,9,278,3,278,3776,8,278,1,278,1,278,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,3,279,3787,8,279,1,280,1,280,1,280,
        1,280,1,280,5,280,3794,8,280,10,280,12,280,3797,9,280,3,280,3799,
        8,280,1,280,1,280,1,281,1,281,1,281,1,281,1,281,1,281,1,281,1,281,
        3,281,3811,8,281,1,282,1,282,1,282,1,282,1,282,5,282,3818,8,282,
        10,282,12,282,3821,9,282,3,282,3823,8,282,1,282,1,282,1,283,1,283,
        1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,
        1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,283,3,283,
        3850,8,283,1,284,1,284,1,284,1,284,1,284,5,284,3857,8,284,10,284,
        12,284,3860,9,284,3,284,3862,8,284,1,284,1,284,1,285,1,285,1,285,
        1,285,3,285,3870,8,285,1,286,1,286,1,286,1,286,1,286,5,286,3877,
        8,286,10,286,12,286,3880,9,286,3,286,3882,8,286,1,286,1,286,1,287,
        1,287,1,287,1,287,1,287,5,287,3891,8,287,10,287,12,287,3894,9,287,
        3,287,3896,8,287,1,287,1,287,1,288,1,288,1,288,1,288,1,288,1,288,
        3,288,3906,8,288,1,288,1,288,1,289,1,289,1,289,1,289,1,289,5,289,
        3915,8,289,10,289,12,289,3918,9,289,3,289,3920,8,289,1,289,1,289,
        1,290,1,290,1,290,3,290,3927,8,290,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,1,291,
        1,291,1,291,1,291,1,291,3,291,3949,8,291,1,292,1,292,1,292,1,292,
        1,292,3,292,3956,8,292,1,293,1,293,1,293,1,293,1,293,1,293,3,293,
        3964,8,293,1,294,1,294,1,294,3,294,3969,8,294,1,295,1,295,1,295,
        1,296,1,296,1,296,1,297,1,297,1,297,1,297,1,297,5,297,3982,8,297,
        10,297,12,297,3985,9,297,3,297,3987,8,297,1,297,1,297,1,298,1,298,
        1,298,1,298,1,298,3,298,3996,8,298,1,299,1,299,1,299,1,300,1,300,
        1,300,1,301,1,301,1,301,1,302,1,302,1,302,1,303,1,303,3,303,4012,
        8,303,1,304,1,304,1,304,3,304,4017,8,304,1,305,1,305,1,305,1,306,
        1,306,1,306,5,306,4025,8,306,10,306,12,306,4028,9,306,1,307,1,307,
        1,307,3,307,4033,8,307,1,308,1,308,1,308,1,309,1,309,1,309,1,310,
        1,310,1,310,1,311,1,311,1,311,1,312,1,312,1,312,1,313,1,313,1,313,
        1,314,1,314,1,314,1,315,1,315,1,315,1,316,1,316,1,316,1,317,1,317,
        1,317,1,318,1,318,1,318,1,319,1,319,1,319,1,320,1,320,1,320,1,321,
        1,321,1,321,1,322,1,322,1,322,1,323,1,323,1,323,1,324,1,324,1,324,
        1,325,1,325,1,325,1,326,1,326,1,326,1,327,1,327,1,327,1,328,1,328,
        1,328,1,329,1,329,1,329,1,330,1,330,1,330,1,331,1,331,1,331,1,332,
        1,332,1,332,1,333,1,333,1,333,1,334,1,334,1,334,1,335,1,335,1,335,
        1,336,1,336,1,336,1,337,1,337,1,337,1,338,1,338,1,338,1,339,1,339,
        1,339,1,340,1,340,1,340,1,341,1,341,1,341,1,342,1,342,1,342,1,343,
        1,343,1,343,1,344,1,344,1,344,1,345,1,345,1,345,1,346,1,346,1,346,
        1,347,1,347,1,347,1,348,1,348,1,348,1,349,1,349,1,349,1,350,1,350,
        1,350,1,351,1,351,1,351,1,352,1,352,1,352,1,353,1,353,1,353,1,354,
        1,354,1,354,1,355,1,355,1,355,1,356,1,356,1,356,1,357,1,357,1,357,
        1,358,1,358,1,358,1,359,1,359,1,359,1,360,1,360,1,360,1,361,1,361,
        1,361,1,362,1,362,1,362,1,363,1,363,1,363,1,364,1,364,1,364,1,365,
        1,365,1,365,1,366,1,366,1,366,1,367,1,367,1,367,1,368,1,368,1,368,
        1,369,1,369,1,369,1,370,1,370,1,370,1,371,1,371,1,371,1,372,1,372,
        1,372,1,373,1,373,1,373,1,374,1,374,1,374,1,374,5,374,4237,8,374,
        10,374,12,374,4240,9,374,1,375,1,375,1,375,1,376,1,376,1,376,1,377,
        1,377,1,377,1,378,1,378,1,378,1,379,1,379,1,379,1,380,1,380,1,380,
        1,381,1,381,1,381,1,382,1,382,1,382,1,383,1,383,1,383,1,384,1,384,
        1,384,1,385,1,385,1,385,1,386,1,386,1,386,1,387,1,387,1,387,1,388,
        1,388,1,388,1,389,1,389,1,389,1,390,1,390,1,390,1,391,1,391,1,391,
        1,392,1,392,1,392,1,393,1,393,1,393,1,394,1,394,1,394,1,395,1,395,
        1,395,1,395,0,1,174,396,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
        274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
        306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
        338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
        370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
        402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,
        434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,
        466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,
        498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,
        530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,
        562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,
        594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,
        626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,
        658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,
        690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,
        722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,
        754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,
        786,788,790,0,31,1,0,10,14,1,0,16,17,3,0,489,489,501,501,509,509,
        1,0,54,57,1,0,60,61,2,0,489,489,503,503,1,0,84,85,1,0,93,111,1,0,
        177,179,1,0,186,187,1,0,188,189,2,0,173,173,190,197,1,0,198,199,
        1,0,200,202,1,0,203,204,1,0,205,207,1,0,208,209,1,0,211,212,5,0,
        57,57,100,100,103,104,110,110,213,262,5,0,96,96,98,98,101,102,106,
        106,111,111,1,0,265,266,1,0,267,276,2,0,60,61,273,286,1,0,287,292,
        1,0,293,337,1,0,338,345,3,0,147,151,159,160,346,353,1,0,354,360,
        1,0,419,422,2,0,489,489,501,501,1,0,450,452,4626,0,795,1,0,0,0,2,
        802,1,0,0,0,4,804,1,0,0,0,6,808,1,0,0,0,8,813,1,0,0,0,10,833,1,0,
        0,0,12,835,1,0,0,0,14,839,1,0,0,0,16,844,1,0,0,0,18,849,1,0,0,0,
        20,895,1,0,0,0,22,944,1,0,0,0,24,975,1,0,0,0,26,984,1,0,0,0,28,994,
        1,0,0,0,30,1006,1,0,0,0,32,1022,1,0,0,0,34,1031,1,0,0,0,36,1045,
        1,0,0,0,38,1062,1,0,0,0,40,1104,1,0,0,0,42,1108,1,0,0,0,44,1110,
        1,0,0,0,46,1122,1,0,0,0,48,1124,1,0,0,0,50,1127,1,0,0,0,52,1130,
        1,0,0,0,54,1133,1,0,0,0,56,1138,1,0,0,0,58,1140,1,0,0,0,60,1155,
        1,0,0,0,62,1169,1,0,0,0,64,1182,1,0,0,0,66,1184,1,0,0,0,68,1191,
        1,0,0,0,70,1212,1,0,0,0,72,1214,1,0,0,0,74,1223,1,0,0,0,76,1237,
        1,0,0,0,78,1256,1,0,0,0,80,1275,1,0,0,0,82,1284,1,0,0,0,84,1296,
        1,0,0,0,86,1308,1,0,0,0,88,1316,1,0,0,0,90,1363,1,0,0,0,92,1420,
        1,0,0,0,94,1435,1,0,0,0,96,1438,1,0,0,0,98,1445,1,0,0,0,100,1447,
        1,0,0,0,102,1457,1,0,0,0,104,1459,1,0,0,0,106,1473,1,0,0,0,108,1480,
        1,0,0,0,110,1482,1,0,0,0,112,1485,1,0,0,0,114,1491,1,0,0,0,116,1510,
        1,0,0,0,118,1512,1,0,0,0,120,1514,1,0,0,0,122,1516,1,0,0,0,124,1518,
        1,0,0,0,126,1520,1,0,0,0,128,1548,1,0,0,0,130,1564,1,0,0,0,132,1566,
        1,0,0,0,134,1579,1,0,0,0,136,1581,1,0,0,0,138,1583,1,0,0,0,140,1585,
        1,0,0,0,142,1592,1,0,0,0,144,1595,1,0,0,0,146,1628,1,0,0,0,148,1630,
        1,0,0,0,150,1633,1,0,0,0,152,1639,1,0,0,0,154,1641,1,0,0,0,156,1661,
        1,0,0,0,158,1663,1,0,0,0,160,1677,1,0,0,0,162,1683,1,0,0,0,164,1685,
        1,0,0,0,166,1702,1,0,0,0,168,1707,1,0,0,0,170,1709,1,0,0,0,172,1723,
        1,0,0,0,174,1739,1,0,0,0,176,1771,1,0,0,0,178,1773,1,0,0,0,180,1795,
        1,0,0,0,182,1797,1,0,0,0,184,1799,1,0,0,0,186,1809,1,0,0,0,188,1811,
        1,0,0,0,190,1815,1,0,0,0,192,1820,1,0,0,0,194,1824,1,0,0,0,196,1829,
        1,0,0,0,198,1843,1,0,0,0,200,1845,1,0,0,0,202,1856,1,0,0,0,204,1861,
        1,0,0,0,206,1876,1,0,0,0,208,1878,1,0,0,0,210,1883,1,0,0,0,212,1888,
        1,0,0,0,214,1890,1,0,0,0,216,1895,1,0,0,0,218,1902,1,0,0,0,220,1914,
        1,0,0,0,222,1916,1,0,0,0,224,1918,1,0,0,0,226,1927,1,0,0,0,228,1943,
        1,0,0,0,230,1945,1,0,0,0,232,1947,1,0,0,0,234,1979,1,0,0,0,236,1981,
        1,0,0,0,238,1983,1,0,0,0,240,1985,1,0,0,0,242,1987,1,0,0,0,244,1991,
        1,0,0,0,246,1996,1,0,0,0,248,2003,1,0,0,0,250,2005,1,0,0,0,252,2012,
        1,0,0,0,254,2030,1,0,0,0,256,2034,1,0,0,0,258,2041,1,0,0,0,260,2048,
        1,0,0,0,262,2056,1,0,0,0,264,2064,1,0,0,0,266,2073,1,0,0,0,268,2080,
        1,0,0,0,270,2087,1,0,0,0,272,2094,1,0,0,0,274,2101,1,0,0,0,276,2108,
        1,0,0,0,278,2115,1,0,0,0,280,2122,1,0,0,0,282,2129,1,0,0,0,284,2136,
        1,0,0,0,286,2143,1,0,0,0,288,2150,1,0,0,0,290,2159,1,0,0,0,292,2168,
        1,0,0,0,294,2181,1,0,0,0,296,2191,1,0,0,0,298,2201,1,0,0,0,300,2208,
        1,0,0,0,302,2215,1,0,0,0,304,2222,1,0,0,0,306,2235,1,0,0,0,308,2248,
        1,0,0,0,310,2261,1,0,0,0,312,2266,1,0,0,0,314,2322,1,0,0,0,316,2365,
        1,0,0,0,318,2367,1,0,0,0,320,2372,1,0,0,0,322,2384,1,0,0,0,324,2399,
        1,0,0,0,326,2416,1,0,0,0,328,2433,1,0,0,0,330,2450,1,0,0,0,332,2467,
        1,0,0,0,334,2484,1,0,0,0,336,2501,1,0,0,0,338,2515,1,0,0,0,340,2529,
        1,0,0,0,342,2546,1,0,0,0,344,2557,1,0,0,0,346,2568,1,0,0,0,348,2585,
        1,0,0,0,350,2602,1,0,0,0,352,2616,1,0,0,0,354,2630,1,0,0,0,356,2641,
        1,0,0,0,358,2652,1,0,0,0,360,2663,1,0,0,0,362,2674,1,0,0,0,364,2687,
        1,0,0,0,366,2700,1,0,0,0,368,2715,1,0,0,0,370,2732,1,0,0,0,372,2800,
        1,0,0,0,374,2802,1,0,0,0,376,2830,1,0,0,0,378,2853,1,0,0,0,380,2874,
        1,0,0,0,382,2885,1,0,0,0,384,2896,1,0,0,0,386,2907,1,0,0,0,388,2918,
        1,0,0,0,390,2929,1,0,0,0,392,2940,1,0,0,0,394,2951,1,0,0,0,396,2962,
        1,0,0,0,398,2973,1,0,0,0,400,2984,1,0,0,0,402,2995,1,0,0,0,404,3006,
        1,0,0,0,406,3017,1,0,0,0,408,3029,1,0,0,0,410,3047,1,0,0,0,412,3070,
        1,0,0,0,414,3089,1,0,0,0,416,3093,1,0,0,0,418,3145,1,0,0,0,420,3156,
        1,0,0,0,422,3174,1,0,0,0,424,3196,1,0,0,0,426,3218,1,0,0,0,428,3224,
        1,0,0,0,430,3238,1,0,0,0,432,3256,1,0,0,0,434,3270,1,0,0,0,436,3278,
        1,0,0,0,438,3282,1,0,0,0,440,3284,1,0,0,0,442,3286,1,0,0,0,444,3290,
        1,0,0,0,446,3292,1,0,0,0,448,3294,1,0,0,0,450,3296,1,0,0,0,452,3298,
        1,0,0,0,454,3300,1,0,0,0,456,3302,1,0,0,0,458,3304,1,0,0,0,460,3306,
        1,0,0,0,462,3308,1,0,0,0,464,3310,1,0,0,0,466,3312,1,0,0,0,468,3314,
        1,0,0,0,470,3316,1,0,0,0,472,3318,1,0,0,0,474,3320,1,0,0,0,476,3322,
        1,0,0,0,478,3324,1,0,0,0,480,3326,1,0,0,0,482,3328,1,0,0,0,484,3358,
        1,0,0,0,486,3360,1,0,0,0,488,3374,1,0,0,0,490,3388,1,0,0,0,492,3402,
        1,0,0,0,494,3437,1,0,0,0,496,3439,1,0,0,0,498,3466,1,0,0,0,500,3468,
        1,0,0,0,502,3485,1,0,0,0,504,3487,1,0,0,0,506,3506,1,0,0,0,508,3508,
        1,0,0,0,510,3534,1,0,0,0,512,3536,1,0,0,0,514,3552,1,0,0,0,516,3554,
        1,0,0,0,518,3575,1,0,0,0,520,3577,1,0,0,0,522,3595,1,0,0,0,524,3597,
        1,0,0,0,526,3615,1,0,0,0,528,3617,1,0,0,0,530,3634,1,0,0,0,532,3636,
        1,0,0,0,534,3659,1,0,0,0,536,3661,1,0,0,0,538,3680,1,0,0,0,540,3682,
        1,0,0,0,542,3700,1,0,0,0,544,3702,1,0,0,0,546,3720,1,0,0,0,548,3722,
        1,0,0,0,550,3744,1,0,0,0,552,3746,1,0,0,0,554,3763,1,0,0,0,556,3765,
        1,0,0,0,558,3786,1,0,0,0,560,3788,1,0,0,0,562,3810,1,0,0,0,564,3812,
        1,0,0,0,566,3849,1,0,0,0,568,3851,1,0,0,0,570,3869,1,0,0,0,572,3871,
        1,0,0,0,574,3885,1,0,0,0,576,3899,1,0,0,0,578,3909,1,0,0,0,580,3926,
        1,0,0,0,582,3948,1,0,0,0,584,3955,1,0,0,0,586,3963,1,0,0,0,588,3968,
        1,0,0,0,590,3970,1,0,0,0,592,3973,1,0,0,0,594,3976,1,0,0,0,596,3995,
        1,0,0,0,598,3997,1,0,0,0,600,4000,1,0,0,0,602,4003,1,0,0,0,604,4006,
        1,0,0,0,606,4011,1,0,0,0,608,4016,1,0,0,0,610,4018,1,0,0,0,612,4021,
        1,0,0,0,614,4032,1,0,0,0,616,4034,1,0,0,0,618,4037,1,0,0,0,620,4040,
        1,0,0,0,622,4043,1,0,0,0,624,4046,1,0,0,0,626,4049,1,0,0,0,628,4052,
        1,0,0,0,630,4055,1,0,0,0,632,4058,1,0,0,0,634,4061,1,0,0,0,636,4064,
        1,0,0,0,638,4067,1,0,0,0,640,4070,1,0,0,0,642,4073,1,0,0,0,644,4076,
        1,0,0,0,646,4079,1,0,0,0,648,4082,1,0,0,0,650,4085,1,0,0,0,652,4088,
        1,0,0,0,654,4091,1,0,0,0,656,4094,1,0,0,0,658,4097,1,0,0,0,660,4100,
        1,0,0,0,662,4103,1,0,0,0,664,4106,1,0,0,0,666,4109,1,0,0,0,668,4112,
        1,0,0,0,670,4115,1,0,0,0,672,4118,1,0,0,0,674,4121,1,0,0,0,676,4124,
        1,0,0,0,678,4127,1,0,0,0,680,4130,1,0,0,0,682,4133,1,0,0,0,684,4136,
        1,0,0,0,686,4139,1,0,0,0,688,4142,1,0,0,0,690,4145,1,0,0,0,692,4148,
        1,0,0,0,694,4151,1,0,0,0,696,4154,1,0,0,0,698,4157,1,0,0,0,700,4160,
        1,0,0,0,702,4163,1,0,0,0,704,4166,1,0,0,0,706,4169,1,0,0,0,708,4172,
        1,0,0,0,710,4175,1,0,0,0,712,4178,1,0,0,0,714,4181,1,0,0,0,716,4184,
        1,0,0,0,718,4187,1,0,0,0,720,4190,1,0,0,0,722,4193,1,0,0,0,724,4196,
        1,0,0,0,726,4199,1,0,0,0,728,4202,1,0,0,0,730,4205,1,0,0,0,732,4208,
        1,0,0,0,734,4211,1,0,0,0,736,4214,1,0,0,0,738,4217,1,0,0,0,740,4220,
        1,0,0,0,742,4223,1,0,0,0,744,4226,1,0,0,0,746,4229,1,0,0,0,748,4232,
        1,0,0,0,750,4241,1,0,0,0,752,4244,1,0,0,0,754,4247,1,0,0,0,756,4250,
        1,0,0,0,758,4253,1,0,0,0,760,4256,1,0,0,0,762,4259,1,0,0,0,764,4262,
        1,0,0,0,766,4265,1,0,0,0,768,4268,1,0,0,0,770,4271,1,0,0,0,772,4274,
        1,0,0,0,774,4277,1,0,0,0,776,4280,1,0,0,0,778,4283,1,0,0,0,780,4286,
        1,0,0,0,782,4289,1,0,0,0,784,4292,1,0,0,0,786,4295,1,0,0,0,788,4298,
        1,0,0,0,790,4301,1,0,0,0,792,794,3,10,5,0,793,792,1,0,0,0,794,797,
        1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,795,
        1,0,0,0,798,799,5,0,0,1,799,1,1,0,0,0,800,803,3,6,3,0,801,803,3,
        8,4,0,802,800,1,0,0,0,802,801,1,0,0,0,803,3,1,0,0,0,804,805,5,1,
        0,0,805,806,5,2,0,0,806,807,5,491,0,0,807,5,1,0,0,0,808,809,5,3,
        0,0,809,810,5,4,0,0,810,811,5,2,0,0,811,812,5,491,0,0,812,7,1,0,
        0,0,813,814,5,3,0,0,814,815,5,5,0,0,815,816,5,2,0,0,816,817,5,491,
        0,0,817,9,1,0,0,0,818,834,3,4,2,0,819,834,3,2,1,0,820,834,3,12,6,
        0,821,834,3,14,7,0,822,834,3,16,8,0,823,834,3,18,9,0,824,834,3,20,
        10,0,825,834,3,22,11,0,826,834,3,24,12,0,827,834,3,26,13,0,828,834,
        3,28,14,0,829,834,3,30,15,0,830,834,3,32,16,0,831,834,3,34,17,0,
        832,834,3,36,18,0,833,818,1,0,0,0,833,819,1,0,0,0,833,820,1,0,0,
        0,833,821,1,0,0,0,833,822,1,0,0,0,833,823,1,0,0,0,833,824,1,0,0,
        0,833,825,1,0,0,0,833,826,1,0,0,0,833,827,1,0,0,0,833,828,1,0,0,
        0,833,829,1,0,0,0,833,830,1,0,0,0,833,831,1,0,0,0,833,832,1,0,0,
        0,834,11,1,0,0,0,835,836,5,6,0,0,836,837,5,7,0,0,837,838,5,491,0,
        0,838,13,1,0,0,0,839,840,5,493,0,0,840,841,5,2,0,0,841,842,5,8,0,
        0,842,843,3,174,87,0,843,15,1,0,0,0,844,845,5,496,0,0,845,846,5,
        2,0,0,846,847,5,9,0,0,847,848,7,0,0,0,848,17,1,0,0,0,849,850,5,492,
        0,0,850,851,5,2,0,0,851,853,3,440,220,0,852,854,3,446,223,0,853,
        852,1,0,0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,857,3,448,224,0,
        856,855,1,0,0,0,856,857,1,0,0,0,857,859,1,0,0,0,858,860,3,450,225,
        0,859,858,1,0,0,0,859,860,1,0,0,0,860,862,1,0,0,0,861,863,3,246,
        123,0,862,861,1,0,0,0,862,863,1,0,0,0,863,865,1,0,0,0,864,866,3,
        454,227,0,865,864,1,0,0,0,865,866,1,0,0,0,866,868,1,0,0,0,867,869,
        3,244,122,0,868,867,1,0,0,0,868,869,1,0,0,0,869,871,1,0,0,0,870,
        872,3,456,228,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,1,0,0,0,
        873,874,3,458,229,0,874,879,3,174,87,0,875,876,5,15,0,0,876,878,
        3,108,54,0,877,875,1,0,0,0,878,881,1,0,0,0,879,877,1,0,0,0,879,880,
        1,0,0,0,880,886,1,0,0,0,881,879,1,0,0,0,882,883,5,15,0,0,883,885,
        3,150,75,0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,
        1,0,0,0,887,892,1,0,0,0,888,886,1,0,0,0,889,891,3,172,86,0,890,889,
        1,0,0,0,891,894,1,0,0,0,892,890,1,0,0,0,892,893,1,0,0,0,893,19,1,
        0,0,0,894,892,1,0,0,0,895,896,5,492,0,0,896,898,5,2,0,0,897,899,
        3,442,221,0,898,897,1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,
        902,3,446,223,0,901,900,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,
        903,905,3,448,224,0,904,903,1,0,0,0,904,905,1,0,0,0,905,907,1,0,
        0,0,906,908,3,450,225,0,907,906,1,0,0,0,907,908,1,0,0,0,908,910,
        1,0,0,0,909,911,3,246,123,0,910,909,1,0,0,0,910,911,1,0,0,0,911,
        913,1,0,0,0,912,914,3,454,227,0,913,912,1,0,0,0,913,914,1,0,0,0,
        914,916,1,0,0,0,915,917,3,244,122,0,916,915,1,0,0,0,916,917,1,0,
        0,0,917,919,1,0,0,0,918,920,3,456,228,0,919,918,1,0,0,0,919,920,
        1,0,0,0,920,921,1,0,0,0,921,922,3,458,229,0,922,923,3,174,87,0,923,
        928,3,116,58,0,924,925,5,15,0,0,925,927,3,108,54,0,926,924,1,0,0,
        0,927,930,1,0,0,0,928,926,1,0,0,0,928,929,1,0,0,0,929,935,1,0,0,
        0,930,928,1,0,0,0,931,932,5,15,0,0,932,934,3,150,75,0,933,931,1,
        0,0,0,934,937,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,941,1,
        0,0,0,937,935,1,0,0,0,938,940,3,172,86,0,939,938,1,0,0,0,940,943,
        1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,21,1,0,0,0,943,941,1,
        0,0,0,944,945,5,492,0,0,945,947,5,2,0,0,946,948,3,444,222,0,947,
        946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,951,3,446,223,0,
        950,949,1,0,0,0,950,951,1,0,0,0,951,953,1,0,0,0,952,954,3,448,224,
        0,953,952,1,0,0,0,953,954,1,0,0,0,954,956,1,0,0,0,955,957,3,450,
        225,0,956,955,1,0,0,0,956,957,1,0,0,0,957,959,1,0,0,0,958,960,3,
        246,123,0,959,958,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,961,963,
        3,454,227,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,
        965,7,1,0,0,965,966,3,174,87,0,966,967,5,15,0,0,967,972,3,40,20,
        0,968,969,5,15,0,0,969,971,3,114,57,0,970,968,1,0,0,0,971,974,1,
        0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,23,1,0,0,0,974,972,1,0,
        0,0,975,979,5,18,0,0,976,978,3,150,75,0,977,976,1,0,0,0,978,981,
        1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,979,
        1,0,0,0,982,983,3,38,19,0,983,25,1,0,0,0,984,985,5,19,0,0,985,989,
        3,38,19,0,986,988,3,150,75,0,987,986,1,0,0,0,988,991,1,0,0,0,989,
        987,1,0,0,0,989,990,1,0,0,0,990,992,1,0,0,0,991,989,1,0,0,0,992,
        993,3,58,29,0,993,27,1,0,0,0,994,995,5,20,0,0,995,996,5,495,0,0,
        996,997,5,2,0,0,997,1001,5,21,0,0,998,1000,3,172,86,0,999,998,1,
        0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,
        1004,1,0,0,0,1003,1001,1,0,0,0,1004,1005,5,22,0,0,1005,29,1,0,0,
        0,1006,1007,5,497,0,0,1007,1008,5,2,0,0,1008,1009,5,23,0,0,1009,
        1018,5,21,0,0,1010,1015,3,102,51,0,1011,1012,5,15,0,0,1012,1014,
        3,102,51,0,1013,1011,1,0,0,0,1014,1017,1,0,0,0,1015,1013,1,0,0,0,
        1015,1016,1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1018,1010,
        1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1021,5,22,0,0,1021,
        31,1,0,0,0,1022,1023,5,498,0,0,1023,1025,5,2,0,0,1024,1026,3,462,
        231,0,1025,1024,1,0,0,0,1025,1026,1,0,0,0,1026,1029,1,0,0,0,1027,
        1030,3,154,77,0,1028,1030,3,484,242,0,1029,1027,1,0,0,0,1029,1028,
        1,0,0,0,1030,33,1,0,0,0,1031,1032,5,24,0,0,1032,1033,3,160,80,0,
        1033,1034,5,15,0,0,1034,1035,5,21,0,0,1035,1040,5,489,0,0,1036,1037,
        5,15,0,0,1037,1039,5,489,0,0,1038,1036,1,0,0,0,1039,1042,1,0,0,0,
        1040,1038,1,0,0,0,1040,1041,1,0,0,0,1041,1043,1,0,0,0,1042,1040,
        1,0,0,0,1043,1044,5,22,0,0,1044,35,1,0,0,0,1045,1046,5,25,0,0,1046,
        1047,5,492,0,0,1047,1048,5,15,0,0,1048,1049,5,493,0,0,1049,1050,
        5,15,0,0,1050,1051,5,21,0,0,1051,1056,5,489,0,0,1052,1053,5,15,0,
        0,1053,1055,5,489,0,0,1054,1052,1,0,0,0,1055,1058,1,0,0,0,1056,1054,
        1,0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,1058,1056,1,0,0,0,1059,
        1060,5,22,0,0,1060,37,1,0,0,0,1061,1063,3,444,222,0,1062,1061,1,
        0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1066,3,446,223,0,
        1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,1069,
        3,448,224,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,
        0,1070,1072,3,450,225,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,
        1074,1,0,0,0,1073,1075,3,42,21,0,1074,1073,1,0,0,0,1074,1075,1,0,
        0,0,1075,1079,1,0,0,0,1076,1078,3,56,28,0,1077,1076,1,0,0,0,1078,
        1081,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1082,1,0,0,
        0,1081,1079,1,0,0,0,1082,1083,3,174,87,0,1083,1084,5,492,0,0,1084,
        1085,5,26,0,0,1085,1086,3,176,88,0,1086,1088,5,27,0,0,1087,1089,
        3,454,227,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1091,1,0,0,
        0,1090,1092,3,244,122,0,1091,1090,1,0,0,0,1091,1092,1,0,0,0,1092,
        1096,1,0,0,0,1093,1095,3,46,23,0,1094,1093,1,0,0,0,1095,1098,1,0,
        0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,39,1,0,0,0,1098,1096,
        1,0,0,0,1099,1105,3,148,74,0,1100,1105,3,250,125,0,1101,1105,3,252,
        126,0,1102,1105,3,256,128,0,1103,1105,3,258,129,0,1104,1099,1,0,
        0,0,1104,1100,1,0,0,0,1104,1101,1,0,0,0,1104,1102,1,0,0,0,1104,1103,
        1,0,0,0,1105,41,1,0,0,0,1106,1109,3,476,238,0,1107,1109,3,44,22,
        0,1108,1106,1,0,0,0,1108,1107,1,0,0,0,1109,43,1,0,0,0,1110,1111,
        5,28,0,0,1111,1112,5,489,0,0,1112,45,1,0,0,0,1113,1123,3,172,86,
        0,1114,1123,3,110,55,0,1115,1123,3,114,57,0,1116,1123,3,112,56,0,
        1117,1123,3,186,93,0,1118,1123,3,48,24,0,1119,1123,3,50,25,0,1120,
        1123,3,52,26,0,1121,1123,3,54,27,0,1122,1113,1,0,0,0,1122,1114,1,
        0,0,0,1122,1115,1,0,0,0,1122,1116,1,0,0,0,1122,1117,1,0,0,0,1122,
        1118,1,0,0,0,1122,1119,1,0,0,0,1122,1120,1,0,0,0,1122,1121,1,0,0,
        0,1123,47,1,0,0,0,1124,1125,5,29,0,0,1125,1126,5,491,0,0,1126,49,
        1,0,0,0,1127,1128,5,30,0,0,1128,1129,3,148,74,0,1129,51,1,0,0,0,
        1130,1131,5,31,0,0,1131,1132,3,148,74,0,1132,53,1,0,0,0,1133,1134,
        5,32,0,0,1134,1135,3,148,74,0,1135,55,1,0,0,0,1136,1139,3,466,233,
        0,1137,1139,3,206,103,0,1138,1136,1,0,0,0,1138,1137,1,0,0,0,1139,
        57,1,0,0,0,1140,1142,5,21,0,0,1141,1143,3,60,30,0,1142,1141,1,0,
        0,0,1143,1144,1,0,0,0,1144,1142,1,0,0,0,1144,1145,1,0,0,0,1145,1149,
        1,0,0,0,1146,1148,3,34,17,0,1147,1146,1,0,0,0,1148,1151,1,0,0,0,
        1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,0,1151,1149,
        1,0,0,0,1152,1153,5,22,0,0,1153,59,1,0,0,0,1154,1156,5,494,0,0,1155,
        1154,1,0,0,0,1155,1156,1,0,0,0,1156,1160,1,0,0,0,1157,1159,3,62,
        31,0,1158,1157,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,
        1161,1,0,0,0,1161,1163,1,0,0,0,1162,1160,1,0,0,0,1163,1164,3,64,
        32,0,1164,61,1,0,0,0,1165,1170,3,312,156,0,1166,1170,3,314,157,0,
        1167,1170,3,316,158,0,1168,1170,3,320,160,0,1169,1165,1,0,0,0,1169,
        1166,1,0,0,0,1169,1167,1,0,0,0,1169,1168,1,0,0,0,1170,63,1,0,0,0,
        1171,1183,3,66,33,0,1172,1183,3,68,34,0,1173,1183,3,70,35,0,1174,
        1183,3,72,36,0,1175,1183,3,74,37,0,1176,1183,3,76,38,0,1177,1183,
        3,78,39,0,1178,1183,3,80,40,0,1179,1183,3,82,41,0,1180,1183,3,84,
        42,0,1181,1183,3,86,43,0,1182,1171,1,0,0,0,1182,1172,1,0,0,0,1182,
        1173,1,0,0,0,1182,1174,1,0,0,0,1182,1175,1,0,0,0,1182,1176,1,0,0,
        0,1182,1177,1,0,0,0,1182,1178,1,0,0,0,1182,1179,1,0,0,0,1182,1180,
        1,0,0,0,1182,1181,1,0,0,0,1183,65,1,0,0,0,1184,1185,5,493,0,0,1185,
        1186,5,2,0,0,1186,1187,3,68,34,0,1187,67,1,0,0,0,1188,1192,3,88,
        44,0,1189,1192,3,90,45,0,1190,1192,3,92,46,0,1191,1188,1,0,0,0,1191,
        1189,1,0,0,0,1191,1190,1,0,0,0,1192,69,1,0,0,0,1193,1194,5,33,0,
        0,1194,1199,5,34,0,0,1195,1196,5,15,0,0,1196,1198,3,150,75,0,1197,
        1195,1,0,0,0,1198,1201,1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,
        0,1200,1213,1,0,0,0,1201,1199,1,0,0,0,1202,1203,5,33,0,0,1203,1204,
        3,220,110,0,1204,1209,3,162,81,0,1205,1206,5,15,0,0,1206,1208,3,
        150,75,0,1207,1205,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,
        1210,1,0,0,0,1210,1213,1,0,0,0,1211,1209,1,0,0,0,1212,1193,1,0,0,
        0,1212,1202,1,0,0,0,1213,71,1,0,0,0,1214,1215,5,35,0,0,1215,1220,
        3,94,47,0,1216,1217,5,15,0,0,1217,1219,3,150,75,0,1218,1216,1,0,
        0,0,1219,1222,1,0,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,73,
        1,0,0,0,1222,1220,1,0,0,0,1223,1224,5,35,0,0,1224,1225,5,499,0,0,
        1225,1226,3,162,81,0,1226,1227,5,15,0,0,1227,1228,3,94,47,0,1228,
        1229,5,15,0,0,1229,1234,3,94,47,0,1230,1231,5,15,0,0,1231,1233,3,
        150,75,0,1232,1230,1,0,0,0,1233,1236,1,0,0,0,1234,1232,1,0,0,0,1234,
        1235,1,0,0,0,1235,75,1,0,0,0,1236,1234,1,0,0,0,1237,1238,5,36,0,
        0,1238,1239,3,160,80,0,1239,1240,5,15,0,0,1240,1241,3,94,47,0,1241,
        1245,5,37,0,0,1242,1244,3,96,48,0,1243,1242,1,0,0,0,1244,1247,1,
        0,0,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1248,1,0,0,0,1247,
        1245,1,0,0,0,1248,1253,5,38,0,0,1249,1250,5,15,0,0,1250,1252,3,150,
        75,0,1251,1249,1,0,0,0,1252,1255,1,0,0,0,1253,1251,1,0,0,0,1253,
        1254,1,0,0,0,1254,77,1,0,0,0,1255,1253,1,0,0,0,1256,1257,5,39,0,
        0,1257,1258,3,160,80,0,1258,1259,5,15,0,0,1259,1265,5,37,0,0,1260,
        1263,3,94,47,0,1261,1262,5,15,0,0,1262,1264,3,94,47,0,1263,1261,
        1,0,0,0,1263,1264,1,0,0,0,1264,1266,1,0,0,0,1265,1260,1,0,0,0,1265,
        1266,1,0,0,0,1266,1267,1,0,0,0,1267,1272,5,38,0,0,1268,1269,5,15,
        0,0,1269,1271,3,150,75,0,1270,1268,1,0,0,0,1271,1274,1,0,0,0,1272,
        1270,1,0,0,0,1272,1273,1,0,0,0,1273,79,1,0,0,0,1274,1272,1,0,0,0,
        1275,1276,5,40,0,0,1276,1281,3,160,80,0,1277,1278,5,15,0,0,1278,
        1280,3,150,75,0,1279,1277,1,0,0,0,1280,1283,1,0,0,0,1281,1279,1,
        0,0,0,1281,1282,1,0,0,0,1282,81,1,0,0,0,1283,1281,1,0,0,0,1284,1285,
        5,41,0,0,1285,1286,5,42,0,0,1286,1287,3,162,81,0,1287,1288,5,43,
        0,0,1288,1293,3,94,47,0,1289,1290,5,15,0,0,1290,1292,3,150,75,0,
        1291,1289,1,0,0,0,1292,1295,1,0,0,0,1293,1291,1,0,0,0,1293,1294,
        1,0,0,0,1294,83,1,0,0,0,1295,1293,1,0,0,0,1296,1297,5,44,0,0,1297,
        1298,5,42,0,0,1298,1299,3,162,81,0,1299,1300,5,45,0,0,1300,1305,
        3,98,49,0,1301,1302,5,15,0,0,1302,1304,3,150,75,0,1303,1301,1,0,
        0,0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,85,
        1,0,0,0,1307,1305,1,0,0,0,1308,1313,5,46,0,0,1309,1310,5,15,0,0,
        1310,1312,3,150,75,0,1311,1309,1,0,0,0,1312,1315,1,0,0,0,1313,1311,
        1,0,0,0,1313,1314,1,0,0,0,1314,87,1,0,0,0,1315,1313,1,0,0,0,1316,
        1318,5,47,0,0,1317,1319,3,42,21,0,1318,1317,1,0,0,0,1318,1319,1,
        0,0,0,1319,1323,1,0,0,0,1320,1322,3,56,28,0,1321,1320,1,0,0,0,1322,
        1325,1,0,0,0,1323,1321,1,0,0,0,1323,1324,1,0,0,0,1324,1327,1,0,0,
        0,1325,1323,1,0,0,0,1326,1328,3,244,122,0,1327,1326,1,0,0,0,1327,
        1328,1,0,0,0,1328,1329,1,0,0,0,1329,1330,3,174,87,0,1330,1331,3,
        162,81,0,1331,1332,5,26,0,0,1332,1333,3,432,216,0,1333,1337,5,27,
        0,0,1334,1336,3,172,86,0,1335,1334,1,0,0,0,1336,1339,1,0,0,0,1337,
        1335,1,0,0,0,1337,1338,1,0,0,0,1338,1350,1,0,0,0,1339,1337,1,0,0,
        0,1340,1344,5,37,0,0,1341,1342,3,428,214,0,1342,1343,5,15,0,0,1343,
        1345,1,0,0,0,1344,1341,1,0,0,0,1345,1346,1,0,0,0,1346,1344,1,0,0,
        0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1349,5,38,0,0,1349,1351,
        1,0,0,0,1350,1340,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,
        1353,5,43,0,0,1353,1354,3,94,47,0,1354,1355,5,45,0,0,1355,1360,3,
        94,47,0,1356,1357,5,15,0,0,1357,1359,3,150,75,0,1358,1356,1,0,0,
        0,1359,1362,1,0,0,0,1360,1358,1,0,0,0,1360,1361,1,0,0,0,1361,89,
        1,0,0,0,1362,1360,1,0,0,0,1363,1365,5,48,0,0,1364,1366,3,42,21,0,
        1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1370,1,0,0,0,1367,1369,
        3,56,28,0,1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,
        1370,1371,1,0,0,0,1371,1374,1,0,0,0,1372,1370,1,0,0,0,1373,1375,
        3,244,122,0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,
        0,1376,1377,3,174,87,0,1377,1378,3,162,81,0,1378,1379,5,26,0,0,1379,
        1380,3,432,216,0,1380,1384,5,27,0,0,1381,1383,3,172,86,0,1382,1381,
        1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,0,0,1384,1385,1,0,0,0,1385,
        1397,1,0,0,0,1386,1384,1,0,0,0,1387,1391,5,37,0,0,1388,1389,3,428,
        214,0,1389,1390,5,15,0,0,1390,1392,1,0,0,0,1391,1388,1,0,0,0,1392,
        1393,1,0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,
        0,1395,1396,5,38,0,0,1396,1398,1,0,0,0,1397,1387,1,0,0,0,1397,1398,
        1,0,0,0,1398,1399,1,0,0,0,1399,1400,5,43,0,0,1400,1401,3,94,47,0,
        1401,1410,5,37,0,0,1402,1407,3,94,47,0,1403,1404,5,15,0,0,1404,1406,
        3,94,47,0,1405,1403,1,0,0,0,1406,1409,1,0,0,0,1407,1405,1,0,0,0,
        1407,1408,1,0,0,0,1408,1411,1,0,0,0,1409,1407,1,0,0,0,1410,1402,
        1,0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1417,5,38,0,0,1413,
        1414,5,15,0,0,1414,1416,3,150,75,0,1415,1413,1,0,0,0,1416,1419,1,
        0,0,0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,91,1,0,0,0,1419,1417,
        1,0,0,0,1420,1421,5,49,0,0,1421,1422,5,50,0,0,1422,1423,3,438,219,
        0,1423,1424,5,37,0,0,1424,1425,3,100,50,0,1425,1426,5,38,0,0,1426,
        1427,5,45,0,0,1427,1432,3,98,49,0,1428,1429,5,15,0,0,1429,1431,3,
        150,75,0,1430,1428,1,0,0,0,1431,1434,1,0,0,0,1432,1430,1,0,0,0,1432,
        1433,1,0,0,0,1433,93,1,0,0,0,1434,1432,1,0,0,0,1435,1436,5,51,0,
        0,1436,1437,5,493,0,0,1437,95,1,0,0,0,1438,1439,3,148,74,0,1439,
        1440,5,15,0,0,1440,1441,3,94,47,0,1441,97,1,0,0,0,1442,1443,5,43,
        0,0,1443,1446,5,52,0,0,1444,1446,3,94,47,0,1445,1442,1,0,0,0,1445,
        1444,1,0,0,0,1446,99,1,0,0,0,1447,1452,3,94,47,0,1448,1449,5,15,
        0,0,1449,1451,3,94,47,0,1450,1448,1,0,0,0,1451,1454,1,0,0,0,1452,
        1450,1,0,0,0,1452,1453,1,0,0,0,1453,101,1,0,0,0,1454,1452,1,0,0,
        0,1455,1458,5,498,0,0,1456,1458,3,104,52,0,1457,1455,1,0,0,0,1457,
        1456,1,0,0,0,1458,103,1,0,0,0,1459,1460,5,53,0,0,1460,1469,5,26,
        0,0,1461,1466,3,106,53,0,1462,1463,5,15,0,0,1463,1465,3,106,53,0,
        1464,1462,1,0,0,0,1465,1468,1,0,0,0,1466,1464,1,0,0,0,1466,1467,
        1,0,0,0,1467,1470,1,0,0,0,1468,1466,1,0,0,0,1469,1461,1,0,0,0,1469,
        1470,1,0,0,0,1470,1471,1,0,0,0,1471,1472,5,27,0,0,1472,105,1,0,0,
        0,1473,1474,7,2,0,0,1474,107,1,0,0,0,1475,1481,3,110,55,0,1476,1481,
        3,114,57,0,1477,1481,3,112,56,0,1478,1481,3,186,93,0,1479,1481,7,
        3,0,0,1480,1475,1,0,0,0,1480,1476,1,0,0,0,1480,1477,1,0,0,0,1480,
        1478,1,0,0,0,1480,1479,1,0,0,0,1481,109,1,0,0,0,1482,1483,5,58,0,
        0,1483,1484,5,491,0,0,1484,111,1,0,0,0,1485,1489,5,9,0,0,1486,1487,
        5,26,0,0,1487,1488,5,496,0,0,1488,1490,5,27,0,0,1489,1486,1,0,0,
        0,1489,1490,1,0,0,0,1490,113,1,0,0,0,1491,1492,5,59,0,0,1492,1493,
        5,491,0,0,1493,115,1,0,0,0,1494,1511,3,118,59,0,1495,1511,3,120,
        60,0,1496,1511,3,122,61,0,1497,1511,3,124,62,0,1498,1511,3,126,63,
        0,1499,1511,3,128,64,0,1500,1511,3,130,65,0,1501,1511,3,132,66,0,
        1502,1511,3,134,67,0,1503,1511,5,492,0,0,1504,1511,3,136,68,0,1505,
        1511,3,138,69,0,1506,1511,3,140,70,0,1507,1511,3,142,71,0,1508,1511,
        3,144,72,0,1509,1511,3,146,73,0,1510,1494,1,0,0,0,1510,1495,1,0,
        0,0,1510,1496,1,0,0,0,1510,1497,1,0,0,0,1510,1498,1,0,0,0,1510,1499,
        1,0,0,0,1510,1500,1,0,0,0,1510,1501,1,0,0,0,1510,1502,1,0,0,0,1510,
        1503,1,0,0,0,1510,1504,1,0,0,0,1510,1505,1,0,0,0,1510,1506,1,0,0,
        0,1510,1507,1,0,0,0,1510,1508,1,0,0,0,1510,1509,1,0,0,0,1511,117,
        1,0,0,0,1512,1513,7,4,0,0,1513,119,1,0,0,0,1514,1515,5,489,0,0,1515,
        121,1,0,0,0,1516,1517,5,490,0,0,1517,123,1,0,0,0,1518,1519,5,62,
        0,0,1519,125,1,0,0,0,1520,1521,5,63,0,0,1521,127,1,0,0,0,1522,1531,
        5,21,0,0,1523,1528,3,148,74,0,1524,1525,5,15,0,0,1525,1527,3,148,
        74,0,1526,1524,1,0,0,0,1527,1530,1,0,0,0,1528,1526,1,0,0,0,1528,
        1529,1,0,0,0,1529,1532,1,0,0,0,1530,1528,1,0,0,0,1531,1523,1,0,0,
        0,1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,1549,5,22,0,0,1534,1535,
        5,64,0,0,1535,1544,5,21,0,0,1536,1541,3,148,74,0,1537,1538,5,15,
        0,0,1538,1540,3,148,74,0,1539,1537,1,0,0,0,1540,1543,1,0,0,0,1541,
        1539,1,0,0,0,1541,1542,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,0,0,
        0,1544,1536,1,0,0,0,1544,1545,1,0,0,0,1545,1546,1,0,0,0,1546,1547,
        5,22,0,0,1547,1549,5,65,0,0,1548,1522,1,0,0,0,1548,1534,1,0,0,0,
        1549,129,1,0,0,0,1550,1551,5,66,0,0,1551,1565,5,491,0,0,1552,1561,
        5,37,0,0,1553,1558,3,148,74,0,1554,1555,5,15,0,0,1555,1557,3,148,
        74,0,1556,1554,1,0,0,0,1557,1560,1,0,0,0,1558,1556,1,0,0,0,1558,
        1559,1,0,0,0,1559,1562,1,0,0,0,1560,1558,1,0,0,0,1561,1553,1,0,0,
        0,1561,1562,1,0,0,0,1562,1563,1,0,0,0,1563,1565,5,38,0,0,1564,1550,
        1,0,0,0,1564,1552,1,0,0,0,1565,131,1,0,0,0,1566,1575,5,64,0,0,1567,
        1572,3,148,74,0,1568,1569,5,15,0,0,1569,1571,3,148,74,0,1570,1568,
        1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,0,0,0,1572,1573,1,0,0,0,1573,
        1576,1,0,0,0,1574,1572,1,0,0,0,1575,1567,1,0,0,0,1575,1576,1,0,0,
        0,1576,1577,1,0,0,0,1577,1578,5,65,0,0,1578,133,1,0,0,0,1579,1580,
        5,67,0,0,1580,135,1,0,0,0,1581,1582,5,68,0,0,1582,137,1,0,0,0,1583,
        1584,5,69,0,0,1584,139,1,0,0,0,1585,1586,5,70,0,0,1586,1587,5,26,
        0,0,1587,1588,5,492,0,0,1588,1589,5,15,0,0,1589,1590,5,493,0,0,1590,
        1591,5,27,0,0,1591,141,1,0,0,0,1592,1593,5,71,0,0,1593,1594,5,492,
        0,0,1594,143,1,0,0,0,1595,1596,5,72,0,0,1596,1597,5,492,0,0,1597,
        145,1,0,0,0,1598,1629,3,310,155,0,1599,1629,3,304,152,0,1600,1629,
        3,306,153,0,1601,1629,3,308,154,0,1602,1629,3,292,146,0,1603,1629,
        3,294,147,0,1604,1629,3,296,148,0,1605,1629,3,298,149,0,1606,1629,
        3,300,150,0,1607,1629,3,302,151,0,1608,1629,3,286,143,0,1609,1629,
        3,288,144,0,1610,1629,3,290,145,0,1611,1629,3,252,126,0,1612,1629,
        3,266,133,0,1613,1629,3,268,134,0,1614,1629,3,270,135,0,1615,1629,
        3,272,136,0,1616,1629,3,274,137,0,1617,1629,3,276,138,0,1618,1629,
        3,278,139,0,1619,1629,3,280,140,0,1620,1629,3,282,141,0,1621,1629,
        3,284,142,0,1622,1629,3,258,129,0,1623,1629,3,250,125,0,1624,1629,
        3,256,128,0,1625,1629,3,260,130,0,1626,1629,3,262,131,0,1627,1629,
        3,264,132,0,1628,1598,1,0,0,0,1628,1599,1,0,0,0,1628,1600,1,0,0,
        0,1628,1601,1,0,0,0,1628,1602,1,0,0,0,1628,1603,1,0,0,0,1628,1604,
        1,0,0,0,1628,1605,1,0,0,0,1628,1606,1,0,0,0,1628,1607,1,0,0,0,1628,
        1608,1,0,0,0,1628,1609,1,0,0,0,1628,1610,1,0,0,0,1628,1611,1,0,0,
        0,1628,1612,1,0,0,0,1628,1613,1,0,0,0,1628,1614,1,0,0,0,1628,1615,
        1,0,0,0,1628,1616,1,0,0,0,1628,1617,1,0,0,0,1628,1618,1,0,0,0,1628,
        1619,1,0,0,0,1628,1620,1,0,0,0,1628,1621,1,0,0,0,1628,1622,1,0,0,
        0,1628,1623,1,0,0,0,1628,1624,1,0,0,0,1628,1625,1,0,0,0,1628,1626,
        1,0,0,0,1628,1627,1,0,0,0,1629,147,1,0,0,0,1630,1631,3,218,109,0,
        1631,1632,3,116,58,0,1632,149,1,0,0,0,1633,1634,5,497,0,0,1634,1635,
        3,152,76,0,1635,151,1,0,0,0,1636,1640,3,154,77,0,1637,1640,5,498,
        0,0,1638,1640,3,484,242,0,1639,1636,1,0,0,0,1639,1637,1,0,0,0,1639,
        1638,1,0,0,0,1640,153,1,0,0,0,1641,1642,5,23,0,0,1642,1651,5,21,
        0,0,1643,1648,3,606,303,0,1644,1645,5,15,0,0,1645,1647,3,606,303,
        0,1646,1644,1,0,0,0,1647,1650,1,0,0,0,1648,1646,1,0,0,0,1648,1649,
        1,0,0,0,1649,1652,1,0,0,0,1650,1648,1,0,0,0,1651,1643,1,0,0,0,1651,
        1652,1,0,0,0,1652,1653,1,0,0,0,1653,1654,5,22,0,0,1654,155,1,0,0,
        0,1655,1662,3,160,80,0,1656,1662,3,166,83,0,1657,1662,3,154,77,0,
        1658,1662,5,498,0,0,1659,1662,3,158,79,0,1660,1662,3,484,242,0,1661,
        1655,1,0,0,0,1661,1656,1,0,0,0,1661,1657,1,0,0,0,1661,1658,1,0,0,
        0,1661,1659,1,0,0,0,1661,1660,1,0,0,0,1662,157,1,0,0,0,1663,1664,
        5,73,0,0,1664,1673,5,26,0,0,1665,1670,3,160,80,0,1666,1667,5,15,
        0,0,1667,1669,3,160,80,0,1668,1666,1,0,0,0,1669,1672,1,0,0,0,1670,
        1668,1,0,0,0,1670,1671,1,0,0,0,1671,1674,1,0,0,0,1672,1670,1,0,0,
        0,1673,1665,1,0,0,0,1673,1674,1,0,0,0,1674,1675,1,0,0,0,1675,1676,
        5,27,0,0,1676,159,1,0,0,0,1677,1678,3,218,109,0,1678,1679,3,162,
        81,0,1679,161,1,0,0,0,1680,1684,3,116,58,0,1681,1684,5,493,0,0,1682,
        1684,3,164,82,0,1683,1680,1,0,0,0,1683,1681,1,0,0,0,1683,1682,1,
        0,0,0,1684,163,1,0,0,0,1685,1687,5,7,0,0,1686,1688,5,74,0,0,1687,
        1686,1,0,0,0,1687,1688,1,0,0,0,1688,1690,1,0,0,0,1689,1691,5,75,
        0,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1693,1,0,0,0,1692,1694,
        5,76,0,0,1693,1692,1,0,0,0,1693,1694,1,0,0,0,1694,1696,1,0,0,0,1695,
        1697,5,45,0,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,1698,1,0,
        0,0,1698,1699,5,491,0,0,1699,1700,5,15,0,0,1700,1701,5,491,0,0,1701,
        165,1,0,0,0,1702,1703,5,23,0,0,1703,1704,5,491,0,0,1704,167,1,0,
        0,0,1705,1708,5,489,0,0,1706,1708,3,606,303,0,1707,1705,1,0,0,0,
        1707,1706,1,0,0,0,1708,169,1,0,0,0,1709,1710,7,5,0,0,1710,171,1,
        0,0,0,1711,1724,3,182,91,0,1712,1724,3,184,92,0,1713,1724,5,495,
        0,0,1714,1724,3,188,94,0,1715,1724,3,190,95,0,1716,1724,3,192,96,
        0,1717,1724,3,194,97,0,1718,1724,3,196,98,0,1719,1724,3,460,230,
        0,1720,1724,3,214,107,0,1721,1724,3,198,99,0,1722,1724,3,200,100,
        0,1723,1711,1,0,0,0,1723,1712,1,0,0,0,1723,1713,1,0,0,0,1723,1714,
        1,0,0,0,1723,1715,1,0,0,0,1723,1716,1,0,0,0,1723,1717,1,0,0,0,1723,
        1718,1,0,0,0,1723,1719,1,0,0,0,1723,1720,1,0,0,0,1723,1721,1,0,0,
        0,1723,1722,1,0,0,0,1724,173,1,0,0,0,1725,1726,6,87,-1,0,1726,1740,
        5,34,0,0,1727,1740,5,77,0,0,1728,1740,3,222,111,0,1729,1740,3,224,
        112,0,1730,1740,3,242,121,0,1731,1740,3,228,114,0,1732,1740,3,230,
        115,0,1733,1740,3,232,116,0,1734,1740,3,234,117,0,1735,1740,3,236,
        118,0,1736,1740,3,238,119,0,1737,1740,3,240,120,0,1738,1740,3,248,
        124,0,1739,1725,1,0,0,0,1739,1727,1,0,0,0,1739,1728,1,0,0,0,1739,
        1729,1,0,0,0,1739,1730,1,0,0,0,1739,1731,1,0,0,0,1739,1732,1,0,0,
        0,1739,1733,1,0,0,0,1739,1734,1,0,0,0,1739,1735,1,0,0,0,1739,1736,
        1,0,0,0,1739,1737,1,0,0,0,1739,1738,1,0,0,0,1740,1753,1,0,0,0,1741,
        1742,10,13,0,0,1742,1743,5,26,0,0,1743,1744,3,176,88,0,1744,1745,
        5,27,0,0,1745,1752,1,0,0,0,1746,1748,10,10,0,0,1747,1749,3,244,122,
        0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1752,
        5,78,0,0,1751,1741,1,0,0,0,1751,1746,1,0,0,0,1752,1755,1,0,0,0,1753,
        1751,1,0,0,0,1753,1754,1,0,0,0,1754,175,1,0,0,0,1755,1753,1,0,0,
        0,1756,1758,5,79,0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,1772,
        1,0,0,0,1759,1764,3,178,89,0,1760,1761,5,15,0,0,1761,1763,3,178,
        89,0,1762,1760,1,0,0,0,1763,1766,1,0,0,0,1764,1762,1,0,0,0,1764,
        1765,1,0,0,0,1765,1769,1,0,0,0,1766,1764,1,0,0,0,1767,1768,5,15,
        0,0,1768,1770,5,79,0,0,1769,1767,1,0,0,0,1769,1770,1,0,0,0,1770,
        1772,1,0,0,0,1771,1757,1,0,0,0,1771,1759,1,0,0,0,1772,177,1,0,0,
        0,1773,1777,3,174,87,0,1774,1776,3,180,90,0,1775,1774,1,0,0,0,1776,
        1779,1,0,0,0,1777,1775,1,0,0,0,1777,1778,1,0,0,0,1778,1781,1,0,0,
        0,1779,1777,1,0,0,0,1780,1782,5,493,0,0,1781,1780,1,0,0,0,1781,1782,
        1,0,0,0,1782,179,1,0,0,0,1783,1796,3,182,91,0,1784,1796,3,184,92,
        0,1785,1796,3,186,93,0,1786,1796,3,190,95,0,1787,1796,3,202,101,
        0,1788,1796,3,204,102,0,1789,1796,3,206,103,0,1790,1796,3,208,104,
        0,1791,1796,3,210,105,0,1792,1796,3,212,106,0,1793,1796,3,214,107,
        0,1794,1796,3,216,108,0,1795,1783,1,0,0,0,1795,1784,1,0,0,0,1795,
        1785,1,0,0,0,1795,1786,1,0,0,0,1795,1787,1,0,0,0,1795,1788,1,0,0,
        0,1795,1789,1,0,0,0,1795,1790,1,0,0,0,1795,1791,1,0,0,0,1795,1792,
        1,0,0,0,1795,1793,1,0,0,0,1795,1794,1,0,0,0,1796,181,1,0,0,0,1797,
        1798,5,491,0,0,1798,183,1,0,0,0,1799,1800,5,491,0,0,1800,1801,5,
        2,0,0,1801,1802,5,491,0,0,1802,185,1,0,0,0,1803,1804,5,80,0,0,1804,
        1810,5,489,0,0,1805,1806,5,80,0,0,1806,1807,5,26,0,0,1807,1808,5,
        489,0,0,1808,1810,5,27,0,0,1809,1803,1,0,0,0,1809,1805,1,0,0,0,1810,
        187,1,0,0,0,1811,1812,5,80,0,0,1812,1813,5,2,0,0,1813,1814,5,489,
        0,0,1814,189,1,0,0,0,1815,1816,5,75,0,0,1816,1817,5,26,0,0,1817,
        1818,5,489,0,0,1818,1819,5,27,0,0,1819,191,1,0,0,0,1820,1821,5,75,
        0,0,1821,1822,5,2,0,0,1822,1823,5,489,0,0,1823,193,1,0,0,0,1824,
        1825,5,81,0,0,1825,1826,5,26,0,0,1826,1827,5,491,0,0,1827,1828,5,
        27,0,0,1828,195,1,0,0,0,1829,1830,5,82,0,0,1830,1831,5,26,0,0,1831,
        1834,5,489,0,0,1832,1833,5,15,0,0,1833,1835,5,489,0,0,1834,1832,
        1,0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,0,0,1836,1837,5,27,0,0,1837,
        197,1,0,0,0,1838,1844,5,83,0,0,1839,1840,5,83,0,0,1840,1841,5,26,
        0,0,1841,1842,7,6,0,0,1842,1844,5,27,0,0,1843,1838,1,0,0,0,1843,
        1839,1,0,0,0,1844,199,1,0,0,0,1845,1854,5,86,0,0,1846,1851,5,26,
        0,0,1847,1852,5,489,0,0,1848,1849,5,489,0,0,1849,1850,5,15,0,0,1850,
        1852,5,489,0,0,1851,1847,1,0,0,0,1851,1848,1,0,0,0,1852,1853,1,0,
        0,0,1853,1855,5,27,0,0,1854,1846,1,0,0,0,1854,1855,1,0,0,0,1855,
        201,1,0,0,0,1856,1857,5,87,0,0,1857,1858,5,26,0,0,1858,1859,3,174,
        87,0,1859,1860,5,27,0,0,1860,203,1,0,0,0,1861,1866,5,88,0,0,1862,
        1863,5,26,0,0,1863,1864,3,174,87,0,1864,1865,5,27,0,0,1865,1867,
        1,0,0,0,1866,1862,1,0,0,0,1866,1867,1,0,0,0,1867,205,1,0,0,0,1868,
        1869,5,89,0,0,1869,1870,5,26,0,0,1870,1871,5,489,0,0,1871,1877,5,
        27,0,0,1872,1873,5,90,0,0,1873,1874,5,26,0,0,1874,1875,5,489,0,0,
        1875,1877,5,27,0,0,1876,1868,1,0,0,0,1876,1872,1,0,0,0,1877,207,
        1,0,0,0,1878,1879,5,91,0,0,1879,1880,5,26,0,0,1880,1881,3,174,87,
        0,1881,1882,5,27,0,0,1882,209,1,0,0,0,1883,1884,5,92,0,0,1884,1885,
        5,26,0,0,1885,1886,3,174,87,0,1886,1887,5,27,0,0,1887,211,1,0,0,
        0,1888,1889,7,7,0,0,1889,213,1,0,0,0,1890,1891,5,112,0,0,1891,1892,
        5,26,0,0,1892,1893,3,174,87,0,1893,1894,5,27,0,0,1894,215,1,0,0,
        0,1895,1896,5,113,0,0,1896,1897,5,26,0,0,1897,1898,3,174,87,0,1898,
        1899,5,27,0,0,1899,217,1,0,0,0,1900,1903,3,220,110,0,1901,1903,3,
        248,124,0,1902,1900,1,0,0,0,1902,1901,1,0,0,0,1903,219,1,0,0,0,1904,
        1915,3,222,111,0,1905,1915,3,224,112,0,1906,1915,3,226,113,0,1907,
        1915,3,228,114,0,1908,1915,3,230,115,0,1909,1915,3,232,116,0,1910,
        1915,3,234,117,0,1911,1915,3,236,118,0,1912,1915,3,238,119,0,1913,
        1915,3,240,120,0,1914,1904,1,0,0,0,1914,1905,1,0,0,0,1914,1906,1,
        0,0,0,1914,1907,1,0,0,0,1914,1908,1,0,0,0,1914,1909,1,0,0,0,1914,
        1910,1,0,0,0,1914,1911,1,0,0,0,1914,1912,1,0,0,0,1914,1913,1,0,0,
        0,1915,221,1,0,0,0,1916,1917,5,499,0,0,1917,223,1,0,0,0,1918,1919,
        3,482,241,0,1919,225,1,0,0,0,1920,1922,3,174,87,0,1921,1923,3,244,
        122,0,1922,1921,1,0,0,0,1922,1923,1,0,0,0,1923,1924,1,0,0,0,1924,
        1925,5,78,0,0,1925,1928,1,0,0,0,1926,1928,3,242,121,0,1927,1920,
        1,0,0,0,1927,1926,1,0,0,0,1928,227,1,0,0,0,1929,1930,5,64,0,0,1930,
        1931,5,489,0,0,1931,1932,5,114,0,0,1932,1933,3,174,87,0,1933,1934,
        5,65,0,0,1934,1944,1,0,0,0,1935,1936,5,64,0,0,1936,1937,5,115,0,
        0,1937,1938,5,114,0,0,1938,1939,5,489,0,0,1939,1940,5,114,0,0,1940,
        1941,3,174,87,0,1941,1942,5,65,0,0,1942,1944,1,0,0,0,1943,1929,1,
        0,0,0,1943,1935,1,0,0,0,1944,229,1,0,0,0,1945,1946,5,51,0,0,1946,
        231,1,0,0,0,1947,1948,5,37,0,0,1948,1949,5,489,0,0,1949,1950,5,114,
        0,0,1950,1951,3,174,87,0,1951,1952,5,38,0,0,1952,233,1,0,0,0,1953,
        1962,5,21,0,0,1954,1959,3,174,87,0,1955,1956,5,15,0,0,1956,1958,
        3,174,87,0,1957,1955,1,0,0,0,1958,1961,1,0,0,0,1959,1957,1,0,0,0,
        1959,1960,1,0,0,0,1960,1963,1,0,0,0,1961,1959,1,0,0,0,1962,1954,
        1,0,0,0,1962,1963,1,0,0,0,1963,1964,1,0,0,0,1964,1980,5,22,0,0,1965,
        1966,5,64,0,0,1966,1975,5,21,0,0,1967,1972,3,174,87,0,1968,1969,
        5,15,0,0,1969,1971,3,174,87,0,1970,1968,1,0,0,0,1971,1974,1,0,0,
        0,1972,1970,1,0,0,0,1972,1973,1,0,0,0,1973,1976,1,0,0,0,1974,1972,
        1,0,0,0,1975,1967,1,0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,
        1978,5,22,0,0,1978,1980,5,65,0,0,1979,1953,1,0,0,0,1979,1965,1,0,
        0,0,1980,235,1,0,0,0,1981,1982,5,493,0,0,1982,237,1,0,0,0,1983,1984,
        5,116,0,0,1984,239,1,0,0,0,1985,1986,5,117,0,0,1986,241,1,0,0,0,
        1987,1989,5,118,0,0,1988,1990,3,244,122,0,1989,1988,1,0,0,0,1989,
        1990,1,0,0,0,1990,243,1,0,0,0,1991,1992,5,119,0,0,1992,1993,5,26,
        0,0,1993,1994,5,489,0,0,1994,1995,5,27,0,0,1995,245,1,0,0,0,1996,
        2001,5,120,0,0,1997,1998,5,26,0,0,1998,1999,3,452,226,0,1999,2000,
        5,27,0,0,2000,2002,1,0,0,0,2001,1997,1,0,0,0,2001,2002,1,0,0,0,2002,
        247,1,0,0,0,2003,2004,5,121,0,0,2004,249,1,0,0,0,2005,2006,5,122,
        0,0,2006,2007,5,26,0,0,2007,2008,3,148,74,0,2008,2009,5,43,0,0,2009,
        2010,3,174,87,0,2010,2011,5,27,0,0,2011,251,1,0,0,0,2012,2014,5,
        123,0,0,2013,2015,3,464,232,0,2014,2013,1,0,0,0,2014,2015,1,0,0,
        0,2015,2016,1,0,0,0,2016,2017,5,26,0,0,2017,2018,3,174,87,0,2018,
        2019,5,15,0,0,2019,2024,3,148,74,0,2020,2021,5,15,0,0,2021,2023,
        3,254,127,0,2022,2020,1,0,0,0,2023,2026,1,0,0,0,2024,2022,1,0,0,
        0,2024,2025,1,0,0,0,2025,2027,1,0,0,0,2026,2024,1,0,0,0,2027,2028,
        5,27,0,0,2028,253,1,0,0,0,2029,2031,5,124,0,0,2030,2029,1,0,0,0,
        2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2033,3,148,74,0,2033,255,
        1,0,0,0,2034,2035,5,125,0,0,2035,2036,5,26,0,0,2036,2037,3,148,74,
        0,2037,2038,5,43,0,0,2038,2039,3,174,87,0,2039,2040,5,27,0,0,2040,
        257,1,0,0,0,2041,2042,5,126,0,0,2042,2043,5,26,0,0,2043,2044,3,148,
        74,0,2044,2045,5,43,0,0,2045,2046,3,174,87,0,2046,2047,5,27,0,0,
        2047,259,1,0,0,0,2048,2049,5,127,0,0,2049,2050,3,470,235,0,2050,
        2051,5,26,0,0,2051,2052,3,148,74,0,2052,2053,5,15,0,0,2053,2054,
        3,148,74,0,2054,2055,5,27,0,0,2055,261,1,0,0,0,2056,2057,5,128,0,
        0,2057,2058,3,472,236,0,2058,2059,5,26,0,0,2059,2060,3,148,74,0,
        2060,2061,5,15,0,0,2061,2062,3,148,74,0,2062,2063,5,27,0,0,2063,
        263,1,0,0,0,2064,2065,5,129,0,0,2065,2066,5,26,0,0,2066,2067,3,148,
        74,0,2067,2068,5,15,0,0,2068,2069,3,148,74,0,2069,2070,5,15,0,0,
        2070,2071,3,148,74,0,2071,2072,5,27,0,0,2072,265,1,0,0,0,2073,2074,
        5,130,0,0,2074,2075,5,26,0,0,2075,2076,3,148,74,0,2076,2077,5,43,
        0,0,2077,2078,3,174,87,0,2078,2079,5,27,0,0,2079,267,1,0,0,0,2080,
        2081,5,131,0,0,2081,2082,5,26,0,0,2082,2083,3,148,74,0,2083,2084,
        5,43,0,0,2084,2085,3,174,87,0,2085,2086,5,27,0,0,2086,269,1,0,0,
        0,2087,2088,5,132,0,0,2088,2089,5,26,0,0,2089,2090,3,148,74,0,2090,
        2091,5,43,0,0,2091,2092,3,174,87,0,2092,2093,5,27,0,0,2093,271,1,
        0,0,0,2094,2095,5,133,0,0,2095,2096,5,26,0,0,2096,2097,3,148,74,
        0,2097,2098,5,43,0,0,2098,2099,3,174,87,0,2099,2100,5,27,0,0,2100,
        273,1,0,0,0,2101,2102,5,134,0,0,2102,2103,5,26,0,0,2103,2104,3,148,
        74,0,2104,2105,5,43,0,0,2105,2106,3,174,87,0,2106,2107,5,27,0,0,
        2107,275,1,0,0,0,2108,2109,5,135,0,0,2109,2110,5,26,0,0,2110,2111,
        3,148,74,0,2111,2112,5,43,0,0,2112,2113,3,174,87,0,2113,2114,5,27,
        0,0,2114,277,1,0,0,0,2115,2116,5,136,0,0,2116,2117,5,26,0,0,2117,
        2118,3,148,74,0,2118,2119,5,43,0,0,2119,2120,3,174,87,0,2120,2121,
        5,27,0,0,2121,279,1,0,0,0,2122,2123,5,137,0,0,2123,2124,5,26,0,0,
        2124,2125,3,148,74,0,2125,2126,5,43,0,0,2126,2127,3,174,87,0,2127,
        2128,5,27,0,0,2128,281,1,0,0,0,2129,2130,5,138,0,0,2130,2131,5,26,
        0,0,2131,2132,3,148,74,0,2132,2133,5,43,0,0,2133,2134,3,174,87,0,
        2134,2135,5,27,0,0,2135,283,1,0,0,0,2136,2137,5,139,0,0,2137,2138,
        5,26,0,0,2138,2139,3,148,74,0,2139,2140,5,43,0,0,2140,2141,3,174,
        87,0,2141,2142,5,27,0,0,2142,285,1,0,0,0,2143,2144,5,140,0,0,2144,
        2145,5,26,0,0,2145,2146,3,148,74,0,2146,2147,5,15,0,0,2147,2148,
        3,148,74,0,2148,2149,5,27,0,0,2149,287,1,0,0,0,2150,2151,5,141,0,
        0,2151,2152,5,26,0,0,2152,2153,3,148,74,0,2153,2154,5,15,0,0,2154,
        2155,3,148,74,0,2155,2156,5,15,0,0,2156,2157,3,148,74,0,2157,2158,
        5,27,0,0,2158,289,1,0,0,0,2159,2160,5,142,0,0,2160,2161,5,26,0,0,
        2161,2162,3,148,74,0,2162,2163,5,15,0,0,2163,2164,3,148,74,0,2164,
        2165,5,15,0,0,2165,2166,3,148,74,0,2166,2167,5,27,0,0,2167,291,1,
        0,0,0,2168,2172,5,143,0,0,2169,2171,3,468,234,0,2170,2169,1,0,0,
        0,2171,2174,1,0,0,0,2172,2170,1,0,0,0,2172,2173,1,0,0,0,2173,2175,
        1,0,0,0,2174,2172,1,0,0,0,2175,2176,5,26,0,0,2176,2177,3,148,74,
        0,2177,2178,5,15,0,0,2178,2179,3,148,74,0,2179,2180,5,27,0,0,2180,
        293,1,0,0,0,2181,2183,5,144,0,0,2182,2184,5,145,0,0,2183,2182,1,
        0,0,0,2183,2184,1,0,0,0,2184,2185,1,0,0,0,2185,2186,5,26,0,0,2186,
        2187,3,148,74,0,2187,2188,5,15,0,0,2188,2189,3,148,74,0,2189,2190,
        5,27,0,0,2190,295,1,0,0,0,2191,2193,5,146,0,0,2192,2194,5,145,0,
        0,2193,2192,1,0,0,0,2193,2194,1,0,0,0,2194,2195,1,0,0,0,2195,2196,
        5,26,0,0,2196,2197,3,148,74,0,2197,2198,5,15,0,0,2198,2199,3,148,
        74,0,2199,2200,5,27,0,0,2200,297,1,0,0,0,2201,2202,5,147,0,0,2202,
        2203,5,26,0,0,2203,2204,3,148,74,0,2204,2205,5,15,0,0,2205,2206,
        3,148,74,0,2206,2207,5,27,0,0,2207,299,1,0,0,0,2208,2209,5,148,0,
        0,2209,2210,5,26,0,0,2210,2211,3,148,74,0,2211,2212,5,15,0,0,2212,
        2213,3,148,74,0,2213,2214,5,27,0,0,2214,301,1,0,0,0,2215,2216,5,
        149,0,0,2216,2217,5,26,0,0,2217,2218,3,148,74,0,2218,2219,5,15,0,
        0,2219,2220,3,148,74,0,2220,2221,5,27,0,0,2221,303,1,0,0,0,2222,
        2226,5,150,0,0,2223,2225,3,468,234,0,2224,2223,1,0,0,0,2225,2228,
        1,0,0,0,2226,2224,1,0,0,0,2226,2227,1,0,0,0,2227,2229,1,0,0,0,2228,
        2226,1,0,0,0,2229,2230,5,26,0,0,2230,2231,3,148,74,0,2231,2232,5,
        15,0,0,2232,2233,3,148,74,0,2233,2234,5,27,0,0,2234,305,1,0,0,0,
        2235,2239,5,151,0,0,2236,2238,3,468,234,0,2237,2236,1,0,0,0,2238,
        2241,1,0,0,0,2239,2237,1,0,0,0,2239,2240,1,0,0,0,2240,2242,1,0,0,
        0,2241,2239,1,0,0,0,2242,2243,5,26,0,0,2243,2244,3,148,74,0,2244,
        2245,5,15,0,0,2245,2246,3,148,74,0,2246,2247,5,27,0,0,2247,307,1,
        0,0,0,2248,2252,5,152,0,0,2249,2251,3,468,234,0,2250,2249,1,0,0,
        0,2251,2254,1,0,0,0,2252,2250,1,0,0,0,2252,2253,1,0,0,0,2253,2255,
        1,0,0,0,2254,2252,1,0,0,0,2255,2256,5,26,0,0,2256,2257,3,148,74,
        0,2257,2258,5,15,0,0,2258,2259,3,148,74,0,2259,2260,5,27,0,0,2260,
        309,1,0,0,0,2261,2262,5,153,0,0,2262,2263,5,26,0,0,2263,2264,3,148,
        74,0,2264,2265,5,27,0,0,2265,311,1,0,0,0,2266,2267,5,493,0,0,2267,
        2268,5,2,0,0,2268,2269,3,314,157,0,2269,313,1,0,0,0,2270,2323,3,
        322,161,0,2271,2323,3,324,162,0,2272,2323,3,326,163,0,2273,2323,
        3,328,164,0,2274,2323,3,330,165,0,2275,2323,3,332,166,0,2276,2323,
        3,334,167,0,2277,2323,3,336,168,0,2278,2323,3,338,169,0,2279,2323,
        3,340,170,0,2280,2323,3,342,171,0,2281,2323,3,344,172,0,2282,2323,
        3,346,173,0,2283,2323,3,348,174,0,2284,2323,3,350,175,0,2285,2323,
        3,352,176,0,2286,2323,3,354,177,0,2287,2323,3,356,178,0,2288,2323,
        3,358,179,0,2289,2323,3,360,180,0,2290,2323,3,362,181,0,2291,2323,
        3,364,182,0,2292,2323,3,366,183,0,2293,2323,3,368,184,0,2294,2323,
        3,370,185,0,2295,2323,3,372,186,0,2296,2323,3,374,187,0,2297,2323,
        3,376,188,0,2298,2323,3,378,189,0,2299,2323,3,380,190,0,2300,2323,
        3,382,191,0,2301,2323,3,384,192,0,2302,2323,3,386,193,0,2303,2323,
        3,388,194,0,2304,2323,3,390,195,0,2305,2323,3,392,196,0,2306,2323,
        3,394,197,0,2307,2323,3,396,198,0,2308,2323,3,398,199,0,2309,2323,
        3,400,200,0,2310,2323,3,402,201,0,2311,2323,3,404,202,0,2312,2323,
        3,406,203,0,2313,2323,3,408,204,0,2314,2323,3,410,205,0,2315,2323,
        3,412,206,0,2316,2323,3,414,207,0,2317,2323,3,416,208,0,2318,2323,
        3,418,209,0,2319,2323,3,420,210,0,2320,2323,3,422,211,0,2321,2323,
        3,424,212,0,2322,2270,1,0,0,0,2322,2271,1,0,0,0,2322,2272,1,0,0,
        0,2322,2273,1,0,0,0,2322,2274,1,0,0,0,2322,2275,1,0,0,0,2322,2276,
        1,0,0,0,2322,2277,1,0,0,0,2322,2278,1,0,0,0,2322,2279,1,0,0,0,2322,
        2280,1,0,0,0,2322,2281,1,0,0,0,2322,2282,1,0,0,0,2322,2283,1,0,0,
        0,2322,2284,1,0,0,0,2322,2285,1,0,0,0,2322,2286,1,0,0,0,2322,2287,
        1,0,0,0,2322,2288,1,0,0,0,2322,2289,1,0,0,0,2322,2290,1,0,0,0,2322,
        2291,1,0,0,0,2322,2292,1,0,0,0,2322,2293,1,0,0,0,2322,2294,1,0,0,
        0,2322,2295,1,0,0,0,2322,2296,1,0,0,0,2322,2297,1,0,0,0,2322,2298,
        1,0,0,0,2322,2299,1,0,0,0,2322,2300,1,0,0,0,2322,2301,1,0,0,0,2322,
        2302,1,0,0,0,2322,2303,1,0,0,0,2322,2304,1,0,0,0,2322,2305,1,0,0,
        0,2322,2306,1,0,0,0,2322,2307,1,0,0,0,2322,2308,1,0,0,0,2322,2309,
        1,0,0,0,2322,2310,1,0,0,0,2322,2311,1,0,0,0,2322,2312,1,0,0,0,2322,
        2313,1,0,0,0,2322,2314,1,0,0,0,2322,2315,1,0,0,0,2322,2316,1,0,0,
        0,2322,2317,1,0,0,0,2322,2318,1,0,0,0,2322,2319,1,0,0,0,2322,2320,
        1,0,0,0,2322,2321,1,0,0,0,2323,315,1,0,0,0,2324,2326,5,154,0,0,2325,
        2327,5,155,0,0,2326,2325,1,0,0,0,2326,2327,1,0,0,0,2327,2328,1,0,
        0,0,2328,2329,3,160,80,0,2329,2330,5,15,0,0,2330,2333,3,160,80,0,
        2331,2332,5,15,0,0,2332,2334,3,186,93,0,2333,2331,1,0,0,0,2333,2334,
        1,0,0,0,2334,2339,1,0,0,0,2335,2336,5,15,0,0,2336,2338,3,150,75,
        0,2337,2335,1,0,0,0,2338,2341,1,0,0,0,2339,2337,1,0,0,0,2339,2340,
        1,0,0,0,2340,2366,1,0,0,0,2341,2339,1,0,0,0,2342,2343,5,154,0,0,
        2343,2345,5,156,0,0,2344,2346,5,155,0,0,2345,2344,1,0,0,0,2345,2346,
        1,0,0,0,2346,2347,1,0,0,0,2347,2348,3,160,80,0,2348,2349,5,15,0,
        0,2349,2351,3,160,80,0,2350,2352,3,318,159,0,2351,2350,1,0,0,0,2351,
        2352,1,0,0,0,2352,2353,1,0,0,0,2353,2356,3,474,237,0,2354,2355,5,
        15,0,0,2355,2357,3,186,93,0,2356,2354,1,0,0,0,2356,2357,1,0,0,0,
        2357,2362,1,0,0,0,2358,2359,5,15,0,0,2359,2361,3,150,75,0,2360,2358,
        1,0,0,0,2361,2364,1,0,0,0,2362,2360,1,0,0,0,2362,2363,1,0,0,0,2363,
        2366,1,0,0,0,2364,2362,1,0,0,0,2365,2324,1,0,0,0,2365,2342,1,0,0,
        0,2366,317,1,0,0,0,2367,2368,5,157,0,0,2368,2369,5,26,0,0,2369,2370,
        5,491,0,0,2370,2371,5,27,0,0,2371,319,1,0,0,0,2372,2374,5,158,0,
        0,2373,2375,3,318,159,0,2374,2373,1,0,0,0,2374,2375,1,0,0,0,2375,
        2376,1,0,0,0,2376,2381,3,474,237,0,2377,2378,5,15,0,0,2378,2380,
        3,150,75,0,2379,2377,1,0,0,0,2380,2383,1,0,0,0,2381,2379,1,0,0,0,
        2381,2382,1,0,0,0,2382,321,1,0,0,0,2383,2381,1,0,0,0,2384,2388,5,
        153,0,0,2385,2387,3,478,239,0,2386,2385,1,0,0,0,2387,2390,1,0,0,
        0,2388,2386,1,0,0,0,2388,2389,1,0,0,0,2389,2391,1,0,0,0,2390,2388,
        1,0,0,0,2391,2396,3,160,80,0,2392,2393,5,15,0,0,2393,2395,3,150,
        75,0,2394,2392,1,0,0,0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2396,
        2397,1,0,0,0,2397,323,1,0,0,0,2398,2396,1,0,0,0,2399,2403,5,150,
        0,0,2400,2402,3,468,234,0,2401,2400,1,0,0,0,2402,2405,1,0,0,0,2403,
        2401,1,0,0,0,2403,2404,1,0,0,0,2404,2406,1,0,0,0,2405,2403,1,0,0,
        0,2406,2407,3,160,80,0,2407,2408,5,15,0,0,2408,2413,3,162,81,0,2409,
        2410,5,15,0,0,2410,2412,3,150,75,0,2411,2409,1,0,0,0,2412,2415,1,
        0,0,0,2413,2411,1,0,0,0,2413,2414,1,0,0,0,2414,325,1,0,0,0,2415,
        2413,1,0,0,0,2416,2420,5,159,0,0,2417,2419,3,478,239,0,2418,2417,
        1,0,0,0,2419,2422,1,0,0,0,2420,2418,1,0,0,0,2420,2421,1,0,0,0,2421,
        2423,1,0,0,0,2422,2420,1,0,0,0,2423,2424,3,160,80,0,2424,2425,5,
        15,0,0,2425,2430,3,162,81,0,2426,2427,5,15,0,0,2427,2429,3,150,75,
        0,2428,2426,1,0,0,0,2429,2432,1,0,0,0,2430,2428,1,0,0,0,2430,2431,
        1,0,0,0,2431,327,1,0,0,0,2432,2430,1,0,0,0,2433,2437,5,151,0,0,2434,
        2436,3,468,234,0,2435,2434,1,0,0,0,2436,2439,1,0,0,0,2437,2435,1,
        0,0,0,2437,2438,1,0,0,0,2438,2440,1,0,0,0,2439,2437,1,0,0,0,2440,
        2441,3,160,80,0,2441,2442,5,15,0,0,2442,2447,3,162,81,0,2443,2444,
        5,15,0,0,2444,2446,3,150,75,0,2445,2443,1,0,0,0,2446,2449,1,0,0,
        0,2447,2445,1,0,0,0,2447,2448,1,0,0,0,2448,329,1,0,0,0,2449,2447,
        1,0,0,0,2450,2454,5,160,0,0,2451,2453,3,478,239,0,2452,2451,1,0,
        0,0,2453,2456,1,0,0,0,2454,2452,1,0,0,0,2454,2455,1,0,0,0,2455,2457,
        1,0,0,0,2456,2454,1,0,0,0,2457,2458,3,160,80,0,2458,2459,5,15,0,
        0,2459,2464,3,162,81,0,2460,2461,5,15,0,0,2461,2463,3,150,75,0,2462,
        2460,1,0,0,0,2463,2466,1,0,0,0,2464,2462,1,0,0,0,2464,2465,1,0,0,
        0,2465,331,1,0,0,0,2466,2464,1,0,0,0,2467,2471,5,152,0,0,2468,2470,
        3,468,234,0,2469,2468,1,0,0,0,2470,2473,1,0,0,0,2471,2469,1,0,0,
        0,2471,2472,1,0,0,0,2472,2474,1,0,0,0,2473,2471,1,0,0,0,2474,2475,
        3,160,80,0,2475,2476,5,15,0,0,2476,2481,3,162,81,0,2477,2478,5,15,
        0,0,2478,2480,3,150,75,0,2479,2477,1,0,0,0,2480,2483,1,0,0,0,2481,
        2479,1,0,0,0,2481,2482,1,0,0,0,2482,333,1,0,0,0,2483,2481,1,0,0,
        0,2484,2488,5,161,0,0,2485,2487,3,478,239,0,2486,2485,1,0,0,0,2487,
        2490,1,0,0,0,2488,2486,1,0,0,0,2488,2489,1,0,0,0,2489,2491,1,0,0,
        0,2490,2488,1,0,0,0,2491,2492,3,160,80,0,2492,2493,5,15,0,0,2493,
        2498,3,162,81,0,2494,2495,5,15,0,0,2495,2497,3,150,75,0,2496,2494,
        1,0,0,0,2497,2500,1,0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,0,2499,
        335,1,0,0,0,2500,2498,1,0,0,0,2501,2503,5,162,0,0,2502,2504,5,145,
        0,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2506,
        3,160,80,0,2506,2507,5,15,0,0,2507,2512,3,162,81,0,2508,2509,5,15,
        0,0,2509,2511,3,150,75,0,2510,2508,1,0,0,0,2511,2514,1,0,0,0,2512,
        2510,1,0,0,0,2512,2513,1,0,0,0,2513,337,1,0,0,0,2514,2512,1,0,0,
        0,2515,2517,5,163,0,0,2516,2518,5,145,0,0,2517,2516,1,0,0,0,2517,
        2518,1,0,0,0,2518,2519,1,0,0,0,2519,2520,3,160,80,0,2520,2521,5,
        15,0,0,2521,2526,3,162,81,0,2522,2523,5,15,0,0,2523,2525,3,150,75,
        0,2524,2522,1,0,0,0,2525,2528,1,0,0,0,2526,2524,1,0,0,0,2526,2527,
        1,0,0,0,2527,339,1,0,0,0,2528,2526,1,0,0,0,2529,2533,5,164,0,0,2530,
        2532,3,478,239,0,2531,2530,1,0,0,0,2532,2535,1,0,0,0,2533,2531,1,
        0,0,0,2533,2534,1,0,0,0,2534,2536,1,0,0,0,2535,2533,1,0,0,0,2536,
        2537,3,160,80,0,2537,2538,5,15,0,0,2538,2543,3,162,81,0,2539,2540,
        5,15,0,0,2540,2542,3,150,75,0,2541,2539,1,0,0,0,2542,2545,1,0,0,
        0,2543,2541,1,0,0,0,2543,2544,1,0,0,0,2544,341,1,0,0,0,2545,2543,
        1,0,0,0,2546,2547,5,165,0,0,2547,2548,3,160,80,0,2548,2549,5,15,
        0,0,2549,2554,3,162,81,0,2550,2551,5,15,0,0,2551,2553,3,150,75,0,
        2552,2550,1,0,0,0,2553,2556,1,0,0,0,2554,2552,1,0,0,0,2554,2555,
        1,0,0,0,2555,343,1,0,0,0,2556,2554,1,0,0,0,2557,2558,5,166,0,0,2558,
        2559,3,160,80,0,2559,2560,5,15,0,0,2560,2565,3,162,81,0,2561,2562,
        5,15,0,0,2562,2564,3,150,75,0,2563,2561,1,0,0,0,2564,2567,1,0,0,
        0,2565,2563,1,0,0,0,2565,2566,1,0,0,0,2566,345,1,0,0,0,2567,2565,
        1,0,0,0,2568,2572,5,167,0,0,2569,2571,3,478,239,0,2570,2569,1,0,
        0,0,2571,2574,1,0,0,0,2572,2570,1,0,0,0,2572,2573,1,0,0,0,2573,2575,
        1,0,0,0,2574,2572,1,0,0,0,2575,2576,3,160,80,0,2576,2577,5,15,0,
        0,2577,2582,3,162,81,0,2578,2579,5,15,0,0,2579,2581,3,150,75,0,2580,
        2578,1,0,0,0,2581,2584,1,0,0,0,2582,2580,1,0,0,0,2582,2583,1,0,0,
        0,2583,347,1,0,0,0,2584,2582,1,0,0,0,2585,2589,5,143,0,0,2586,2588,
        3,468,234,0,2587,2586,1,0,0,0,2588,2591,1,0,0,0,2589,2587,1,0,0,
        0,2589,2590,1,0,0,0,2590,2592,1,0,0,0,2591,2589,1,0,0,0,2592,2593,
        3,160,80,0,2593,2594,5,15,0,0,2594,2599,3,162,81,0,2595,2596,5,15,
        0,0,2596,2598,3,150,75,0,2597,2595,1,0,0,0,2598,2601,1,0,0,0,2599,
        2597,1,0,0,0,2599,2600,1,0,0,0,2600,349,1,0,0,0,2601,2599,1,0,0,
        0,2602,2604,5,144,0,0,2603,2605,5,145,0,0,2604,2603,1,0,0,0,2604,
        2605,1,0,0,0,2605,2606,1,0,0,0,2606,2607,3,160,80,0,2607,2608,5,
        15,0,0,2608,2613,3,162,81,0,2609,2610,5,15,0,0,2610,2612,3,150,75,
        0,2611,2609,1,0,0,0,2612,2615,1,0,0,0,2613,2611,1,0,0,0,2613,2614,
        1,0,0,0,2614,351,1,0,0,0,2615,2613,1,0,0,0,2616,2618,5,146,0,0,2617,
        2619,5,145,0,0,2618,2617,1,0,0,0,2618,2619,1,0,0,0,2619,2620,1,0,
        0,0,2620,2621,3,160,80,0,2621,2622,5,15,0,0,2622,2627,3,162,81,0,
        2623,2624,5,15,0,0,2624,2626,3,150,75,0,2625,2623,1,0,0,0,2626,2629,
        1,0,0,0,2627,2625,1,0,0,0,2627,2628,1,0,0,0,2628,353,1,0,0,0,2629,
        2627,1,0,0,0,2630,2631,5,147,0,0,2631,2632,3,160,80,0,2632,2633,
        5,15,0,0,2633,2638,3,162,81,0,2634,2635,5,15,0,0,2635,2637,3,150,
        75,0,2636,2634,1,0,0,0,2637,2640,1,0,0,0,2638,2636,1,0,0,0,2638,
        2639,1,0,0,0,2639,355,1,0,0,0,2640,2638,1,0,0,0,2641,2642,5,148,
        0,0,2642,2643,3,160,80,0,2643,2644,5,15,0,0,2644,2649,3,162,81,0,
        2645,2646,5,15,0,0,2646,2648,3,150,75,0,2647,2645,1,0,0,0,2648,2651,
        1,0,0,0,2649,2647,1,0,0,0,2649,2650,1,0,0,0,2650,357,1,0,0,0,2651,
        2649,1,0,0,0,2652,2653,5,149,0,0,2653,2654,3,160,80,0,2654,2655,
        5,15,0,0,2655,2660,3,162,81,0,2656,2657,5,15,0,0,2657,2659,3,150,
        75,0,2658,2656,1,0,0,0,2659,2662,1,0,0,0,2660,2658,1,0,0,0,2660,
        2661,1,0,0,0,2661,359,1,0,0,0,2662,2660,1,0,0,0,2663,2664,5,140,
        0,0,2664,2665,3,160,80,0,2665,2666,5,15,0,0,2666,2671,3,160,80,0,
        2667,2668,5,15,0,0,2668,2670,3,150,75,0,2669,2667,1,0,0,0,2670,2673,
        1,0,0,0,2671,2669,1,0,0,0,2671,2672,1,0,0,0,2672,361,1,0,0,0,2673,
        2671,1,0,0,0,2674,2675,5,141,0,0,2675,2676,3,160,80,0,2676,2677,
        5,15,0,0,2677,2678,3,160,80,0,2678,2679,5,15,0,0,2679,2684,3,160,
        80,0,2680,2681,5,15,0,0,2681,2683,3,150,75,0,2682,2680,1,0,0,0,2683,
        2686,1,0,0,0,2684,2682,1,0,0,0,2684,2685,1,0,0,0,2685,363,1,0,0,
        0,2686,2684,1,0,0,0,2687,2688,5,142,0,0,2688,2689,3,160,80,0,2689,
        2690,5,15,0,0,2690,2691,3,160,80,0,2691,2692,5,15,0,0,2692,2697,
        3,160,80,0,2693,2694,5,15,0,0,2694,2696,3,150,75,0,2695,2693,1,0,
        0,0,2696,2699,1,0,0,0,2697,2695,1,0,0,0,2697,2698,1,0,0,0,2698,365,
        1,0,0,0,2699,2697,1,0,0,0,2700,2701,5,168,0,0,2701,2704,3,160,80,
        0,2702,2703,5,15,0,0,2703,2705,5,489,0,0,2704,2702,1,0,0,0,2705,
        2706,1,0,0,0,2706,2704,1,0,0,0,2706,2707,1,0,0,0,2707,2712,1,0,0,
        0,2708,2709,5,15,0,0,2709,2711,3,150,75,0,2710,2708,1,0,0,0,2711,
        2714,1,0,0,0,2712,2710,1,0,0,0,2712,2713,1,0,0,0,2713,367,1,0,0,
        0,2714,2712,1,0,0,0,2715,2716,5,169,0,0,2716,2717,3,160,80,0,2717,
        2718,5,15,0,0,2718,2721,3,160,80,0,2719,2720,5,15,0,0,2720,2722,
        5,489,0,0,2721,2719,1,0,0,0,2722,2723,1,0,0,0,2723,2721,1,0,0,0,
        2723,2724,1,0,0,0,2724,2729,1,0,0,0,2725,2726,5,15,0,0,2726,2728,
        3,150,75,0,2727,2725,1,0,0,0,2728,2731,1,0,0,0,2729,2727,1,0,0,0,
        2729,2730,1,0,0,0,2730,369,1,0,0,0,2731,2729,1,0,0,0,2732,2734,5,
        170,0,0,2733,2735,5,92,0,0,2734,2733,1,0,0,0,2734,2735,1,0,0,0,2735,
        2737,1,0,0,0,2736,2738,5,108,0,0,2737,2736,1,0,0,0,2737,2738,1,0,
        0,0,2738,2739,1,0,0,0,2739,2742,3,174,87,0,2740,2741,5,15,0,0,2741,
        2743,3,160,80,0,2742,2740,1,0,0,0,2742,2743,1,0,0,0,2743,2746,1,
        0,0,0,2744,2745,5,15,0,0,2745,2747,3,186,93,0,2746,2744,1,0,0,0,
        2746,2747,1,0,0,0,2747,2750,1,0,0,0,2748,2749,5,15,0,0,2749,2751,
        3,244,122,0,2750,2748,1,0,0,0,2750,2751,1,0,0,0,2751,2756,1,0,0,
        0,2752,2753,5,15,0,0,2753,2755,3,150,75,0,2754,2752,1,0,0,0,2755,
        2758,1,0,0,0,2756,2754,1,0,0,0,2756,2757,1,0,0,0,2757,371,1,0,0,
        0,2758,2756,1,0,0,0,2759,2761,5,171,0,0,2760,2762,5,155,0,0,2761,
        2760,1,0,0,0,2761,2762,1,0,0,0,2762,2763,1,0,0,0,2763,2764,3,174,
        87,0,2764,2765,5,15,0,0,2765,2768,3,160,80,0,2766,2767,5,15,0,0,
        2767,2769,3,186,93,0,2768,2766,1,0,0,0,2768,2769,1,0,0,0,2769,2774,
        1,0,0,0,2770,2771,5,15,0,0,2771,2773,3,150,75,0,2772,2770,1,0,0,
        0,2773,2776,1,0,0,0,2774,2772,1,0,0,0,2774,2775,1,0,0,0,2775,2801,
        1,0,0,0,2776,2774,1,0,0,0,2777,2778,5,171,0,0,2778,2780,5,156,0,
        0,2779,2781,5,155,0,0,2780,2779,1,0,0,0,2780,2781,1,0,0,0,2781,2782,
        1,0,0,0,2782,2783,3,174,87,0,2783,2784,5,15,0,0,2784,2786,3,160,
        80,0,2785,2787,3,318,159,0,2786,2785,1,0,0,0,2786,2787,1,0,0,0,2787,
        2788,1,0,0,0,2788,2791,3,474,237,0,2789,2790,5,15,0,0,2790,2792,
        3,186,93,0,2791,2789,1,0,0,0,2791,2792,1,0,0,0,2792,2797,1,0,0,0,
        2793,2794,5,15,0,0,2794,2796,3,150,75,0,2795,2793,1,0,0,0,2796,2799,
        1,0,0,0,2797,2795,1,0,0,0,2797,2798,1,0,0,0,2798,2801,1,0,0,0,2799,
        2797,1,0,0,0,2800,2759,1,0,0,0,2800,2777,1,0,0,0,2801,373,1,0,0,
        0,2802,2804,5,172,0,0,2803,2805,5,173,0,0,2804,2803,1,0,0,0,2804,
        2805,1,0,0,0,2805,2807,1,0,0,0,2806,2808,5,155,0,0,2807,2806,1,0,
        0,0,2807,2808,1,0,0,0,2808,2809,1,0,0,0,2809,2810,3,160,80,0,2810,
        2811,5,15,0,0,2811,2812,3,160,80,0,2812,2813,5,15,0,0,2813,2815,
        3,160,80,0,2814,2816,3,318,159,0,2815,2814,1,0,0,0,2815,2816,1,0,
        0,0,2816,2817,1,0,0,0,2817,2818,3,474,237,0,2818,2821,3,474,237,
        0,2819,2820,5,15,0,0,2820,2822,3,186,93,0,2821,2819,1,0,0,0,2821,
        2822,1,0,0,0,2822,2827,1,0,0,0,2823,2824,5,15,0,0,2824,2826,3,150,
        75,0,2825,2823,1,0,0,0,2826,2829,1,0,0,0,2827,2825,1,0,0,0,2827,
        2828,1,0,0,0,2828,375,1,0,0,0,2829,2827,1,0,0,0,2830,2832,5,174,
        0,0,2831,2833,5,155,0,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,
        2834,1,0,0,0,2834,2835,3,480,240,0,2835,2836,3,160,80,0,2836,2837,
        5,15,0,0,2837,2839,3,160,80,0,2838,2840,3,318,159,0,2839,2838,1,
        0,0,0,2839,2840,1,0,0,0,2840,2841,1,0,0,0,2841,2844,3,474,237,0,
        2842,2843,5,15,0,0,2843,2845,3,186,93,0,2844,2842,1,0,0,0,2844,2845,
        1,0,0,0,2845,2850,1,0,0,0,2846,2847,5,15,0,0,2847,2849,3,150,75,
        0,2848,2846,1,0,0,0,2849,2852,1,0,0,0,2850,2848,1,0,0,0,2850,2851,
        1,0,0,0,2851,377,1,0,0,0,2852,2850,1,0,0,0,2853,2855,5,123,0,0,2854,
        2856,3,464,232,0,2855,2854,1,0,0,0,2855,2856,1,0,0,0,2856,2857,1,
        0,0,0,2857,2858,3,174,87,0,2858,2859,5,15,0,0,2859,2864,3,160,80,
        0,2860,2861,5,15,0,0,2861,2863,3,160,80,0,2862,2860,1,0,0,0,2863,
        2866,1,0,0,0,2864,2862,1,0,0,0,2864,2865,1,0,0,0,2865,2871,1,0,0,
        0,2866,2864,1,0,0,0,2867,2868,5,15,0,0,2868,2870,3,150,75,0,2869,
        2867,1,0,0,0,2870,2873,1,0,0,0,2871,2869,1,0,0,0,2871,2872,1,0,0,
        0,2872,379,1,0,0,0,2873,2871,1,0,0,0,2874,2875,5,130,0,0,2875,2876,
        3,160,80,0,2876,2877,5,43,0,0,2877,2882,3,174,87,0,2878,2879,5,15,
        0,0,2879,2881,3,150,75,0,2880,2878,1,0,0,0,2881,2884,1,0,0,0,2882,
        2880,1,0,0,0,2882,2883,1,0,0,0,2883,381,1,0,0,0,2884,2882,1,0,0,
        0,2885,2886,5,131,0,0,2886,2887,3,160,80,0,2887,2888,5,43,0,0,2888,
        2893,3,174,87,0,2889,2890,5,15,0,0,2890,2892,3,150,75,0,2891,2889,
        1,0,0,0,2892,2895,1,0,0,0,2893,2891,1,0,0,0,2893,2894,1,0,0,0,2894,
        383,1,0,0,0,2895,2893,1,0,0,0,2896,2897,5,132,0,0,2897,2898,3,160,
        80,0,2898,2899,5,43,0,0,2899,2904,3,174,87,0,2900,2901,5,15,0,0,
        2901,2903,3,150,75,0,2902,2900,1,0,0,0,2903,2906,1,0,0,0,2904,2902,
        1,0,0,0,2904,2905,1,0,0,0,2905,385,1,0,0,0,2906,2904,1,0,0,0,2907,
        2908,5,133,0,0,2908,2909,3,160,80,0,2909,2910,5,43,0,0,2910,2915,
        3,174,87,0,2911,2912,5,15,0,0,2912,2914,3,150,75,0,2913,2911,1,0,
        0,0,2914,2917,1,0,0,0,2915,2913,1,0,0,0,2915,2916,1,0,0,0,2916,387,
        1,0,0,0,2917,2915,1,0,0,0,2918,2919,5,134,0,0,2919,2920,3,160,80,
        0,2920,2921,5,43,0,0,2921,2926,3,174,87,0,2922,2923,5,15,0,0,2923,
        2925,3,150,75,0,2924,2922,1,0,0,0,2925,2928,1,0,0,0,2926,2924,1,
        0,0,0,2926,2927,1,0,0,0,2927,389,1,0,0,0,2928,2926,1,0,0,0,2929,
        2930,5,135,0,0,2930,2931,3,160,80,0,2931,2932,5,43,0,0,2932,2937,
        3,174,87,0,2933,2934,5,15,0,0,2934,2936,3,150,75,0,2935,2933,1,0,
        0,0,2936,2939,1,0,0,0,2937,2935,1,0,0,0,2937,2938,1,0,0,0,2938,391,
        1,0,0,0,2939,2937,1,0,0,0,2940,2941,5,136,0,0,2941,2942,3,160,80,
        0,2942,2943,5,43,0,0,2943,2948,3,174,87,0,2944,2945,5,15,0,0,2945,
        2947,3,150,75,0,2946,2944,1,0,0,0,2947,2950,1,0,0,0,2948,2946,1,
        0,0,0,2948,2949,1,0,0,0,2949,393,1,0,0,0,2950,2948,1,0,0,0,2951,
        2952,5,137,0,0,2952,2953,3,160,80,0,2953,2954,5,43,0,0,2954,2959,
        3,174,87,0,2955,2956,5,15,0,0,2956,2958,3,150,75,0,2957,2955,1,0,
        0,0,2958,2961,1,0,0,0,2959,2957,1,0,0,0,2959,2960,1,0,0,0,2960,395,
        1,0,0,0,2961,2959,1,0,0,0,2962,2963,5,138,0,0,2963,2964,3,160,80,
        0,2964,2965,5,43,0,0,2965,2970,3,174,87,0,2966,2967,5,15,0,0,2967,
        2969,3,150,75,0,2968,2966,1,0,0,0,2969,2972,1,0,0,0,2970,2968,1,
        0,0,0,2970,2971,1,0,0,0,2971,397,1,0,0,0,2972,2970,1,0,0,0,2973,
        2974,5,139,0,0,2974,2975,3,160,80,0,2975,2976,5,43,0,0,2976,2981,
        3,174,87,0,2977,2978,5,15,0,0,2978,2980,3,150,75,0,2979,2977,1,0,
        0,0,2980,2983,1,0,0,0,2981,2979,1,0,0,0,2981,2982,1,0,0,0,2982,399,
        1,0,0,0,2983,2981,1,0,0,0,2984,2985,5,126,0,0,2985,2986,3,160,80,
        0,2986,2987,5,43,0,0,2987,2992,3,174,87,0,2988,2989,5,15,0,0,2989,
        2991,3,150,75,0,2990,2988,1,0,0,0,2991,2994,1,0,0,0,2992,2990,1,
        0,0,0,2992,2993,1,0,0,0,2993,401,1,0,0,0,2994,2992,1,0,0,0,2995,
        2996,5,122,0,0,2996,2997,3,160,80,0,2997,2998,5,43,0,0,2998,3003,
        3,174,87,0,2999,3000,5,15,0,0,3000,3002,3,150,75,0,3001,2999,1,0,
        0,0,3002,3005,1,0,0,0,3003,3001,1,0,0,0,3003,3004,1,0,0,0,3004,403,
        1,0,0,0,3005,3003,1,0,0,0,3006,3007,5,125,0,0,3007,3008,3,160,80,
        0,3008,3009,5,43,0,0,3009,3014,3,174,87,0,3010,3011,5,15,0,0,3011,
        3013,3,150,75,0,3012,3010,1,0,0,0,3013,3016,1,0,0,0,3014,3012,1,
        0,0,0,3014,3015,1,0,0,0,3015,405,1,0,0,0,3016,3014,1,0,0,0,3017,
        3018,5,127,0,0,3018,3019,3,470,235,0,3019,3020,3,160,80,0,3020,3021,
        5,15,0,0,3021,3026,3,162,81,0,3022,3023,5,15,0,0,3023,3025,3,150,
        75,0,3024,3022,1,0,0,0,3025,3028,1,0,0,0,3026,3024,1,0,0,0,3026,
        3027,1,0,0,0,3027,407,1,0,0,0,3028,3026,1,0,0,0,3029,3033,5,128,
        0,0,3030,3032,3,478,239,0,3031,3030,1,0,0,0,3032,3035,1,0,0,0,3033,
        3031,1,0,0,0,3033,3034,1,0,0,0,3034,3036,1,0,0,0,3035,3033,1,0,0,
        0,3036,3037,3,472,236,0,3037,3038,3,160,80,0,3038,3039,5,15,0,0,
        3039,3044,3,162,81,0,3040,3041,5,15,0,0,3041,3043,3,150,75,0,3042,
        3040,1,0,0,0,3043,3046,1,0,0,0,3044,3042,1,0,0,0,3044,3045,1,0,0,
        0,3045,409,1,0,0,0,3046,3044,1,0,0,0,3047,3051,5,175,0,0,3048,3050,
        3,478,239,0,3049,3048,1,0,0,0,3050,3053,1,0,0,0,3051,3049,1,0,0,
        0,3051,3052,1,0,0,0,3052,3054,1,0,0,0,3053,3051,1,0,0,0,3054,3055,
        3,174,87,0,3055,3060,3,426,213,0,3056,3057,5,15,0,0,3057,3059,3,
        426,213,0,3058,3056,1,0,0,0,3059,3062,1,0,0,0,3060,3058,1,0,0,0,
        3060,3061,1,0,0,0,3061,3067,1,0,0,0,3062,3060,1,0,0,0,3063,3064,
        5,15,0,0,3064,3066,3,150,75,0,3065,3063,1,0,0,0,3066,3069,1,0,0,
        0,3067,3065,1,0,0,0,3067,3068,1,0,0,0,3068,411,1,0,0,0,3069,3067,
        1,0,0,0,3070,3074,5,129,0,0,3071,3073,3,478,239,0,3072,3071,1,0,
        0,0,3073,3076,1,0,0,0,3074,3072,1,0,0,0,3074,3075,1,0,0,0,3075,3077,
        1,0,0,0,3076,3074,1,0,0,0,3077,3078,3,160,80,0,3078,3079,5,15,0,
        0,3079,3080,3,160,80,0,3080,3081,5,15,0,0,3081,3086,3,160,80,0,3082,
        3083,5,15,0,0,3083,3085,3,150,75,0,3084,3082,1,0,0,0,3085,3088,1,
        0,0,0,3086,3084,1,0,0,0,3086,3087,1,0,0,0,3087,413,1,0,0,0,3088,
        3086,1,0,0,0,3089,3090,5,176,0,0,3090,3091,3,160,80,0,3091,415,1,
        0,0,0,3092,3094,7,8,0,0,3093,3092,1,0,0,0,3093,3094,1,0,0,0,3094,
        3095,1,0,0,0,3095,3099,5,180,0,0,3096,3098,3,478,239,0,3097,3096,
        1,0,0,0,3098,3101,1,0,0,0,3099,3097,1,0,0,0,3099,3100,1,0,0,0,3100,
        3103,1,0,0,0,3101,3099,1,0,0,0,3102,3104,3,42,21,0,3103,3102,1,0,
        0,0,3103,3104,1,0,0,0,3104,3108,1,0,0,0,3105,3107,3,56,28,0,3106,
        3105,1,0,0,0,3107,3110,1,0,0,0,3108,3106,1,0,0,0,3108,3109,1,0,0,
        0,3109,3112,1,0,0,0,3110,3108,1,0,0,0,3111,3113,3,244,122,0,3112,
        3111,1,0,0,0,3112,3113,1,0,0,0,3113,3114,1,0,0,0,3114,3115,3,174,
        87,0,3115,3116,3,162,81,0,3116,3117,5,26,0,0,3117,3118,3,432,216,
        0,3118,3122,5,27,0,0,3119,3121,3,172,86,0,3120,3119,1,0,0,0,3121,
        3124,1,0,0,0,3122,3120,1,0,0,0,3122,3123,1,0,0,0,3123,3136,1,0,0,
        0,3124,3122,1,0,0,0,3125,3126,5,37,0,0,3126,3131,3,428,214,0,3127,
        3128,5,15,0,0,3128,3130,3,428,214,0,3129,3127,1,0,0,0,3130,3133,
        1,0,0,0,3131,3129,1,0,0,0,3131,3132,1,0,0,0,3132,3134,1,0,0,0,3133,
        3131,1,0,0,0,3134,3135,5,38,0,0,3135,3137,1,0,0,0,3136,3125,1,0,
        0,0,3136,3137,1,0,0,0,3137,3142,1,0,0,0,3138,3139,5,15,0,0,3139,
        3141,3,150,75,0,3140,3138,1,0,0,0,3141,3144,1,0,0,0,3142,3140,1,
        0,0,0,3142,3143,1,0,0,0,3143,417,1,0,0,0,3144,3142,1,0,0,0,3145,
        3146,5,181,0,0,3146,3147,3,160,80,0,3147,3148,5,15,0,0,3148,3153,
        3,174,87,0,3149,3150,5,15,0,0,3150,3152,3,150,75,0,3151,3149,1,0,
        0,0,3152,3155,1,0,0,0,3153,3151,1,0,0,0,3153,3154,1,0,0,0,3154,419,
        1,0,0,0,3155,3153,1,0,0,0,3156,3157,5,182,0,0,3157,3159,3,174,87,
        0,3158,3160,5,183,0,0,3159,3158,1,0,0,0,3159,3160,1,0,0,0,3160,3164,
        1,0,0,0,3161,3163,3,430,215,0,3162,3161,1,0,0,0,3163,3166,1,0,0,
        0,3164,3162,1,0,0,0,3164,3165,1,0,0,0,3165,3171,1,0,0,0,3166,3164,
        1,0,0,0,3167,3168,5,15,0,0,3168,3170,3,150,75,0,3169,3167,1,0,0,
        0,3170,3173,1,0,0,0,3171,3169,1,0,0,0,3171,3172,1,0,0,0,3172,421,
        1,0,0,0,3173,3171,1,0,0,0,3174,3175,5,184,0,0,3175,3176,5,50,0,0,
        3176,3177,5,493,0,0,3177,3186,5,37,0,0,3178,3183,3,436,218,0,3179,
        3180,5,15,0,0,3180,3182,3,436,218,0,3181,3179,1,0,0,0,3182,3185,
        1,0,0,0,3183,3181,1,0,0,0,3183,3184,1,0,0,0,3184,3187,1,0,0,0,3185,
        3183,1,0,0,0,3186,3178,1,0,0,0,3186,3187,1,0,0,0,3187,3188,1,0,0,
        0,3188,3193,5,38,0,0,3189,3190,5,15,0,0,3190,3192,3,150,75,0,3191,
        3189,1,0,0,0,3192,3195,1,0,0,0,3193,3191,1,0,0,0,3193,3194,1,0,0,
        0,3194,423,1,0,0,0,3195,3193,1,0,0,0,3196,3197,5,185,0,0,3197,3198,
        5,50,0,0,3198,3199,3,438,219,0,3199,3208,5,37,0,0,3200,3205,3,436,
        218,0,3201,3202,5,15,0,0,3202,3204,3,436,218,0,3203,3201,1,0,0,0,
        3204,3207,1,0,0,0,3205,3203,1,0,0,0,3205,3206,1,0,0,0,3206,3209,
        1,0,0,0,3207,3205,1,0,0,0,3208,3200,1,0,0,0,3208,3209,1,0,0,0,3209,
        3210,1,0,0,0,3210,3215,5,38,0,0,3211,3212,5,15,0,0,3212,3214,3,150,
        75,0,3213,3211,1,0,0,0,3214,3217,1,0,0,0,3215,3213,1,0,0,0,3215,
        3216,1,0,0,0,3216,425,1,0,0,0,3217,3215,1,0,0,0,3218,3219,5,37,0,
        0,3219,3220,3,162,81,0,3220,3221,5,15,0,0,3221,3222,5,493,0,0,3222,
        3223,5,38,0,0,3223,427,1,0,0,0,3224,3225,5,491,0,0,3225,3234,5,26,
        0,0,3226,3231,3,160,80,0,3227,3228,5,15,0,0,3228,3230,3,160,80,0,
        3229,3227,1,0,0,0,3230,3233,1,0,0,0,3231,3229,1,0,0,0,3231,3232,
        1,0,0,0,3232,3235,1,0,0,0,3233,3231,1,0,0,0,3234,3226,1,0,0,0,3234,
        3235,1,0,0,0,3235,3236,1,0,0,0,3236,3237,5,27,0,0,3237,429,1,0,0,
        0,3238,3239,7,9,0,0,3239,3240,3,160,80,0,3240,431,1,0,0,0,3241,3243,
        5,79,0,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,3257,1,0,0,0,3244,
        3249,3,434,217,0,3245,3246,5,15,0,0,3246,3248,3,434,217,0,3247,3245,
        1,0,0,0,3248,3251,1,0,0,0,3249,3247,1,0,0,0,3249,3250,1,0,0,0,3250,
        3254,1,0,0,0,3251,3249,1,0,0,0,3252,3253,5,15,0,0,3253,3255,5,79,
        0,0,3254,3252,1,0,0,0,3254,3255,1,0,0,0,3255,3257,1,0,0,0,3256,3242,
        1,0,0,0,3256,3244,1,0,0,0,3257,433,1,0,0,0,3258,3262,3,220,110,0,
        3259,3261,3,180,90,0,3260,3259,1,0,0,0,3261,3264,1,0,0,0,3262,3260,
        1,0,0,0,3262,3263,1,0,0,0,3263,3265,1,0,0,0,3264,3262,1,0,0,0,3265,
        3266,3,162,81,0,3266,3271,1,0,0,0,3267,3268,3,248,124,0,3268,3269,
        3,156,78,0,3269,3271,1,0,0,0,3270,3258,1,0,0,0,3270,3267,1,0,0,0,
        3271,435,1,0,0,0,3272,3273,3,220,110,0,3273,3274,3,162,81,0,3274,
        3279,1,0,0,0,3275,3276,3,248,124,0,3276,3277,3,156,78,0,3277,3279,
        1,0,0,0,3278,3272,1,0,0,0,3278,3275,1,0,0,0,3279,437,1,0,0,0,3280,
        3283,3,126,63,0,3281,3283,5,493,0,0,3282,3280,1,0,0,0,3282,3281,
        1,0,0,0,3283,439,1,0,0,0,3284,3285,7,10,0,0,3285,441,1,0,0,0,3286,
        3287,7,11,0,0,3287,443,1,0,0,0,3288,3291,3,442,221,0,3289,3291,3,
        440,220,0,3290,3288,1,0,0,0,3290,3289,1,0,0,0,3291,445,1,0,0,0,3292,
        3293,7,12,0,0,3293,447,1,0,0,0,3294,3295,7,13,0,0,3295,449,1,0,0,
        0,3296,3297,7,14,0,0,3297,451,1,0,0,0,3298,3299,7,15,0,0,3299,453,
        1,0,0,0,3300,3301,7,16,0,0,3301,455,1,0,0,0,3302,3303,5,210,0,0,
        3303,457,1,0,0,0,3304,3305,7,17,0,0,3305,459,1,0,0,0,3306,3307,7,
        18,0,0,3307,461,1,0,0,0,3308,3309,5,263,0,0,3309,463,1,0,0,0,3310,
        3311,5,264,0,0,3311,465,1,0,0,0,3312,3313,7,19,0,0,3313,467,1,0,
        0,0,3314,3315,7,20,0,0,3315,469,1,0,0,0,3316,3317,7,21,0,0,3317,
        471,1,0,0,0,3318,3319,7,22,0,0,3319,473,1,0,0,0,3320,3321,7,23,0,
        0,3321,475,1,0,0,0,3322,3323,7,24,0,0,3323,477,1,0,0,0,3324,3325,
        7,25,0,0,3325,479,1,0,0,0,3326,3327,7,26,0,0,3327,481,1,0,0,0,3328,
        3329,7,27,0,0,3329,483,1,0,0,0,3330,3359,3,486,243,0,3331,3359,3,
        488,244,0,3332,3359,3,490,245,0,3333,3359,3,492,246,0,3334,3359,
        3,496,248,0,3335,3359,3,500,250,0,3336,3359,3,104,52,0,3337,3359,
        3,504,252,0,3338,3359,3,508,254,0,3339,3359,3,512,256,0,3340,3359,
        3,516,258,0,3341,3359,3,520,260,0,3342,3359,3,524,262,0,3343,3359,
        3,528,264,0,3344,3359,3,532,266,0,3345,3359,3,536,268,0,3346,3359,
        3,540,270,0,3347,3359,3,544,272,0,3348,3359,3,548,274,0,3349,3359,
        3,552,276,0,3350,3359,3,556,278,0,3351,3359,3,560,280,0,3352,3359,
        3,564,282,0,3353,3359,3,568,284,0,3354,3359,3,572,286,0,3355,3359,
        3,574,287,0,3356,3359,3,576,288,0,3357,3359,3,578,289,0,3358,3330,
        1,0,0,0,3358,3331,1,0,0,0,3358,3332,1,0,0,0,3358,3333,1,0,0,0,3358,
        3334,1,0,0,0,3358,3335,1,0,0,0,3358,3336,1,0,0,0,3358,3337,1,0,0,
        0,3358,3338,1,0,0,0,3358,3339,1,0,0,0,3358,3340,1,0,0,0,3358,3341,
        1,0,0,0,3358,3342,1,0,0,0,3358,3343,1,0,0,0,3358,3344,1,0,0,0,3358,
        3345,1,0,0,0,3358,3346,1,0,0,0,3358,3347,1,0,0,0,3358,3348,1,0,0,
        0,3358,3349,1,0,0,0,3358,3350,1,0,0,0,3358,3351,1,0,0,0,3358,3352,
        1,0,0,0,3358,3353,1,0,0,0,3358,3354,1,0,0,0,3358,3355,1,0,0,0,3358,
        3356,1,0,0,0,3358,3357,1,0,0,0,3359,485,1,0,0,0,3360,3361,5,361,
        0,0,3361,3370,5,26,0,0,3362,3367,3,586,293,0,3363,3364,5,15,0,0,
        3364,3366,3,586,293,0,3365,3363,1,0,0,0,3366,3369,1,0,0,0,3367,3365,
        1,0,0,0,3367,3368,1,0,0,0,3368,3371,1,0,0,0,3369,3367,1,0,0,0,3370,
        3362,1,0,0,0,3370,3371,1,0,0,0,3371,3372,1,0,0,0,3372,3373,5,27,
        0,0,3373,487,1,0,0,0,3374,3375,5,362,0,0,3375,3384,5,26,0,0,3376,
        3381,3,584,292,0,3377,3378,5,15,0,0,3378,3380,3,584,292,0,3379,3377,
        1,0,0,0,3380,3383,1,0,0,0,3381,3379,1,0,0,0,3381,3382,1,0,0,0,3382,
        3385,1,0,0,0,3383,3381,1,0,0,0,3384,3376,1,0,0,0,3384,3385,1,0,0,
        0,3385,3386,1,0,0,0,3386,3387,5,27,0,0,3387,489,1,0,0,0,3388,3389,
        5,363,0,0,3389,3398,5,26,0,0,3390,3395,3,582,291,0,3391,3392,5,15,
        0,0,3392,3394,3,582,291,0,3393,3391,1,0,0,0,3394,3397,1,0,0,0,3395,
        3393,1,0,0,0,3395,3396,1,0,0,0,3396,3399,1,0,0,0,3397,3395,1,0,0,
        0,3398,3390,1,0,0,0,3398,3399,1,0,0,0,3399,3400,1,0,0,0,3400,3401,
        5,27,0,0,3401,491,1,0,0,0,3402,3403,5,364,0,0,3403,3412,5,26,0,0,
        3404,3409,3,494,247,0,3405,3406,5,15,0,0,3406,3408,3,494,247,0,3407,
        3405,1,0,0,0,3408,3411,1,0,0,0,3409,3407,1,0,0,0,3409,3410,1,0,0,
        0,3410,3413,1,0,0,0,3411,3409,1,0,0,0,3412,3404,1,0,0,0,3412,3413,
        1,0,0,0,3413,3414,1,0,0,0,3414,3415,5,27,0,0,3415,493,1,0,0,0,3416,
        3438,3,590,295,0,3417,3438,3,598,299,0,3418,3438,3,736,368,0,3419,
        3438,3,674,337,0,3420,3438,3,708,354,0,3421,3438,3,628,314,0,3422,
        3438,3,744,372,0,3423,3438,3,616,308,0,3424,3438,3,720,360,0,3425,
        3438,3,610,305,0,3426,3438,3,658,329,0,3427,3438,3,732,366,0,3428,
        3438,3,790,395,0,3429,3438,3,766,383,0,3430,3438,3,684,342,0,3431,
        3438,3,648,324,0,3432,3438,3,650,325,0,3433,3438,3,624,312,0,3434,
        3438,3,618,309,0,3435,3438,3,726,363,0,3436,3438,3,620,310,0,3437,
        3416,1,0,0,0,3437,3417,1,0,0,0,3437,3418,1,0,0,0,3437,3419,1,0,0,
        0,3437,3420,1,0,0,0,3437,3421,1,0,0,0,3437,3422,1,0,0,0,3437,3423,
        1,0,0,0,3437,3424,1,0,0,0,3437,3425,1,0,0,0,3437,3426,1,0,0,0,3437,
        3427,1,0,0,0,3437,3428,1,0,0,0,3437,3429,1,0,0,0,3437,3430,1,0,0,
        0,3437,3431,1,0,0,0,3437,3432,1,0,0,0,3437,3433,1,0,0,0,3437,3434,
        1,0,0,0,3437,3435,1,0,0,0,3437,3436,1,0,0,0,3438,495,1,0,0,0,3439,
        3440,5,365,0,0,3440,3449,5,26,0,0,3441,3446,3,498,249,0,3442,3443,
        5,15,0,0,3443,3445,3,498,249,0,3444,3442,1,0,0,0,3445,3448,1,0,0,
        0,3446,3444,1,0,0,0,3446,3447,1,0,0,0,3447,3450,1,0,0,0,3448,3446,
        1,0,0,0,3449,3441,1,0,0,0,3449,3450,1,0,0,0,3450,3451,1,0,0,0,3451,
        3452,5,27,0,0,3452,497,1,0,0,0,3453,3467,3,590,295,0,3454,3467,3,
        598,299,0,3455,3467,3,736,368,0,3456,3467,3,674,337,0,3457,3467,
        3,708,354,0,3458,3467,3,628,314,0,3459,3467,3,744,372,0,3460,3467,
        3,616,308,0,3461,3467,3,720,360,0,3462,3467,3,610,305,0,3463,3467,
        3,672,336,0,3464,3467,3,654,327,0,3465,3467,3,620,310,0,3466,3453,
        1,0,0,0,3466,3454,1,0,0,0,3466,3455,1,0,0,0,3466,3456,1,0,0,0,3466,
        3457,1,0,0,0,3466,3458,1,0,0,0,3466,3459,1,0,0,0,3466,3460,1,0,0,
        0,3466,3461,1,0,0,0,3466,3462,1,0,0,0,3466,3463,1,0,0,0,3466,3464,
        1,0,0,0,3466,3465,1,0,0,0,3467,499,1,0,0,0,3468,3469,5,366,0,0,3469,
        3478,5,26,0,0,3470,3475,3,502,251,0,3471,3472,5,15,0,0,3472,3474,
        3,502,251,0,3473,3471,1,0,0,0,3474,3477,1,0,0,0,3475,3473,1,0,0,
        0,3475,3476,1,0,0,0,3476,3479,1,0,0,0,3477,3475,1,0,0,0,3478,3470,
        1,0,0,0,3478,3479,1,0,0,0,3479,3480,1,0,0,0,3480,3481,5,27,0,0,3481,
        501,1,0,0,0,3482,3486,3,598,299,0,3483,3486,3,780,390,0,3484,3486,
        3,702,351,0,3485,3482,1,0,0,0,3485,3483,1,0,0,0,3485,3484,1,0,0,
        0,3486,503,1,0,0,0,3487,3488,5,367,0,0,3488,3497,5,26,0,0,3489,3494,
        3,506,253,0,3490,3491,5,15,0,0,3491,3493,3,506,253,0,3492,3490,1,
        0,0,0,3493,3496,1,0,0,0,3494,3492,1,0,0,0,3494,3495,1,0,0,0,3495,
        3498,1,0,0,0,3496,3494,1,0,0,0,3497,3489,1,0,0,0,3497,3498,1,0,0,
        0,3498,3499,1,0,0,0,3499,3500,5,27,0,0,3500,505,1,0,0,0,3501,3507,
        3,676,338,0,3502,3507,3,646,323,0,3503,3507,3,632,316,0,3504,3507,
        3,630,315,0,3505,3507,3,746,373,0,3506,3501,1,0,0,0,3506,3502,1,
        0,0,0,3506,3503,1,0,0,0,3506,3504,1,0,0,0,3506,3505,1,0,0,0,3507,
        507,1,0,0,0,3508,3509,5,368,0,0,3509,3518,5,26,0,0,3510,3515,3,510,
        255,0,3511,3512,5,15,0,0,3512,3514,3,510,255,0,3513,3511,1,0,0,0,
        3514,3517,1,0,0,0,3515,3513,1,0,0,0,3515,3516,1,0,0,0,3516,3519,
        1,0,0,0,3517,3515,1,0,0,0,3518,3510,1,0,0,0,3518,3519,1,0,0,0,3519,
        3520,1,0,0,0,3520,3521,5,27,0,0,3521,509,1,0,0,0,3522,3535,3,598,
        299,0,3523,3535,3,736,368,0,3524,3535,3,710,355,0,3525,3535,3,674,
        337,0,3526,3535,3,708,354,0,3527,3535,3,600,300,0,3528,3535,3,698,
        349,0,3529,3535,3,694,347,0,3530,3535,3,766,383,0,3531,3535,3,644,
        322,0,3532,3535,3,616,308,0,3533,3535,3,620,310,0,3534,3522,1,0,
        0,0,3534,3523,1,0,0,0,3534,3524,1,0,0,0,3534,3525,1,0,0,0,3534,3526,
        1,0,0,0,3534,3527,1,0,0,0,3534,3528,1,0,0,0,3534,3529,1,0,0,0,3534,
        3530,1,0,0,0,3534,3531,1,0,0,0,3534,3532,1,0,0,0,3534,3533,1,0,0,
        0,3535,511,1,0,0,0,3536,3537,5,369,0,0,3537,3546,5,26,0,0,3538,3543,
        3,514,257,0,3539,3540,5,15,0,0,3540,3542,3,514,257,0,3541,3539,1,
        0,0,0,3542,3545,1,0,0,0,3543,3541,1,0,0,0,3543,3544,1,0,0,0,3544,
        3547,1,0,0,0,3545,3543,1,0,0,0,3546,3538,1,0,0,0,3546,3547,1,0,0,
        0,3547,3548,1,0,0,0,3548,3549,5,27,0,0,3549,513,1,0,0,0,3550,3553,
        3,784,392,0,3551,3553,3,670,335,0,3552,3550,1,0,0,0,3552,3551,1,
        0,0,0,3553,515,1,0,0,0,3554,3555,5,370,0,0,3555,3564,5,26,0,0,3556,
        3561,3,518,259,0,3557,3558,5,15,0,0,3558,3560,3,518,259,0,3559,3557,
        1,0,0,0,3560,3563,1,0,0,0,3561,3559,1,0,0,0,3561,3562,1,0,0,0,3562,
        3565,1,0,0,0,3563,3561,1,0,0,0,3564,3556,1,0,0,0,3564,3565,1,0,0,
        0,3565,3566,1,0,0,0,3566,3567,5,27,0,0,3567,517,1,0,0,0,3568,3576,
        3,590,295,0,3569,3576,3,736,368,0,3570,3576,3,664,332,0,3571,3576,
        3,674,337,0,3572,3576,3,708,354,0,3573,3576,3,598,299,0,3574,3576,
        3,658,329,0,3575,3568,1,0,0,0,3575,3569,1,0,0,0,3575,3570,1,0,0,
        0,3575,3571,1,0,0,0,3575,3572,1,0,0,0,3575,3573,1,0,0,0,3575,3574,
        1,0,0,0,3576,519,1,0,0,0,3577,3578,5,371,0,0,3578,3587,5,26,0,0,
        3579,3584,3,522,261,0,3580,3581,5,15,0,0,3581,3583,3,522,261,0,3582,
        3580,1,0,0,0,3583,3586,1,0,0,0,3584,3582,1,0,0,0,3584,3585,1,0,0,
        0,3585,3588,1,0,0,0,3586,3584,1,0,0,0,3587,3579,1,0,0,0,3587,3588,
        1,0,0,0,3588,3589,1,0,0,0,3589,3590,5,27,0,0,3590,521,1,0,0,0,3591,
        3596,3,736,368,0,3592,3596,3,598,299,0,3593,3596,3,674,337,0,3594,
        3596,3,708,354,0,3595,3591,1,0,0,0,3595,3592,1,0,0,0,3595,3593,1,
        0,0,0,3595,3594,1,0,0,0,3596,523,1,0,0,0,3597,3598,5,372,0,0,3598,
        3607,5,26,0,0,3599,3604,3,526,263,0,3600,3601,5,15,0,0,3601,3603,
        3,526,263,0,3602,3600,1,0,0,0,3603,3606,1,0,0,0,3604,3602,1,0,0,
        0,3604,3605,1,0,0,0,3605,3608,1,0,0,0,3606,3604,1,0,0,0,3607,3599,
        1,0,0,0,3607,3608,1,0,0,0,3608,3609,1,0,0,0,3609,3610,5,27,0,0,3610,
        525,1,0,0,0,3611,3616,3,736,368,0,3612,3616,3,674,337,0,3613,3616,
        3,708,354,0,3614,3616,3,634,317,0,3615,3611,1,0,0,0,3615,3612,1,
        0,0,0,3615,3613,1,0,0,0,3615,3614,1,0,0,0,3616,527,1,0,0,0,3617,
        3618,5,373,0,0,3618,3627,5,26,0,0,3619,3624,3,530,265,0,3620,3621,
        5,15,0,0,3621,3623,3,530,265,0,3622,3620,1,0,0,0,3623,3626,1,0,0,
        0,3624,3622,1,0,0,0,3624,3625,1,0,0,0,3625,3628,1,0,0,0,3626,3624,
        1,0,0,0,3627,3619,1,0,0,0,3627,3628,1,0,0,0,3628,3629,1,0,0,0,3629,
        3630,5,27,0,0,3630,529,1,0,0,0,3631,3635,3,736,368,0,3632,3635,3,
        674,337,0,3633,3635,3,652,326,0,3634,3631,1,0,0,0,3634,3632,1,0,
        0,0,3634,3633,1,0,0,0,3635,531,1,0,0,0,3636,3637,5,374,0,0,3637,
        3646,5,26,0,0,3638,3643,3,534,267,0,3639,3640,5,15,0,0,3640,3642,
        3,534,267,0,3641,3639,1,0,0,0,3642,3645,1,0,0,0,3643,3641,1,0,0,
        0,3643,3644,1,0,0,0,3644,3647,1,0,0,0,3645,3643,1,0,0,0,3646,3638,
        1,0,0,0,3646,3647,1,0,0,0,3647,3648,1,0,0,0,3648,3649,5,27,0,0,3649,
        533,1,0,0,0,3650,3660,3,736,368,0,3651,3660,3,598,299,0,3652,3660,
        3,622,311,0,3653,3660,3,674,337,0,3654,3660,3,708,354,0,3655,3660,
        3,600,300,0,3656,3660,3,610,305,0,3657,3660,3,616,308,0,3658,3660,
        3,620,310,0,3659,3650,1,0,0,0,3659,3651,1,0,0,0,3659,3652,1,0,0,
        0,3659,3653,1,0,0,0,3659,3654,1,0,0,0,3659,3655,1,0,0,0,3659,3656,
        1,0,0,0,3659,3657,1,0,0,0,3659,3658,1,0,0,0,3660,535,1,0,0,0,3661,
        3662,5,375,0,0,3662,3671,5,26,0,0,3663,3668,3,538,269,0,3664,3665,
        5,15,0,0,3665,3667,3,538,269,0,3666,3664,1,0,0,0,3667,3670,1,0,0,
        0,3668,3666,1,0,0,0,3668,3669,1,0,0,0,3669,3672,1,0,0,0,3670,3668,
        1,0,0,0,3671,3663,1,0,0,0,3671,3672,1,0,0,0,3672,3673,1,0,0,0,3673,
        3674,5,27,0,0,3674,537,1,0,0,0,3675,3681,3,708,354,0,3676,3681,3,
        634,317,0,3677,3681,3,736,368,0,3678,3681,3,690,345,0,3679,3681,
        3,696,348,0,3680,3675,1,0,0,0,3680,3676,1,0,0,0,3680,3677,1,0,0,
        0,3680,3678,1,0,0,0,3680,3679,1,0,0,0,3681,539,1,0,0,0,3682,3683,
        5,376,0,0,3683,3692,5,26,0,0,3684,3689,3,542,271,0,3685,3686,5,15,
        0,0,3686,3688,3,542,271,0,3687,3685,1,0,0,0,3688,3691,1,0,0,0,3689,
        3687,1,0,0,0,3689,3690,1,0,0,0,3690,3693,1,0,0,0,3691,3689,1,0,0,
        0,3692,3684,1,0,0,0,3692,3693,1,0,0,0,3693,3694,1,0,0,0,3694,3695,
        5,27,0,0,3695,541,1,0,0,0,3696,3701,3,772,386,0,3697,3701,3,708,
        354,0,3698,3701,3,598,299,0,3699,3701,3,782,391,0,3700,3696,1,0,
        0,0,3700,3697,1,0,0,0,3700,3698,1,0,0,0,3700,3699,1,0,0,0,3701,543,
        1,0,0,0,3702,3703,5,377,0,0,3703,3712,5,26,0,0,3704,3709,3,546,273,
        0,3705,3706,5,15,0,0,3706,3708,3,546,273,0,3707,3705,1,0,0,0,3708,
        3711,1,0,0,0,3709,3707,1,0,0,0,3709,3710,1,0,0,0,3710,3713,1,0,0,
        0,3711,3709,1,0,0,0,3712,3704,1,0,0,0,3712,3713,1,0,0,0,3713,3714,
        1,0,0,0,3714,3715,5,27,0,0,3715,545,1,0,0,0,3716,3721,3,772,386,
        0,3717,3721,3,708,354,0,3718,3721,3,674,337,0,3719,3721,3,718,359,
        0,3720,3716,1,0,0,0,3720,3717,1,0,0,0,3720,3718,1,0,0,0,3720,3719,
        1,0,0,0,3721,547,1,0,0,0,3722,3723,5,378,0,0,3723,3732,5,26,0,0,
        3724,3729,3,550,275,0,3725,3726,5,15,0,0,3726,3728,3,550,275,0,3727,
        3725,1,0,0,0,3728,3731,1,0,0,0,3729,3727,1,0,0,0,3729,3730,1,0,0,
        0,3730,3733,1,0,0,0,3731,3729,1,0,0,0,3732,3724,1,0,0,0,3732,3733,
        1,0,0,0,3733,3734,1,0,0,0,3734,3735,5,27,0,0,3735,549,1,0,0,0,3736,
        3745,3,736,368,0,3737,3745,3,598,299,0,3738,3745,3,636,318,0,3739,
        3745,3,688,344,0,3740,3745,3,704,352,0,3741,3745,3,674,337,0,3742,
        3745,3,708,354,0,3743,3745,3,692,346,0,3744,3736,1,0,0,0,3744,3737,
        1,0,0,0,3744,3738,1,0,0,0,3744,3739,1,0,0,0,3744,3740,1,0,0,0,3744,
        3741,1,0,0,0,3744,3742,1,0,0,0,3744,3743,1,0,0,0,3745,551,1,0,0,
        0,3746,3747,5,379,0,0,3747,3756,5,26,0,0,3748,3753,3,554,277,0,3749,
        3750,5,15,0,0,3750,3752,3,554,277,0,3751,3749,1,0,0,0,3752,3755,
        1,0,0,0,3753,3751,1,0,0,0,3753,3754,1,0,0,0,3754,3757,1,0,0,0,3755,
        3753,1,0,0,0,3756,3748,1,0,0,0,3756,3757,1,0,0,0,3757,3758,1,0,0,
        0,3758,3759,5,27,0,0,3759,553,1,0,0,0,3760,3764,3,736,368,0,3761,
        3764,3,598,299,0,3762,3764,3,668,334,0,3763,3760,1,0,0,0,3763,3761,
        1,0,0,0,3763,3762,1,0,0,0,3764,555,1,0,0,0,3765,3766,5,380,0,0,3766,
        3775,5,26,0,0,3767,3772,3,558,279,0,3768,3769,5,15,0,0,3769,3771,
        3,558,279,0,3770,3768,1,0,0,0,3771,3774,1,0,0,0,3772,3770,1,0,0,
        0,3772,3773,1,0,0,0,3773,3776,1,0,0,0,3774,3772,1,0,0,0,3775,3767,
        1,0,0,0,3775,3776,1,0,0,0,3776,3777,1,0,0,0,3777,3778,5,27,0,0,3778,
        557,1,0,0,0,3779,3787,3,598,299,0,3780,3787,3,674,337,0,3781,3787,
        3,708,354,0,3782,3787,3,742,371,0,3783,3787,3,680,340,0,3784,3787,
        3,626,313,0,3785,3787,3,600,300,0,3786,3779,1,0,0,0,3786,3780,1,
        0,0,0,3786,3781,1,0,0,0,3786,3782,1,0,0,0,3786,3783,1,0,0,0,3786,
        3784,1,0,0,0,3786,3785,1,0,0,0,3787,559,1,0,0,0,3788,3789,5,381,
        0,0,3789,3798,5,26,0,0,3790,3795,3,562,281,0,3791,3792,5,15,0,0,
        3792,3794,3,562,281,0,3793,3791,1,0,0,0,3794,3797,1,0,0,0,3795,3793,
        1,0,0,0,3795,3796,1,0,0,0,3796,3799,1,0,0,0,3797,3795,1,0,0,0,3798,
        3790,1,0,0,0,3798,3799,1,0,0,0,3799,3800,1,0,0,0,3800,3801,5,27,
        0,0,3801,561,1,0,0,0,3802,3811,3,590,295,0,3803,3811,3,598,299,0,
        3804,3811,3,756,378,0,3805,3811,3,758,379,0,3806,3811,3,760,380,
        0,3807,3811,3,744,372,0,3808,3811,3,616,308,0,3809,3811,3,662,331,
        0,3810,3802,1,0,0,0,3810,3803,1,0,0,0,3810,3804,1,0,0,0,3810,3805,
        1,0,0,0,3810,3806,1,0,0,0,3810,3807,1,0,0,0,3810,3808,1,0,0,0,3810,
        3809,1,0,0,0,3811,563,1,0,0,0,3812,3813,5,382,0,0,3813,3822,5,26,
        0,0,3814,3819,3,566,283,0,3815,3816,5,15,0,0,3816,3818,3,566,283,
        0,3817,3815,1,0,0,0,3818,3821,1,0,0,0,3819,3817,1,0,0,0,3819,3820,
        1,0,0,0,3820,3823,1,0,0,0,3821,3819,1,0,0,0,3822,3814,1,0,0,0,3822,
        3823,1,0,0,0,3823,3824,1,0,0,0,3824,3825,5,27,0,0,3825,565,1,0,0,
        0,3826,3850,3,736,368,0,3827,3850,3,598,299,0,3828,3850,3,710,355,
        0,3829,3850,3,674,337,0,3830,3850,3,708,354,0,3831,3850,3,600,300,
        0,3832,3850,3,698,349,0,3833,3850,3,694,347,0,3834,3850,3,738,369,
        0,3835,3850,3,638,319,0,3836,3850,3,788,394,0,3837,3850,3,786,393,
        0,3838,3850,3,768,384,0,3839,3850,3,610,305,0,3840,3850,3,748,374,
        0,3841,3850,3,700,350,0,3842,3850,3,776,388,0,3843,3850,3,766,383,
        0,3844,3850,3,644,322,0,3845,3850,3,728,364,0,3846,3850,3,770,385,
        0,3847,3850,3,620,310,0,3848,3850,3,764,382,0,3849,3826,1,0,0,0,
        3849,3827,1,0,0,0,3849,3828,1,0,0,0,3849,3829,1,0,0,0,3849,3830,
        1,0,0,0,3849,3831,1,0,0,0,3849,3832,1,0,0,0,3849,3833,1,0,0,0,3849,
        3834,1,0,0,0,3849,3835,1,0,0,0,3849,3836,1,0,0,0,3849,3837,1,0,0,
        0,3849,3838,1,0,0,0,3849,3839,1,0,0,0,3849,3840,1,0,0,0,3849,3841,
        1,0,0,0,3849,3842,1,0,0,0,3849,3843,1,0,0,0,3849,3844,1,0,0,0,3849,
        3845,1,0,0,0,3849,3846,1,0,0,0,3849,3847,1,0,0,0,3849,3848,1,0,0,
        0,3850,567,1,0,0,0,3851,3852,5,363,0,0,3852,3861,5,26,0,0,3853,3858,
        3,570,285,0,3854,3855,5,15,0,0,3855,3857,3,570,285,0,3856,3854,1,
        0,0,0,3857,3860,1,0,0,0,3858,3856,1,0,0,0,3858,3859,1,0,0,0,3859,
        3862,1,0,0,0,3860,3858,1,0,0,0,3861,3853,1,0,0,0,3861,3862,1,0,0,
        0,3862,3863,1,0,0,0,3863,3864,5,27,0,0,3864,569,1,0,0,0,3865,3870,
        3,640,320,0,3866,3870,3,712,356,0,3867,3870,3,778,389,0,3868,3870,
        3,754,377,0,3869,3865,1,0,0,0,3869,3866,1,0,0,0,3869,3867,1,0,0,
        0,3869,3868,1,0,0,0,3870,571,1,0,0,0,3871,3872,5,383,0,0,3872,3881,
        5,26,0,0,3873,3878,3,608,304,0,3874,3875,5,15,0,0,3875,3877,3,608,
        304,0,3876,3874,1,0,0,0,3877,3880,1,0,0,0,3878,3876,1,0,0,0,3878,
        3879,1,0,0,0,3879,3882,1,0,0,0,3880,3878,1,0,0,0,3881,3873,1,0,0,
        0,3881,3882,1,0,0,0,3882,3883,1,0,0,0,3883,3884,5,27,0,0,3884,573,
        1,0,0,0,3885,3886,5,384,0,0,3886,3895,5,26,0,0,3887,3892,3,580,290,
        0,3888,3889,5,15,0,0,3889,3891,3,580,290,0,3890,3888,1,0,0,0,3891,
        3894,1,0,0,0,3892,3890,1,0,0,0,3892,3893,1,0,0,0,3893,3896,1,0,0,
        0,3894,3892,1,0,0,0,3895,3887,1,0,0,0,3895,3896,1,0,0,0,3896,3897,
        1,0,0,0,3897,3898,5,27,0,0,3898,575,1,0,0,0,3899,3900,5,385,0,0,
        3900,3905,5,26,0,0,3901,3902,3,596,298,0,3902,3903,5,15,0,0,3903,
        3904,3,596,298,0,3904,3906,1,0,0,0,3905,3901,1,0,0,0,3905,3906,1,
        0,0,0,3906,3907,1,0,0,0,3907,3908,5,27,0,0,3908,577,1,0,0,0,3909,
        3910,5,386,0,0,3910,3919,5,26,0,0,3911,3916,3,588,294,0,3912,3913,
        5,15,0,0,3913,3915,3,588,294,0,3914,3912,1,0,0,0,3915,3918,1,0,0,
        0,3916,3914,1,0,0,0,3916,3917,1,0,0,0,3917,3920,1,0,0,0,3918,3916,
        1,0,0,0,3919,3911,1,0,0,0,3919,3920,1,0,0,0,3920,3921,1,0,0,0,3921,
        3922,5,27,0,0,3922,579,1,0,0,0,3923,3927,3,598,299,0,3924,3927,3,
        600,300,0,3925,3927,3,602,301,0,3926,3923,1,0,0,0,3926,3924,1,0,
        0,0,3926,3925,1,0,0,0,3927,581,1,0,0,0,3928,3949,3,706,353,0,3929,
        3949,3,674,337,0,3930,3949,3,722,361,0,3931,3949,3,700,350,0,3932,
        3949,3,678,339,0,3933,3949,3,734,367,0,3934,3949,3,750,375,0,3935,
        3949,3,660,330,0,3936,3949,3,666,333,0,3937,3949,3,730,365,0,3938,
        3949,3,682,341,0,3939,3949,3,686,343,0,3940,3949,3,714,357,0,3941,
        3949,3,656,328,0,3942,3949,3,752,376,0,3943,3949,3,642,321,0,3944,
        3949,3,716,358,0,3945,3949,3,724,362,0,3946,3949,3,762,381,0,3947,
        3949,3,740,370,0,3948,3928,1,0,0,0,3948,3929,1,0,0,0,3948,3930,1,
        0,0,0,3948,3931,1,0,0,0,3948,3932,1,0,0,0,3948,3933,1,0,0,0,3948,
        3934,1,0,0,0,3948,3935,1,0,0,0,3948,3936,1,0,0,0,3948,3937,1,0,0,
        0,3948,3938,1,0,0,0,3948,3939,1,0,0,0,3948,3940,1,0,0,0,3948,3941,
        1,0,0,0,3948,3942,1,0,0,0,3948,3943,1,0,0,0,3948,3944,1,0,0,0,3948,
        3945,1,0,0,0,3948,3946,1,0,0,0,3948,3947,1,0,0,0,3949,583,1,0,0,
        0,3950,3956,3,736,368,0,3951,3956,3,644,322,0,3952,3956,3,598,299,
        0,3953,3956,3,674,337,0,3954,3956,3,708,354,0,3955,3950,1,0,0,0,
        3955,3951,1,0,0,0,3955,3952,1,0,0,0,3955,3953,1,0,0,0,3955,3954,
        1,0,0,0,3956,585,1,0,0,0,3957,3964,3,590,295,0,3958,3964,3,598,299,
        0,3959,3964,3,744,372,0,3960,3964,3,616,308,0,3961,3964,3,662,331,
        0,3962,3964,3,610,305,0,3963,3957,1,0,0,0,3963,3958,1,0,0,0,3963,
        3959,1,0,0,0,3963,3960,1,0,0,0,3963,3961,1,0,0,0,3963,3962,1,0,0,
        0,3964,587,1,0,0,0,3965,3969,3,590,295,0,3966,3969,3,592,296,0,3967,
        3969,3,594,297,0,3968,3965,1,0,0,0,3968,3966,1,0,0,0,3968,3967,1,
        0,0,0,3969,589,1,0,0,0,3970,3971,5,387,0,0,3971,3972,5,500,0,0,3972,
        591,1,0,0,0,3973,3974,5,388,0,0,3974,3975,5,491,0,0,3975,593,1,0,
        0,0,3976,3977,5,389,0,0,3977,3986,5,21,0,0,3978,3983,3,606,303,0,
        3979,3980,5,15,0,0,3980,3982,3,606,303,0,3981,3979,1,0,0,0,3982,
        3985,1,0,0,0,3983,3981,1,0,0,0,3983,3984,1,0,0,0,3984,3987,1,0,0,
        0,3985,3983,1,0,0,0,3986,3978,1,0,0,0,3986,3987,1,0,0,0,3987,3988,
        1,0,0,0,3988,3989,5,22,0,0,3989,595,1,0,0,0,3990,3996,3,590,295,
        0,3991,3996,3,598,299,0,3992,3996,3,600,300,0,3993,3996,3,602,301,
        0,3994,3996,3,604,302,0,3995,3990,1,0,0,0,3995,3991,1,0,0,0,3995,
        3992,1,0,0,0,3995,3993,1,0,0,0,3995,3994,1,0,0,0,3996,597,1,0,0,
        0,3997,3998,5,390,0,0,3998,3999,5,491,0,0,3999,599,1,0,0,0,4000,
        4001,5,391,0,0,4001,4002,3,606,303,0,4002,601,1,0,0,0,4003,4004,
        5,392,0,0,4004,4005,3,118,59,0,4005,603,1,0,0,0,4006,4007,5,393,
        0,0,4007,4008,3,606,303,0,4008,605,1,0,0,0,4009,4012,3,124,62,0,
        4010,4012,3,156,78,0,4011,4009,1,0,0,0,4011,4010,1,0,0,0,4012,607,
        1,0,0,0,4013,4017,3,610,305,0,4014,4017,3,614,307,0,4015,4017,3,
        774,387,0,4016,4013,1,0,0,0,4016,4014,1,0,0,0,4016,4015,1,0,0,0,
        4017,609,1,0,0,0,4018,4019,5,394,0,0,4019,4020,3,612,306,0,4020,
        611,1,0,0,0,4021,4026,5,502,0,0,4022,4023,5,395,0,0,4023,4025,5,
        502,0,0,4024,4022,1,0,0,0,4025,4028,1,0,0,0,4026,4024,1,0,0,0,4026,
        4027,1,0,0,0,4027,613,1,0,0,0,4028,4026,1,0,0,0,4029,4030,5,396,
        0,0,4030,4033,5,505,0,0,4031,4033,5,489,0,0,4032,4029,1,0,0,0,4032,
        4031,1,0,0,0,4033,615,1,0,0,0,4034,4035,5,397,0,0,4035,4036,5,489,
        0,0,4036,617,1,0,0,0,4037,4038,5,398,0,0,4038,4039,3,606,303,0,4039,
        619,1,0,0,0,4040,4041,5,399,0,0,4041,4042,3,606,303,0,4042,621,1,
        0,0,0,4043,4044,5,400,0,0,4044,4045,5,489,0,0,4045,623,1,0,0,0,4046,
        4047,5,401,0,0,4047,4048,3,606,303,0,4048,625,1,0,0,0,4049,4050,
        5,402,0,0,4050,4051,5,489,0,0,4051,627,1,0,0,0,4052,4053,5,403,0,
        0,4053,4054,3,606,303,0,4054,629,1,0,0,0,4055,4056,5,404,0,0,4056,
        4057,5,491,0,0,4057,631,1,0,0,0,4058,4059,5,405,0,0,4059,4060,5,
        506,0,0,4060,633,1,0,0,0,4061,4062,5,406,0,0,4062,4063,5,489,0,0,
        4063,635,1,0,0,0,4064,4065,5,407,0,0,4065,4066,5,491,0,0,4066,637,
        1,0,0,0,4067,4068,5,408,0,0,4068,4069,3,606,303,0,4069,639,1,0,0,
        0,4070,4071,5,409,0,0,4071,4072,3,168,84,0,4072,641,1,0,0,0,4073,
        4074,5,410,0,0,4074,4075,3,118,59,0,4075,643,1,0,0,0,4076,4077,5,
        411,0,0,4077,4078,3,606,303,0,4078,645,1,0,0,0,4079,4080,5,412,0,
        0,4080,4081,5,491,0,0,4081,647,1,0,0,0,4082,4083,5,413,0,0,4083,
        4084,3,606,303,0,4084,649,1,0,0,0,4085,4086,5,414,0,0,4086,4087,
        3,606,303,0,4087,651,1,0,0,0,4088,4089,5,413,0,0,4089,4090,5,489,
        0,0,4090,653,1,0,0,0,4091,4092,5,415,0,0,4092,4093,5,489,0,0,4093,
        655,1,0,0,0,4094,4095,5,416,0,0,4095,4096,5,489,0,0,4096,657,1,0,
        0,0,4097,4098,5,417,0,0,4098,4099,3,606,303,0,4099,659,1,0,0,0,4100,
        4101,5,418,0,0,4101,4102,7,28,0,0,4102,661,1,0,0,0,4103,4104,5,423,
        0,0,4104,4105,7,29,0,0,4105,663,1,0,0,0,4106,4107,5,424,0,0,4107,
        4108,3,606,303,0,4108,665,1,0,0,0,4109,4110,5,425,0,0,4110,4111,
        3,606,303,0,4111,667,1,0,0,0,4112,4113,5,426,0,0,4113,4114,3,118,
        59,0,4114,669,1,0,0,0,4115,4116,5,427,0,0,4116,4117,3,606,303,0,
        4117,671,1,0,0,0,4118,4119,5,428,0,0,4119,4120,3,606,303,0,4120,
        673,1,0,0,0,4121,4122,5,429,0,0,4122,4123,3,606,303,0,4123,675,1,
        0,0,0,4124,4125,5,430,0,0,4125,4126,5,491,0,0,4126,677,1,0,0,0,4127,
        4128,5,394,0,0,4128,4129,5,491,0,0,4129,679,1,0,0,0,4130,4131,5,
        431,0,0,4131,4132,5,491,0,0,4132,681,1,0,0,0,4133,4134,5,432,0,0,
        4134,4135,3,606,303,0,4135,683,1,0,0,0,4136,4137,5,433,0,0,4137,
        4138,5,491,0,0,4138,685,1,0,0,0,4139,4140,5,434,0,0,4140,4141,3,
        606,303,0,4141,687,1,0,0,0,4142,4143,5,435,0,0,4143,4144,5,491,0,
        0,4144,689,1,0,0,0,4145,4146,5,436,0,0,4146,4147,3,606,303,0,4147,
        691,1,0,0,0,4148,4149,5,437,0,0,4149,4150,3,118,59,0,4150,693,1,
        0,0,0,4151,4152,5,438,0,0,4152,4153,3,118,59,0,4153,695,1,0,0,0,
        4154,4155,5,439,0,0,4155,4156,3,118,59,0,4156,697,1,0,0,0,4157,4158,
        5,440,0,0,4158,4159,3,118,59,0,4159,699,1,0,0,0,4160,4161,5,441,
        0,0,4161,4162,3,118,59,0,4162,701,1,0,0,0,4163,4164,5,442,0,0,4164,
        4165,3,118,59,0,4165,703,1,0,0,0,4166,4167,5,443,0,0,4167,4168,5,
        491,0,0,4168,705,1,0,0,0,4169,4170,5,444,0,0,4170,4171,5,504,0,0,
        4171,707,1,0,0,0,4172,4173,5,445,0,0,4173,4174,5,489,0,0,4174,709,
        1,0,0,0,4175,4176,5,446,0,0,4176,4177,5,491,0,0,4177,711,1,0,0,0,
        4178,4179,5,447,0,0,4179,4180,3,168,84,0,4180,713,1,0,0,0,4181,4182,
        5,448,0,0,4182,4183,3,606,303,0,4183,715,1,0,0,0,4184,4185,5,449,
        0,0,4185,4186,7,30,0,0,4186,717,1,0,0,0,4187,4188,5,453,0,0,4188,
        4189,3,606,303,0,4189,719,1,0,0,0,4190,4191,5,454,0,0,4191,4192,
        5,489,0,0,4192,721,1,0,0,0,4193,4194,5,455,0,0,4194,4195,5,491,0,
        0,4195,723,1,0,0,0,4196,4197,5,456,0,0,4197,4198,3,118,59,0,4198,
        725,1,0,0,0,4199,4200,5,457,0,0,4200,4201,3,168,84,0,4201,727,1,
        0,0,0,4202,4203,5,458,0,0,4203,4204,3,606,303,0,4204,729,1,0,0,0,
        4205,4206,5,459,0,0,4206,4207,3,606,303,0,4207,731,1,0,0,0,4208,
        4209,5,460,0,0,4209,4210,5,504,0,0,4210,733,1,0,0,0,4211,4212,5,
        461,0,0,4212,4213,5,489,0,0,4213,735,1,0,0,0,4214,4215,5,462,0,0,
        4215,4216,3,606,303,0,4216,737,1,0,0,0,4217,4218,5,463,0,0,4218,
        4219,5,489,0,0,4219,739,1,0,0,0,4220,4221,5,464,0,0,4221,4222,5,
        491,0,0,4222,741,1,0,0,0,4223,4224,5,465,0,0,4224,4225,5,491,0,0,
        4225,743,1,0,0,0,4226,4227,5,466,0,0,4227,4228,5,489,0,0,4228,745,
        1,0,0,0,4229,4230,5,467,0,0,4230,4231,5,491,0,0,4231,747,1,0,0,0,
        4232,4233,5,468,0,0,4233,4238,3,170,85,0,4234,4235,5,395,0,0,4235,
        4237,3,170,85,0,4236,4234,1,0,0,0,4237,4240,1,0,0,0,4238,4236,1,
        0,0,0,4238,4239,1,0,0,0,4239,749,1,0,0,0,4240,4238,1,0,0,0,4241,
        4242,5,469,0,0,4242,4243,5,491,0,0,4243,751,1,0,0,0,4244,4245,5,
        470,0,0,4245,4246,3,118,59,0,4246,753,1,0,0,0,4247,4248,5,471,0,
        0,4248,4249,3,168,84,0,4249,755,1,0,0,0,4250,4251,5,472,0,0,4251,
        4252,3,606,303,0,4252,757,1,0,0,0,4253,4254,5,473,0,0,4254,4255,
        3,606,303,0,4255,759,1,0,0,0,4256,4257,5,474,0,0,4257,4258,3,606,
        303,0,4258,761,1,0,0,0,4259,4260,5,475,0,0,4260,4261,5,491,0,0,4261,
        763,1,0,0,0,4262,4263,5,476,0,0,4263,4264,5,491,0,0,4264,765,1,0,
        0,0,4265,4266,5,477,0,0,4266,4267,3,606,303,0,4267,767,1,0,0,0,4268,
        4269,5,478,0,0,4269,4270,5,489,0,0,4270,769,1,0,0,0,4271,4272,5,
        479,0,0,4272,4273,3,606,303,0,4273,771,1,0,0,0,4274,4275,5,391,0,
        0,4275,4276,5,508,0,0,4276,773,1,0,0,0,4277,4278,5,480,0,0,4278,
        4279,3,606,303,0,4279,775,1,0,0,0,4280,4281,5,481,0,0,4281,4282,
        3,606,303,0,4282,777,1,0,0,0,4283,4284,5,482,0,0,4284,4285,3,168,
        84,0,4285,779,1,0,0,0,4286,4287,5,393,0,0,4287,4288,5,489,0,0,4288,
        781,1,0,0,0,4289,4290,5,393,0,0,4290,4291,5,491,0,0,4291,783,1,0,
        0,0,4292,4293,5,483,0,0,4293,4294,3,606,303,0,4294,785,1,0,0,0,4295,
        4296,5,484,0,0,4296,4297,5,489,0,0,4297,787,1,0,0,0,4298,4299,5,
        485,0,0,4299,4300,5,507,0,0,4300,789,1,0,0,0,4301,4302,5,486,0,0,
        4302,4303,3,606,303,0,4303,791,1,0,0,0,377,795,802,833,853,856,859,
        862,865,868,871,879,886,892,898,901,904,907,910,913,916,919,928,
        935,941,947,950,953,956,959,962,972,979,989,1001,1015,1018,1025,
        1029,1040,1056,1062,1065,1068,1071,1074,1079,1088,1091,1096,1104,
        1108,1122,1138,1144,1149,1155,1160,1169,1182,1191,1199,1209,1212,
        1220,1234,1245,1253,1263,1265,1272,1281,1293,1305,1313,1318,1323,
        1327,1337,1346,1350,1360,1365,1370,1374,1384,1393,1397,1407,1410,
        1417,1432,1445,1452,1457,1466,1469,1480,1489,1510,1528,1531,1541,
        1544,1548,1558,1561,1564,1572,1575,1628,1639,1648,1651,1661,1670,
        1673,1683,1687,1690,1693,1696,1707,1723,1739,1748,1751,1753,1757,
        1764,1769,1771,1777,1781,1795,1809,1834,1843,1851,1854,1866,1876,
        1902,1914,1922,1927,1943,1959,1962,1972,1975,1979,1989,2001,2014,
        2024,2030,2172,2183,2193,2226,2239,2252,2322,2326,2333,2339,2345,
        2351,2356,2362,2365,2374,2381,2388,2396,2403,2413,2420,2430,2437,
        2447,2454,2464,2471,2481,2488,2498,2503,2512,2517,2526,2533,2543,
        2554,2565,2572,2582,2589,2599,2604,2613,2618,2627,2638,2649,2660,
        2671,2684,2697,2706,2712,2723,2729,2734,2737,2742,2746,2750,2756,
        2761,2768,2774,2780,2786,2791,2797,2800,2804,2807,2815,2821,2827,
        2832,2839,2844,2850,2855,2864,2871,2882,2893,2904,2915,2926,2937,
        2948,2959,2970,2981,2992,3003,3014,3026,3033,3044,3051,3060,3067,
        3074,3086,3093,3099,3103,3108,3112,3122,3131,3136,3142,3153,3159,
        3164,3171,3183,3186,3193,3205,3208,3215,3231,3234,3242,3249,3254,
        3256,3262,3270,3278,3282,3290,3358,3367,3370,3381,3384,3395,3398,
        3409,3412,3437,3446,3449,3466,3475,3478,3485,3494,3497,3506,3515,
        3518,3534,3543,3546,3552,3561,3564,3575,3584,3587,3595,3604,3607,
        3615,3624,3627,3634,3643,3646,3659,3668,3671,3680,3689,3692,3700,
        3709,3712,3720,3729,3732,3744,3753,3756,3763,3772,3775,3786,3795,
        3798,3810,3819,3822,3849,3858,3861,3869,3878,3881,3892,3895,3905,
        3916,3919,3926,3948,3955,3963,3968,3983,3986,3995,4011,4016,4026,
        4032,4238
    ]

class LLVMIRParser ( Parser ):

    grammarFileName = "LLVMIR.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'source_filename'", "'='", "'target'", 
                     "'datalayout'", "'triple'", "'module'", "'asm'", "'type'", 
                     "'comdat'", "'any'", "'exactmatch'", "'largest'", "'nodeduplicate'", 
                     "'samesize'", "','", "'alias'", "'ifunc'", "'declare'", 
                     "'define'", "'attributes'", "'{'", "'}'", "'!'", "'uselistorder'", 
                     "'uselistorder_bb'", "'('", "')'", "'cc'", "'gc'", 
                     "'prefix'", "'prologue'", "'personality'", "'ret'", 
                     "'void'", "'br'", "'switch'", "'['", "']'", "'indirectbr'", 
                     "'resume'", "'catchret'", "'from'", "'to'", "'cleanupret'", 
                     "'unwind'", "'unreachable'", "'invoke'", "'callbr'", 
                     "'catchswitch'", "'within'", "'label'", "'caller'", 
                     "'!DIExpression'", "'no_sanitize_address'", "'no_sanitize_hwaddress'", 
                     "'sanitize_address_dyninit'", "'sanitize_memtag'", 
                     "'section'", "'partition'", "'true'", "'false'", "'null'", 
                     "'none'", "'<'", "'>'", "'c'", "'zeroinitializer'", 
                     "'undef'", "'poison'", "'blockaddress'", "'dso_local_equivalent'", 
                     "'no_cfi'", "'!DIArgList'", "'sideeffect'", "'alignstack'", 
                     "'inteldialect'", "'opaque'", "'*'", "'...'", "'align'", 
                     "'allockind'", "'allocsize'", "'uwtable'", "'async'", 
                     "'sync'", "'vscale_range'", "'byref'", "'byval'", "'dereferenceable'", 
                     "'dereferenceable_or_null'", "'elementtype'", "'inalloca'", 
                     "'allocalign'", "'allocptr'", "'immarg'", "'inreg'", 
                     "'nest'", "'noalias'", "'nocapture'", "'nofree'", "'nonnull'", 
                     "'noundef'", "'readnone'", "'readonly'", "'returned'", 
                     "'signext'", "'swiftasync'", "'swifterror'", "'swiftself'", 
                     "'writeonly'", "'zeroext'", "'preallocated'", "'sret'", 
                     "'x'", "'vscale'", "'x86_mmx'", "'token'", "'ptr'", 
                     "'addrspace'", "'thread_local'", "'metadata'", "'bitcast'", 
                     "'getelementptr'", "'inrange'", "'addrspacecast'", 
                     "'inttoptr'", "'icmp'", "'fcmp'", "'select'", "'trunc'", 
                     "'zext'", "'sext'", "'fptrunc'", "'fpext'", "'fptoui'", 
                     "'fptosi'", "'uitofp'", "'sitofp'", "'ptrtoint'", "'extractelement'", 
                     "'insertelement'", "'shufflevector'", "'shl'", "'lshr'", 
                     "'exact'", "'ashr'", "'and'", "'or'", "'xor'", "'add'", 
                     "'sub'", "'mul'", "'fneg'", "'store'", "'volatile'", 
                     "'atomic'", "'syncscope'", "'fence'", "'fadd'", "'fsub'", 
                     "'fmul'", "'udiv'", "'sdiv'", "'fdiv'", "'urem'", "'srem'", 
                     "'frem'", "'extractvalue'", "'insertvalue'", "'alloca'", 
                     "'load'", "'cmpxchg'", "'weak'", "'atomicrmw'", "'phi'", 
                     "'freeze'", "'musttail'", "'notail'", "'tail'", "'call'", 
                     "'va_arg'", "'landingpad'", "'cleanup'", "'catchpad'", 
                     "'cleanuppad'", "'catch'", "'filter'", "'extern_weak'", 
                     "'external'", "'appending'", "'available_externally'", 
                     "'common'", "'internal'", "'linkonce'", "'linkonce_odr'", 
                     "'private'", "'weak_odr'", "'dso_local'", "'dso_preemptable'", 
                     "'default'", "'hidden'", "'protected'", "'dllexport'", 
                     "'dllimport'", "'initialexec'", "'localdynamic'", "'localexec'", 
                     "'local_unnamed_addr'", "'unnamed_addr'", "'externally_initialized'", 
                     "'constant'", "'global'", "'alwaysinline'", "'argmemonly'", 
                     "'builtin'", "'cold'", "'convergent'", "'disable_sanitizer_instrumentation'", 
                     "'fn_ret_thunk_extern'", "'hot'", "'inaccessiblemem_or_argmemonly'", 
                     "'inaccessiblememonly'", "'inlinehint'", "'jumptable'", 
                     "'minsize'", "'mustprogress'", "'naked'", "'nobuiltin'", 
                     "'nocallback'", "'nocf_check'", "'noduplicate'", "'noimplicitfloat'", 
                     "'noinline'", "'nomerge'", "'nonlazybind'", "'noprofile'", 
                     "'norecurse'", "'noredzone'", "'noreturn'", "'nosanitize_bounds'", 
                     "'nosanitize_coverage'", "'nosync'", "'nounwind'", 
                     "'null_pointer_is_valid'", "'optforfuzzing'", "'optnone'", 
                     "'optsize'", "'presplitcoroutine'", "'returns_twice'", 
                     "'safestack'", "'sanitize_address'", "'sanitize_hwaddress'", 
                     "'sanitize_memory'", "'sanitize_thread'", "'shadowcallstack'", 
                     "'speculatable'", "'speculative_load_hardening'", "'ssp'", 
                     "'sspreq'", "'sspstrong'", "'strictfp'", "'willreturn'", 
                     "'distinct'", "'inbounds'", "'nsw'", "'nuw'", "'eq'", 
                     "'ne'", "'sge'", "'sgt'", "'sle'", "'slt'", "'uge'", 
                     "'ugt'", "'ule'", "'ult'", "'oeq'", "'oge'", "'ogt'", 
                     "'ole'", "'olt'", "'one'", "'ord'", "'ueq'", "'une'", 
                     "'uno'", "'acq_rel'", "'acquire'", "'monotonic'", "'release'", 
                     "'seq_cst'", "'unordered'", "'aarch64_sve_vector_pcs'", 
                     "'aarch64_vector_pcs'", "'amdgpu_cs'", "'amdgpu_es'", 
                     "'amdgpu_gfx'", "'amdgpu_gs'", "'amdgpu_hs'", "'amdgpu_kernel'", 
                     "'amdgpu_ls'", "'amdgpu_ps'", "'amdgpu_vs'", "'anyregcc'", 
                     "'arm_aapcs_vfpcc'", "'arm_aapcscc'", "'arm_apcscc'", 
                     "'avr_intrcc'", "'avr_signalcc'", "'ccc'", "'cfguard_checkcc'", 
                     "'coldcc'", "'cxx_fast_tlscc'", "'fastcc'", "'ghccc'", 
                     "'hhvm_ccc'", "'hhvmcc'", "'intel_ocl_bicc'", "'msp430_intrcc'", 
                     "'preserve_allcc'", "'preserve_mostcc'", "'ptx_device'", 
                     "'ptx_kernel'", "'spir_func'", "'spir_kernel'", "'swiftcc'", 
                     "'swifttailcc'", "'tailcc'", "'webkit_jscc'", "'win64cc'", 
                     "'x86_64_sysvcc'", "'x86_fastcallcc'", "'x86_intrcc'", 
                     "'x86_regcallcc'", "'x86_stdcallcc'", "'x86_thiscallcc'", 
                     "'x86_vectorcallcc'", "'afn'", "'arcp'", "'contract'", 
                     "'fast'", "'ninf'", "'nnan'", "'nsz'", "'reassoc'", 
                     "'fmax'", "'fmin'", "'max'", "'min'", "'nand'", "'umax'", 
                     "'umin'", "'xchg'", "'half'", "'bfloat'", "'float'", 
                     "'double'", "'x86_fp80'", "'fp128'", "'ppc_fp128'", 
                     "'!DIBasicType'", "'!DICommonBlock'", "'!DICompileUnit'", 
                     "'!DICompositeType'", "'!DIDerivedType'", "'!DIEnumerator'", 
                     "'!DIFile'", "'!DIGlobalVariable'", "'!DIGlobalVariableExpression'", 
                     "'!DIImportedEntity'", "'!DILabel'", "'!DILexicalBlock'", 
                     "'!DILexicalBlockFile'", "'!DILocalVariable'", "'!DILocation'", 
                     "'!DIMacro'", "'!DIMacroFile'", "'!DIModule'", "'!DINamespace'", 
                     "'!DIObjCProperty'", "'!DIStringType'", "'!DISubprogram'", 
                     "'!DISubroutineType'", "'!DITemplateTypeParameter'", 
                     "'!DITemplateValueParameter'", "'!GenericDINode'", 
                     "'tag:'", "'header:'", "'operands:'", "'name:'", "'type:'", 
                     "'defaulted:'", "'value:'", "'flags:'", "'|'", "'cc:'", 
                     "'align:'", "'allocated:'", "'annotations:'", "'arg:'", 
                     "'associated:'", "'attributes:'", "'baseType:'", "'checksum:'", 
                     "'checksumkind:'", "'column:'", "'configMacros:'", 
                     "'containingType:'", "'count:'", "'debugInfoForProfiling:'", 
                     "'declaration:'", "'directory:'", "'discriminator:'", 
                     "'dataLocation:'", "'dwarfAddressSpace:'", "'dwoId:'", 
                     "'elements:'", "'emissionKind:'", "'DebugDirectivesOnly'", 
                     "'FullDebug'", "'LineTablesOnly'", "'NoDebug'", "'encoding:'", 
                     "'entity:'", "'enums:'", "'exportSymbols:'", "'expr:'", 
                     "'extraData:'", "'file:'", "'filename:'", "'getter:'", 
                     "'globals:'", "'identifier:'", "'imports:'", "'includePath:'", 
                     "'inlinedAt:'", "'isDecl:'", "'isDefinition:'", "'isImplicitCode:'", 
                     "'isLocal:'", "'isOptimized:'", "'isUnsigned:'", "'apinotes:'", 
                     "'language:'", "'line:'", "'linkageName:'", "'lowerBound:'", 
                     "'macros:'", "'nameTableKind:'", "'GNU'", "'None'", 
                     "'Default'", "'nodes:'", "'offset:'", "'producer:'", 
                     "'rangesBaseAddress:'", "'rank:'", "'retainedNodes:'", 
                     "'retainedTypes:'", "'runtimeLang:'", "'runtimeVersion:'", 
                     "'scope:'", "'scopeLine:'", "'sdk:'", "'setter:'", 
                     "'size:'", "'source:'", "'spFlags:'", "'splitDebugFilename:'", 
                     "'splitDebugInlining:'", "'stride:'", "'stringLength:'", 
                     "'stringLengthExpression:'", "'stringLocationExpression:'", 
                     "'sysroot:'", "'targetFuncName:'", "'templateParams:'", 
                     "'thisAdjustment:'", "'thrownTypes:'", "'types:'", 
                     "'unit:'", "'upperBound:'", "'var:'", "'virtualIndex:'", 
                     "'virtuality:'", "'vtableHolder:'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Comment", 
                      "WhiteSpace", "IntLit", "FloatLit", "StringLit", "GlobalIdent", 
                      "LocalIdent", "LabelIdent", "AttrGroupId", "ComdatName", 
                      "MetadataName", "MetadataId", "IntType", "DwarfTag", 
                      "DwarfAttEncoding", "DiFlag", "DispFlag", "DwarfLang", 
                      "DwarfCc", "ChecksumKind", "DwarfVirtuality", "DwarfMacinfo", 
                      "DwarfOp" ]

    RULE_compilationUnit = 0
    RULE_targetDef = 1
    RULE_sourceFilename = 2
    RULE_targetDataLayout = 3
    RULE_targetTriple = 4
    RULE_topLevelEntity = 5
    RULE_moduleAsm = 6
    RULE_typeDef = 7
    RULE_comdatDef = 8
    RULE_globalDecl = 9
    RULE_globalDef = 10
    RULE_indirectSymbolDef = 11
    RULE_funcDecl = 12
    RULE_funcDef = 13
    RULE_attrGroupDef = 14
    RULE_namedMetadataDef = 15
    RULE_metadataDef = 16
    RULE_useListOrder = 17
    RULE_useListOrderBB = 18
    RULE_funcHeader = 19
    RULE_indirectSymbol = 20
    RULE_callingConv = 21
    RULE_callingConvInt = 22
    RULE_funcHdrField = 23
    RULE_gc = 24
    RULE_prefix = 25
    RULE_prologue = 26
    RULE_personality = 27
    RULE_returnAttribute = 28
    RULE_funcBody = 29
    RULE_basicBlock = 30
    RULE_instruction = 31
    RULE_terminator = 32
    RULE_localDefTerm = 33
    RULE_valueTerminator = 34
    RULE_retTerm = 35
    RULE_brTerm = 36
    RULE_condBrTerm = 37
    RULE_switchTerm = 38
    RULE_indirectBrTerm = 39
    RULE_resumeTerm = 40
    RULE_catchRetTerm = 41
    RULE_cleanupRetTerm = 42
    RULE_unreachableTerm = 43
    RULE_invokeTerm = 44
    RULE_callBrTerm = 45
    RULE_catchSwitchTerm = 46
    RULE_label = 47
    RULE_case = 48
    RULE_unwindTarget = 49
    RULE_handlers = 50
    RULE_metadataNode = 51
    RULE_diExpression = 52
    RULE_diExpressionField = 53
    RULE_globalField = 54
    RULE_section = 55
    RULE_comdat = 56
    RULE_partition = 57
    RULE_constant = 58
    RULE_boolConst = 59
    RULE_intConst = 60
    RULE_floatConst = 61
    RULE_nullConst = 62
    RULE_noneConst = 63
    RULE_structConst = 64
    RULE_arrayConst = 65
    RULE_vectorConst = 66
    RULE_zeroInitializerConst = 67
    RULE_undefConst = 68
    RULE_poisonConst = 69
    RULE_blockAddressConst = 70
    RULE_dsoLocalEquivalentConst = 71
    RULE_noCFIConst = 72
    RULE_constantExpr = 73
    RULE_typeConst = 74
    RULE_metadataAttachment = 75
    RULE_mdNode = 76
    RULE_mdTuple = 77
    RULE_metadata = 78
    RULE_diArgList = 79
    RULE_typeValue = 80
    RULE_value = 81
    RULE_inlineAsm = 82
    RULE_mdString = 83
    RULE_mdFieldOrInt = 84
    RULE_diSPFlag = 85
    RULE_funcAttribute = 86
    RULE_type = 87
    RULE_params = 88
    RULE_param = 89
    RULE_paramAttribute = 90
    RULE_attrString = 91
    RULE_attrPair = 92
    RULE_align = 93
    RULE_alignPair = 94
    RULE_alignStack = 95
    RULE_alignStackPair = 96
    RULE_allocKind = 97
    RULE_allocSize = 98
    RULE_unwindTable = 99
    RULE_vectorScaleRange = 100
    RULE_byRefAttr = 101
    RULE_byval = 102
    RULE_dereferenceable = 103
    RULE_elementType = 104
    RULE_inAlloca = 105
    RULE_paramAttr = 106
    RULE_preallocated = 107
    RULE_structRetAttr = 108
    RULE_firstClassType = 109
    RULE_concreteType = 110
    RULE_intType = 111
    RULE_floatType = 112
    RULE_pointerType = 113
    RULE_vectorType = 114
    RULE_labelType = 115
    RULE_arrayType = 116
    RULE_structType = 117
    RULE_namedType = 118
    RULE_mmxType = 119
    RULE_tokenType = 120
    RULE_opaquePointerType = 121
    RULE_addrSpace = 122
    RULE_threadLocal = 123
    RULE_metadataType = 124
    RULE_bitCastExpr = 125
    RULE_getElementPtrExpr = 126
    RULE_gepIndex = 127
    RULE_addrSpaceCastExpr = 128
    RULE_intToPtrExpr = 129
    RULE_iCmpExpr = 130
    RULE_fCmpExpr = 131
    RULE_selectExpr = 132
    RULE_truncExpr = 133
    RULE_zExtExpr = 134
    RULE_sExtExpr = 135
    RULE_fpTruncExpr = 136
    RULE_fpExtExpr = 137
    RULE_fpToUiExpr = 138
    RULE_fpToSiExpr = 139
    RULE_uiToFpExpr = 140
    RULE_siToFpExpr = 141
    RULE_ptrToIntExpr = 142
    RULE_extractElementExpr = 143
    RULE_insertElementExpr = 144
    RULE_shuffleVectorExpr = 145
    RULE_shlExpr = 146
    RULE_lShrExpr = 147
    RULE_aShrExpr = 148
    RULE_andExpr = 149
    RULE_orExpr = 150
    RULE_xorExpr = 151
    RULE_addExpr = 152
    RULE_subExpr = 153
    RULE_mulExpr = 154
    RULE_fNegExpr = 155
    RULE_localDefInst = 156
    RULE_valueInstruction = 157
    RULE_storeInst = 158
    RULE_syncScope = 159
    RULE_fenceInst = 160
    RULE_fNegInst = 161
    RULE_addInst = 162
    RULE_fAddInst = 163
    RULE_subInst = 164
    RULE_fSubInst = 165
    RULE_mulInst = 166
    RULE_fMulInst = 167
    RULE_uDivInst = 168
    RULE_sDivInst = 169
    RULE_fDivInst = 170
    RULE_uRemInst = 171
    RULE_sRemInst = 172
    RULE_fRemInst = 173
    RULE_shlInst = 174
    RULE_lShrInst = 175
    RULE_aShrInst = 176
    RULE_andInst = 177
    RULE_orInst = 178
    RULE_xorInst = 179
    RULE_extractElementInst = 180
    RULE_insertElementInst = 181
    RULE_shuffleVectorInst = 182
    RULE_extractValueInst = 183
    RULE_insertValueInst = 184
    RULE_allocaInst = 185
    RULE_loadInst = 186
    RULE_cmpXchgInst = 187
    RULE_atomicRMWInst = 188
    RULE_getElementPtrInst = 189
    RULE_truncInst = 190
    RULE_zExtInst = 191
    RULE_sExtInst = 192
    RULE_fpTruncInst = 193
    RULE_fpExtInst = 194
    RULE_fpToUiInst = 195
    RULE_fpToSiInst = 196
    RULE_uiToFpInst = 197
    RULE_siToFpInst = 198
    RULE_ptrToIntInst = 199
    RULE_intToPtrInst = 200
    RULE_bitCastInst = 201
    RULE_addrSpaceCastInst = 202
    RULE_iCmpInst = 203
    RULE_fCmpInst = 204
    RULE_phiInst = 205
    RULE_selectInst = 206
    RULE_freezeInst = 207
    RULE_callInst = 208
    RULE_vaargInst = 209
    RULE_landingPadInst = 210
    RULE_catchPadInst = 211
    RULE_cleanupPadInst = 212
    RULE_inc = 213
    RULE_operandBundle = 214
    RULE_clause = 215
    RULE_args = 216
    RULE_arg = 217
    RULE_exceptionArg = 218
    RULE_exceptionPad = 219
    RULE_externalLinkage = 220
    RULE_internalLinkage = 221
    RULE_linkage = 222
    RULE_preemption = 223
    RULE_visibility = 224
    RULE_dllStorageClass = 225
    RULE_tlsModel = 226
    RULE_unnamedAddr = 227
    RULE_externallyInitialized = 228
    RULE_immutable = 229
    RULE_funcAttr = 230
    RULE_distinct = 231
    RULE_inBounds = 232
    RULE_returnAttr = 233
    RULE_overflowFlag = 234
    RULE_iPred = 235
    RULE_fPred = 236
    RULE_atomicOrdering = 237
    RULE_callingConvEnum = 238
    RULE_fastMathFlag = 239
    RULE_atomicOp = 240
    RULE_floatKind = 241
    RULE_specializedMDNode = 242
    RULE_diBasicType = 243
    RULE_diCommonBlock = 244
    RULE_diCompileUnit = 245
    RULE_diCompositeType = 246
    RULE_diCompositeTypeField = 247
    RULE_diDerivedType = 248
    RULE_diDerivedTypeField = 249
    RULE_diEnumerator = 250
    RULE_diEnumeratorField = 251
    RULE_diFile = 252
    RULE_diFileField = 253
    RULE_diGlobalVariable = 254
    RULE_diGlobalVariableField = 255
    RULE_diGlobalVariableExpression = 256
    RULE_diGlobalVariableExpressionField = 257
    RULE_diImportedEntity = 258
    RULE_diImportedEntityField = 259
    RULE_diLabel = 260
    RULE_diLabelField = 261
    RULE_diLexicalBlock = 262
    RULE_diLexicalBlockField = 263
    RULE_diLexicalBlockFile = 264
    RULE_diLexicalBlockFileField = 265
    RULE_diLocalVariable = 266
    RULE_diLocalVariableField = 267
    RULE_diLocation = 268
    RULE_diLocationField = 269
    RULE_diMacro = 270
    RULE_diMacroField = 271
    RULE_diMacroFile = 272
    RULE_diMacroFileField = 273
    RULE_diModule = 274
    RULE_diModuleField = 275
    RULE_diNamespace = 276
    RULE_diNamespaceField = 277
    RULE_diObjCProperty = 278
    RULE_diObjCPropertyField = 279
    RULE_diStringType = 280
    RULE_diStringTypeField = 281
    RULE_diSubprogram = 282
    RULE_diSubprogramField = 283
    RULE_diSubrange = 284
    RULE_diSubrangeField = 285
    RULE_diSubroutineType = 286
    RULE_diTemplateTypeParameter = 287
    RULE_diTemplateValueParameter = 288
    RULE_genericDiNode = 289
    RULE_diTemplateTypeParameterField = 290
    RULE_diCompileUnitField = 291
    RULE_diCommonBlockField = 292
    RULE_diBasicTypeField = 293
    RULE_genericDINodeField = 294
    RULE_tagField = 295
    RULE_headerField = 296
    RULE_operandsField = 297
    RULE_diTemplateValueParameterField = 298
    RULE_nameField = 299
    RULE_typeField = 300
    RULE_defaultedField = 301
    RULE_valueField = 302
    RULE_mdField = 303
    RULE_diSubroutineTypeField = 304
    RULE_flagsField = 305
    RULE_diFlags = 306
    RULE_ccField = 307
    RULE_alignField = 308
    RULE_allocatedField = 309
    RULE_annotationsField = 310
    RULE_argField = 311
    RULE_associatedField = 312
    RULE_attributesField = 313
    RULE_baseTypeField = 314
    RULE_checksumField = 315
    RULE_checksumkindField = 316
    RULE_columnField = 317
    RULE_configMacrosField = 318
    RULE_containingTypeField = 319
    RULE_countField = 320
    RULE_debugInfoForProfilingField = 321
    RULE_declarationField = 322
    RULE_directoryField = 323
    RULE_discriminatorField = 324
    RULE_dataLocationField = 325
    RULE_discriminatorIntField = 326
    RULE_dwarfAddressSpaceField = 327
    RULE_dwoIdField = 328
    RULE_elementsField = 329
    RULE_emissionKindField = 330
    RULE_encodingField = 331
    RULE_entityField = 332
    RULE_enumsField = 333
    RULE_exportSymbolsField = 334
    RULE_exprField = 335
    RULE_extraDataField = 336
    RULE_fileField = 337
    RULE_filenameField = 338
    RULE_flagsStringField = 339
    RULE_getterField = 340
    RULE_globalsField = 341
    RULE_identifierField = 342
    RULE_importsField = 343
    RULE_includePathField = 344
    RULE_inlinedAtField = 345
    RULE_isDeclField = 346
    RULE_isDefinitionField = 347
    RULE_isImplicitCodeField = 348
    RULE_isLocalField = 349
    RULE_isOptimizedField = 350
    RULE_isUnsignedField = 351
    RULE_apiNotesField = 352
    RULE_languageField = 353
    RULE_lineField = 354
    RULE_linkageNameField = 355
    RULE_lowerBoundField = 356
    RULE_macrosField = 357
    RULE_nameTableKindField = 358
    RULE_nodesField = 359
    RULE_offsetField = 360
    RULE_producerField = 361
    RULE_rangesBaseAddressField = 362
    RULE_rankField = 363
    RULE_retainedNodesField = 364
    RULE_retainedTypesField = 365
    RULE_runtimeLangField = 366
    RULE_runtimeVersionField = 367
    RULE_scopeField = 368
    RULE_scopeLineField = 369
    RULE_sdkField = 370
    RULE_setterField = 371
    RULE_sizeField = 372
    RULE_sourceField = 373
    RULE_spFlagsField = 374
    RULE_splitDebugFilenameField = 375
    RULE_splitDebugInliningField = 376
    RULE_strideField = 377
    RULE_stringLengthField = 378
    RULE_stringLengthExpressionField = 379
    RULE_stringLocationExpressionField = 380
    RULE_sysrootField = 381
    RULE_targetFuncNameField = 382
    RULE_templateParamsField = 383
    RULE_thisAdjustmentField = 384
    RULE_thrownTypesField = 385
    RULE_typeMacinfoField = 386
    RULE_typesField = 387
    RULE_unitField = 388
    RULE_upperBoundField = 389
    RULE_valueIntField = 390
    RULE_valueStringField = 391
    RULE_varField = 392
    RULE_virtualIndexField = 393
    RULE_virtualityField = 394
    RULE_vtableHolderField = 395

    ruleNames =  [ "compilationUnit", "targetDef", "sourceFilename", "targetDataLayout", 
                   "targetTriple", "topLevelEntity", "moduleAsm", "typeDef", 
                   "comdatDef", "globalDecl", "globalDef", "indirectSymbolDef", 
                   "funcDecl", "funcDef", "attrGroupDef", "namedMetadataDef", 
                   "metadataDef", "useListOrder", "useListOrderBB", "funcHeader", 
                   "indirectSymbol", "callingConv", "callingConvInt", "funcHdrField", 
                   "gc", "prefix", "prologue", "personality", "returnAttribute", 
                   "funcBody", "basicBlock", "instruction", "terminator", 
                   "localDefTerm", "valueTerminator", "retTerm", "brTerm", 
                   "condBrTerm", "switchTerm", "indirectBrTerm", "resumeTerm", 
                   "catchRetTerm", "cleanupRetTerm", "unreachableTerm", 
                   "invokeTerm", "callBrTerm", "catchSwitchTerm", "label", 
                   "case", "unwindTarget", "handlers", "metadataNode", "diExpression", 
                   "diExpressionField", "globalField", "section", "comdat", 
                   "partition", "constant", "boolConst", "intConst", "floatConst", 
                   "nullConst", "noneConst", "structConst", "arrayConst", 
                   "vectorConst", "zeroInitializerConst", "undefConst", 
                   "poisonConst", "blockAddressConst", "dsoLocalEquivalentConst", 
                   "noCFIConst", "constantExpr", "typeConst", "metadataAttachment", 
                   "mdNode", "mdTuple", "metadata", "diArgList", "typeValue", 
                   "value", "inlineAsm", "mdString", "mdFieldOrInt", "diSPFlag", 
                   "funcAttribute", "type", "params", "param", "paramAttribute", 
                   "attrString", "attrPair", "align", "alignPair", "alignStack", 
                   "alignStackPair", "allocKind", "allocSize", "unwindTable", 
                   "vectorScaleRange", "byRefAttr", "byval", "dereferenceable", 
                   "elementType", "inAlloca", "paramAttr", "preallocated", 
                   "structRetAttr", "firstClassType", "concreteType", "intType", 
                   "floatType", "pointerType", "vectorType", "labelType", 
                   "arrayType", "structType", "namedType", "mmxType", "tokenType", 
                   "opaquePointerType", "addrSpace", "threadLocal", "metadataType", 
                   "bitCastExpr", "getElementPtrExpr", "gepIndex", "addrSpaceCastExpr", 
                   "intToPtrExpr", "iCmpExpr", "fCmpExpr", "selectExpr", 
                   "truncExpr", "zExtExpr", "sExtExpr", "fpTruncExpr", "fpExtExpr", 
                   "fpToUiExpr", "fpToSiExpr", "uiToFpExpr", "siToFpExpr", 
                   "ptrToIntExpr", "extractElementExpr", "insertElementExpr", 
                   "shuffleVectorExpr", "shlExpr", "lShrExpr", "aShrExpr", 
                   "andExpr", "orExpr", "xorExpr", "addExpr", "subExpr", 
                   "mulExpr", "fNegExpr", "localDefInst", "valueInstruction", 
                   "storeInst", "syncScope", "fenceInst", "fNegInst", "addInst", 
                   "fAddInst", "subInst", "fSubInst", "mulInst", "fMulInst", 
                   "uDivInst", "sDivInst", "fDivInst", "uRemInst", "sRemInst", 
                   "fRemInst", "shlInst", "lShrInst", "aShrInst", "andInst", 
                   "orInst", "xorInst", "extractElementInst", "insertElementInst", 
                   "shuffleVectorInst", "extractValueInst", "insertValueInst", 
                   "allocaInst", "loadInst", "cmpXchgInst", "atomicRMWInst", 
                   "getElementPtrInst", "truncInst", "zExtInst", "sExtInst", 
                   "fpTruncInst", "fpExtInst", "fpToUiInst", "fpToSiInst", 
                   "uiToFpInst", "siToFpInst", "ptrToIntInst", "intToPtrInst", 
                   "bitCastInst", "addrSpaceCastInst", "iCmpInst", "fCmpInst", 
                   "phiInst", "selectInst", "freezeInst", "callInst", "vaargInst", 
                   "landingPadInst", "catchPadInst", "cleanupPadInst", "inc", 
                   "operandBundle", "clause", "args", "arg", "exceptionArg", 
                   "exceptionPad", "externalLinkage", "internalLinkage", 
                   "linkage", "preemption", "visibility", "dllStorageClass", 
                   "tlsModel", "unnamedAddr", "externallyInitialized", "immutable", 
                   "funcAttr", "distinct", "inBounds", "returnAttr", "overflowFlag", 
                   "iPred", "fPred", "atomicOrdering", "callingConvEnum", 
                   "fastMathFlag", "atomicOp", "floatKind", "specializedMDNode", 
                   "diBasicType", "diCommonBlock", "diCompileUnit", "diCompositeType", 
                   "diCompositeTypeField", "diDerivedType", "diDerivedTypeField", 
                   "diEnumerator", "diEnumeratorField", "diFile", "diFileField", 
                   "diGlobalVariable", "diGlobalVariableField", "diGlobalVariableExpression", 
                   "diGlobalVariableExpressionField", "diImportedEntity", 
                   "diImportedEntityField", "diLabel", "diLabelField", "diLexicalBlock", 
                   "diLexicalBlockField", "diLexicalBlockFile", "diLexicalBlockFileField", 
                   "diLocalVariable", "diLocalVariableField", "diLocation", 
                   "diLocationField", "diMacro", "diMacroField", "diMacroFile", 
                   "diMacroFileField", "diModule", "diModuleField", "diNamespace", 
                   "diNamespaceField", "diObjCProperty", "diObjCPropertyField", 
                   "diStringType", "diStringTypeField", "diSubprogram", 
                   "diSubprogramField", "diSubrange", "diSubrangeField", 
                   "diSubroutineType", "diTemplateTypeParameter", "diTemplateValueParameter", 
                   "genericDiNode", "diTemplateTypeParameterField", "diCompileUnitField", 
                   "diCommonBlockField", "diBasicTypeField", "genericDINodeField", 
                   "tagField", "headerField", "operandsField", "diTemplateValueParameterField", 
                   "nameField", "typeField", "defaultedField", "valueField", 
                   "mdField", "diSubroutineTypeField", "flagsField", "diFlags", 
                   "ccField", "alignField", "allocatedField", "annotationsField", 
                   "argField", "associatedField", "attributesField", "baseTypeField", 
                   "checksumField", "checksumkindField", "columnField", 
                   "configMacrosField", "containingTypeField", "countField", 
                   "debugInfoForProfilingField", "declarationField", "directoryField", 
                   "discriminatorField", "dataLocationField", "discriminatorIntField", 
                   "dwarfAddressSpaceField", "dwoIdField", "elementsField", 
                   "emissionKindField", "encodingField", "entityField", 
                   "enumsField", "exportSymbolsField", "exprField", "extraDataField", 
                   "fileField", "filenameField", "flagsStringField", "getterField", 
                   "globalsField", "identifierField", "importsField", "includePathField", 
                   "inlinedAtField", "isDeclField", "isDefinitionField", 
                   "isImplicitCodeField", "isLocalField", "isOptimizedField", 
                   "isUnsignedField", "apiNotesField", "languageField", 
                   "lineField", "linkageNameField", "lowerBoundField", "macrosField", 
                   "nameTableKindField", "nodesField", "offsetField", "producerField", 
                   "rangesBaseAddressField", "rankField", "retainedNodesField", 
                   "retainedTypesField", "runtimeLangField", "runtimeVersionField", 
                   "scopeField", "scopeLineField", "sdkField", "setterField", 
                   "sizeField", "sourceField", "spFlagsField", "splitDebugFilenameField", 
                   "splitDebugInliningField", "strideField", "stringLengthField", 
                   "stringLengthExpressionField", "stringLocationExpressionField", 
                   "sysrootField", "targetFuncNameField", "templateParamsField", 
                   "thisAdjustmentField", "thrownTypesField", "typeMacinfoField", 
                   "typesField", "unitField", "upperBoundField", "valueIntField", 
                   "valueStringField", "varField", "virtualIndexField", 
                   "virtualityField", "vtableHolderField" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    T__153=154
    T__154=155
    T__155=156
    T__156=157
    T__157=158
    T__158=159
    T__159=160
    T__160=161
    T__161=162
    T__162=163
    T__163=164
    T__164=165
    T__165=166
    T__166=167
    T__167=168
    T__168=169
    T__169=170
    T__170=171
    T__171=172
    T__172=173
    T__173=174
    T__174=175
    T__175=176
    T__176=177
    T__177=178
    T__178=179
    T__179=180
    T__180=181
    T__181=182
    T__182=183
    T__183=184
    T__184=185
    T__185=186
    T__186=187
    T__187=188
    T__188=189
    T__189=190
    T__190=191
    T__191=192
    T__192=193
    T__193=194
    T__194=195
    T__195=196
    T__196=197
    T__197=198
    T__198=199
    T__199=200
    T__200=201
    T__201=202
    T__202=203
    T__203=204
    T__204=205
    T__205=206
    T__206=207
    T__207=208
    T__208=209
    T__209=210
    T__210=211
    T__211=212
    T__212=213
    T__213=214
    T__214=215
    T__215=216
    T__216=217
    T__217=218
    T__218=219
    T__219=220
    T__220=221
    T__221=222
    T__222=223
    T__223=224
    T__224=225
    T__225=226
    T__226=227
    T__227=228
    T__228=229
    T__229=230
    T__230=231
    T__231=232
    T__232=233
    T__233=234
    T__234=235
    T__235=236
    T__236=237
    T__237=238
    T__238=239
    T__239=240
    T__240=241
    T__241=242
    T__242=243
    T__243=244
    T__244=245
    T__245=246
    T__246=247
    T__247=248
    T__248=249
    T__249=250
    T__250=251
    T__251=252
    T__252=253
    T__253=254
    T__254=255
    T__255=256
    T__256=257
    T__257=258
    T__258=259
    T__259=260
    T__260=261
    T__261=262
    T__262=263
    T__263=264
    T__264=265
    T__265=266
    T__266=267
    T__267=268
    T__268=269
    T__269=270
    T__270=271
    T__271=272
    T__272=273
    T__273=274
    T__274=275
    T__275=276
    T__276=277
    T__277=278
    T__278=279
    T__279=280
    T__280=281
    T__281=282
    T__282=283
    T__283=284
    T__284=285
    T__285=286
    T__286=287
    T__287=288
    T__288=289
    T__289=290
    T__290=291
    T__291=292
    T__292=293
    T__293=294
    T__294=295
    T__295=296
    T__296=297
    T__297=298
    T__298=299
    T__299=300
    T__300=301
    T__301=302
    T__302=303
    T__303=304
    T__304=305
    T__305=306
    T__306=307
    T__307=308
    T__308=309
    T__309=310
    T__310=311
    T__311=312
    T__312=313
    T__313=314
    T__314=315
    T__315=316
    T__316=317
    T__317=318
    T__318=319
    T__319=320
    T__320=321
    T__321=322
    T__322=323
    T__323=324
    T__324=325
    T__325=326
    T__326=327
    T__327=328
    T__328=329
    T__329=330
    T__330=331
    T__331=332
    T__332=333
    T__333=334
    T__334=335
    T__335=336
    T__336=337
    T__337=338
    T__338=339
    T__339=340
    T__340=341
    T__341=342
    T__342=343
    T__343=344
    T__344=345
    T__345=346
    T__346=347
    T__347=348
    T__348=349
    T__349=350
    T__350=351
    T__351=352
    T__352=353
    T__353=354
    T__354=355
    T__355=356
    T__356=357
    T__357=358
    T__358=359
    T__359=360
    T__360=361
    T__361=362
    T__362=363
    T__363=364
    T__364=365
    T__365=366
    T__366=367
    T__367=368
    T__368=369
    T__369=370
    T__370=371
    T__371=372
    T__372=373
    T__373=374
    T__374=375
    T__375=376
    T__376=377
    T__377=378
    T__378=379
    T__379=380
    T__380=381
    T__381=382
    T__382=383
    T__383=384
    T__384=385
    T__385=386
    T__386=387
    T__387=388
    T__388=389
    T__389=390
    T__390=391
    T__391=392
    T__392=393
    T__393=394
    T__394=395
    T__395=396
    T__396=397
    T__397=398
    T__398=399
    T__399=400
    T__400=401
    T__401=402
    T__402=403
    T__403=404
    T__404=405
    T__405=406
    T__406=407
    T__407=408
    T__408=409
    T__409=410
    T__410=411
    T__411=412
    T__412=413
    T__413=414
    T__414=415
    T__415=416
    T__416=417
    T__417=418
    T__418=419
    T__419=420
    T__420=421
    T__421=422
    T__422=423
    T__423=424
    T__424=425
    T__425=426
    T__426=427
    T__427=428
    T__428=429
    T__429=430
    T__430=431
    T__431=432
    T__432=433
    T__433=434
    T__434=435
    T__435=436
    T__436=437
    T__437=438
    T__438=439
    T__439=440
    T__440=441
    T__441=442
    T__442=443
    T__443=444
    T__444=445
    T__445=446
    T__446=447
    T__447=448
    T__448=449
    T__449=450
    T__450=451
    T__451=452
    T__452=453
    T__453=454
    T__454=455
    T__455=456
    T__456=457
    T__457=458
    T__458=459
    T__459=460
    T__460=461
    T__461=462
    T__462=463
    T__463=464
    T__464=465
    T__465=466
    T__466=467
    T__467=468
    T__468=469
    T__469=470
    T__470=471
    T__471=472
    T__472=473
    T__473=474
    T__474=475
    T__475=476
    T__476=477
    T__477=478
    T__478=479
    T__479=480
    T__480=481
    T__481=482
    T__482=483
    T__483=484
    T__484=485
    T__485=486
    Comment=487
    WhiteSpace=488
    IntLit=489
    FloatLit=490
    StringLit=491
    GlobalIdent=492
    LocalIdent=493
    LabelIdent=494
    AttrGroupId=495
    ComdatName=496
    MetadataName=497
    MetadataId=498
    IntType=499
    DwarfTag=500
    DwarfAttEncoding=501
    DiFlag=502
    DispFlag=503
    DwarfLang=504
    DwarfCc=505
    ChecksumKind=506
    DwarfVirtuality=507
    DwarfMacinfo=508
    DwarfOp=509

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None

    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(LLVMIRParser.EOF, 0)

        def topLevelEntity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TopLevelEntityContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TopLevelEntityContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = LLVMIRParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 52166730) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & 115) != 0):
                self.state = 792
                self.topLevelEntity()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 798
            self.match(LLVMIRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def targetDataLayout(self):
            return self.getTypedRuleContext(LLVMIRParser.TargetDataLayoutContext,0)


        def targetTriple(self):
            return self.getTypedRuleContext(LLVMIRParser.TargetTripleContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_targetDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetDef" ):
                listener.enterTargetDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetDef" ):
                listener.exitTargetDef(self)




    def targetDef(self):

        localctx = LLVMIRParser.TargetDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_targetDef)
        try:
            self.state = 802
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.targetDataLayout()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.targetTriple()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceFilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_sourceFilename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceFilename" ):
                listener.enterSourceFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceFilename" ):
                listener.exitSourceFilename(self)




    def sourceFilename(self):

        localctx = LLVMIRParser.SourceFilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sourceFilename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(LLVMIRParser.T__0)
            self.state = 805
            self.match(LLVMIRParser.T__1)
            self.state = 806
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetDataLayoutContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_targetDataLayout

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetDataLayout" ):
                listener.enterTargetDataLayout(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetDataLayout" ):
                listener.exitTargetDataLayout(self)




    def targetDataLayout(self):

        localctx = LLVMIRParser.TargetDataLayoutContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_targetDataLayout)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(LLVMIRParser.T__2)
            self.state = 809
            self.match(LLVMIRParser.T__3)
            self.state = 810
            self.match(LLVMIRParser.T__1)
            self.state = 811
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetTripleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_targetTriple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetTriple" ):
                listener.enterTargetTriple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetTriple" ):
                listener.exitTargetTriple(self)




    def targetTriple(self):

        localctx = LLVMIRParser.TargetTripleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_targetTriple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(LLVMIRParser.T__2)
            self.state = 814
            self.match(LLVMIRParser.T__4)
            self.state = 815
            self.match(LLVMIRParser.T__1)
            self.state = 816
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceFilename(self):
            return self.getTypedRuleContext(LLVMIRParser.SourceFilenameContext,0)


        def targetDef(self):
            return self.getTypedRuleContext(LLVMIRParser.TargetDefContext,0)


        def moduleAsm(self):
            return self.getTypedRuleContext(LLVMIRParser.ModuleAsmContext,0)


        def typeDef(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeDefContext,0)


        def comdatDef(self):
            return self.getTypedRuleContext(LLVMIRParser.ComdatDefContext,0)


        def globalDecl(self):
            return self.getTypedRuleContext(LLVMIRParser.GlobalDeclContext,0)


        def globalDef(self):
            return self.getTypedRuleContext(LLVMIRParser.GlobalDefContext,0)


        def indirectSymbolDef(self):
            return self.getTypedRuleContext(LLVMIRParser.IndirectSymbolDefContext,0)


        def funcDecl(self):
            return self.getTypedRuleContext(LLVMIRParser.FuncDeclContext,0)


        def funcDef(self):
            return self.getTypedRuleContext(LLVMIRParser.FuncDefContext,0)


        def attrGroupDef(self):
            return self.getTypedRuleContext(LLVMIRParser.AttrGroupDefContext,0)


        def namedMetadataDef(self):
            return self.getTypedRuleContext(LLVMIRParser.NamedMetadataDefContext,0)


        def metadataDef(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataDefContext,0)


        def useListOrder(self):
            return self.getTypedRuleContext(LLVMIRParser.UseListOrderContext,0)


        def useListOrderBB(self):
            return self.getTypedRuleContext(LLVMIRParser.UseListOrderBBContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_topLevelEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelEntity" ):
                listener.enterTopLevelEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelEntity" ):
                listener.exitTopLevelEntity(self)




    def topLevelEntity(self):

        localctx = LLVMIRParser.TopLevelEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_topLevelEntity)
        try:
            self.state = 833
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.sourceFilename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.targetDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 820
                self.moduleAsm()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 821
                self.typeDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 822
                self.comdatDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 823
                self.globalDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 824
                self.globalDef()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 825
                self.indirectSymbolDef()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 826
                self.funcDecl()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 827
                self.funcDef()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 828
                self.attrGroupDef()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 829
                self.namedMetadataDef()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 830
                self.metadataDef()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 831
                self.useListOrder()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 832
                self.useListOrderBB()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleAsmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_moduleAsm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAsm" ):
                listener.enterModuleAsm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAsm" ):
                listener.exitModuleAsm(self)




    def moduleAsm(self):

        localctx = LLVMIRParser.ModuleAsmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_moduleAsm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(LLVMIRParser.T__5)
            self.state = 836
            self.match(LLVMIRParser.T__6)
            self.state = 837
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_typeDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDef" ):
                listener.enterTypeDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDef" ):
                listener.exitTypeDef(self)




    def typeDef(self):

        localctx = LLVMIRParser.TypeDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(LLVMIRParser.LocalIdent)
            self.state = 840
            self.match(LLVMIRParser.T__1)
            self.state = 841
            self.match(LLVMIRParser.T__7)
            self.state = 842
            self.type_(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComdatDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.selectionKind = None # Token

        def ComdatName(self):
            return self.getToken(LLVMIRParser.ComdatName, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_comdatDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComdatDef" ):
                listener.enterComdatDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComdatDef" ):
                listener.exitComdatDef(self)




    def comdatDef(self):

        localctx = LLVMIRParser.ComdatDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_comdatDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(LLVMIRParser.ComdatName)
            self.state = 845
            self.match(LLVMIRParser.T__1)
            self.state = 846
            self.match(LLVMIRParser.T__8)
            self.state = 847
            localctx.selectionKind = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 31744) != 0)):
                localctx.selectionKind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def externalLinkage(self):
            return self.getTypedRuleContext(LLVMIRParser.ExternalLinkageContext,0)


        def immutable(self):
            return self.getTypedRuleContext(LLVMIRParser.ImmutableContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def preemption(self):
            return self.getTypedRuleContext(LLVMIRParser.PreemptionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMIRParser.VisibilityContext,0)


        def dllStorageClass(self):
            return self.getTypedRuleContext(LLVMIRParser.DllStorageClassContext,0)


        def threadLocal(self):
            return self.getTypedRuleContext(LLVMIRParser.ThreadLocalContext,0)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMIRParser.UnnamedAddrContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def externallyInitialized(self):
            return self.getTypedRuleContext(LLVMIRParser.ExternallyInitializedContext,0)


        def globalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.GlobalFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.GlobalFieldContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def funcAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FuncAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FuncAttributeContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_globalDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalDecl" ):
                listener.enterGlobalDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalDecl" ):
                listener.exitGlobalDecl(self)




    def globalDecl(self):

        localctx = LLVMIRParser.GlobalDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_globalDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(LLVMIRParser.GlobalIdent)
            self.state = 850
            self.match(LLVMIRParser.T__1)
            self.state = 851
            self.externalLinkage()
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198 or _la==199:
                self.state = 852
                self.preemption()


            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 7) != 0):
                self.state = 855
                self.visibility()


            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203 or _la==204:
                self.state = 858
                self.dllStorageClass()


            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 861
                self.threadLocal()


            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==209:
                self.state = 864
                self.unnamedAddr()


            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 867
                self.addrSpace()


            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 870
                self.externallyInitialized()


            self.state = 873
            self.immutable()
            self.state = 874
            self.type_(0)
            self.state = 879
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 875
                    self.match(LLVMIRParser.T__14)
                    self.state = 876
                    self.globalField() 
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 882
                self.match(LLVMIRParser.T__14)
                self.state = 883
                self.metadataAttachment()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 45255899262222337) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0) or _la==491 or _la==495:
                self.state = 889
                self.funcAttribute()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def immutable(self):
            return self.getTypedRuleContext(LLVMIRParser.ImmutableContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMIRParser.ConstantContext,0)


        def internalLinkage(self):
            return self.getTypedRuleContext(LLVMIRParser.InternalLinkageContext,0)


        def preemption(self):
            return self.getTypedRuleContext(LLVMIRParser.PreemptionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMIRParser.VisibilityContext,0)


        def dllStorageClass(self):
            return self.getTypedRuleContext(LLVMIRParser.DllStorageClassContext,0)


        def threadLocal(self):
            return self.getTypedRuleContext(LLVMIRParser.ThreadLocalContext,0)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMIRParser.UnnamedAddrContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def externallyInitialized(self):
            return self.getTypedRuleContext(LLVMIRParser.ExternallyInitializedContext,0)


        def globalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.GlobalFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.GlobalFieldContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def funcAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FuncAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FuncAttributeContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_globalDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalDef" ):
                listener.enterGlobalDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalDef" ):
                listener.exitGlobalDef(self)




    def globalDef(self):

        localctx = LLVMIRParser.GlobalDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_globalDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(LLVMIRParser.GlobalIdent)
            self.state = 896
            self.match(LLVMIRParser.T__1)
            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 33423361) != 0):
                self.state = 897
                self.internalLinkage()


            self.state = 901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198 or _la==199:
                self.state = 900
                self.preemption()


            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 7) != 0):
                self.state = 903
                self.visibility()


            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203 or _la==204:
                self.state = 906
                self.dllStorageClass()


            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 909
                self.threadLocal()


            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==209:
                self.state = 912
                self.unnamedAddr()


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 915
                self.addrSpace()


            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==210:
                self.state = 918
                self.externallyInitialized()


            self.state = 921
            self.immutable()
            self.state = 922
            self.type_(0)
            self.state = 923
            self.constant()
            self.state = 928
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 924
                    self.match(LLVMIRParser.T__14)
                    self.state = 925
                    self.globalField() 
                self.state = 930
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 931
                self.match(LLVMIRParser.T__14)
                self.state = 932
                self.metadataAttachment()
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 45255899262222337) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0) or _la==491 or _la==495:
                self.state = 938
                self.funcAttribute()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectSymbolDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indirectSymbolKind = None # Token

        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def indirectSymbol(self):
            return self.getTypedRuleContext(LLVMIRParser.IndirectSymbolContext,0)


        def linkage(self):
            return self.getTypedRuleContext(LLVMIRParser.LinkageContext,0)


        def preemption(self):
            return self.getTypedRuleContext(LLVMIRParser.PreemptionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMIRParser.VisibilityContext,0)


        def dllStorageClass(self):
            return self.getTypedRuleContext(LLVMIRParser.DllStorageClassContext,0)


        def threadLocal(self):
            return self.getTypedRuleContext(LLVMIRParser.ThreadLocalContext,0)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMIRParser.UnnamedAddrContext,0)


        def partition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.PartitionContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.PartitionContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_indirectSymbolDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectSymbolDef" ):
                listener.enterIndirectSymbolDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectSymbolDef" ):
                listener.exitIndirectSymbolDef(self)




    def indirectSymbolDef(self):

        localctx = LLVMIRParser.IndirectSymbolDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_indirectSymbolDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(LLVMIRParser.GlobalIdent)
            self.state = 945
            self.match(LLVMIRParser.T__1)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 33521665) != 0):
                self.state = 946
                self.linkage()


            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198 or _la==199:
                self.state = 949
                self.preemption()


            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 7) != 0):
                self.state = 952
                self.visibility()


            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203 or _la==204:
                self.state = 955
                self.dllStorageClass()


            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 958
                self.threadLocal()


            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==209:
                self.state = 961
                self.unnamedAddr()


            self.state = 964
            localctx.indirectSymbolKind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==16 or _la==17):
                localctx.indirectSymbolKind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 965
            self.type_(0)
            self.state = 966
            self.match(LLVMIRParser.T__14)
            self.state = 967
            self.indirectSymbol()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 968
                self.match(LLVMIRParser.T__14)
                self.state = 969
                self.partition()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcHeader(self):
            return self.getTypedRuleContext(LLVMIRParser.FuncHeaderContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_funcDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDecl" ):
                listener.enterFuncDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDecl" ):
                listener.exitFuncDecl(self)




    def funcDecl(self):

        localctx = LLVMIRParser.FuncDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_funcDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(LLVMIRParser.T__17)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==497:
                self.state = 976
                self.metadataAttachment()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 982
            self.funcHeader()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcHeader(self):
            return self.getTypedRuleContext(LLVMIRParser.FuncHeaderContext,0)


        def funcBody(self):
            return self.getTypedRuleContext(LLVMIRParser.FuncBodyContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_funcDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDef" ):
                listener.enterFuncDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDef" ):
                listener.exitFuncDef(self)




    def funcDef(self):

        localctx = LLVMIRParser.FuncDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_funcDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(LLVMIRParser.T__18)
            self.state = 985
            self.funcHeader()
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==497:
                self.state = 986
                self.metadataAttachment()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 992
            self.funcBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrGroupDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AttrGroupId(self):
            return self.getToken(LLVMIRParser.AttrGroupId, 0)

        def funcAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FuncAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FuncAttributeContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_attrGroupDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrGroupDef" ):
                listener.enterAttrGroupDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrGroupDef" ):
                listener.exitAttrGroupDef(self)




    def attrGroupDef(self):

        localctx = LLVMIRParser.AttrGroupDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_attrGroupDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(LLVMIRParser.T__19)
            self.state = 995
            self.match(LLVMIRParser.AttrGroupId)
            self.state = 996
            self.match(LLVMIRParser.T__1)
            self.state = 997
            self.match(LLVMIRParser.T__20)
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 45255899262222337) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0) or _la==491 or _la==495:
                self.state = 998
                self.funcAttribute()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1004
            self.match(LLVMIRParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedMetadataDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetadataName(self):
            return self.getToken(LLVMIRParser.MetadataName, 0)

        def metadataNode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataNodeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataNodeContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_namedMetadataDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedMetadataDef" ):
                listener.enterNamedMetadataDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedMetadataDef" ):
                listener.exitNamedMetadataDef(self)




    def namedMetadataDef(self):

        localctx = LLVMIRParser.NamedMetadataDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_namedMetadataDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(LLVMIRParser.MetadataName)
            self.state = 1007
            self.match(LLVMIRParser.T__1)
            self.state = 1008
            self.match(LLVMIRParser.T__22)
            self.state = 1009
            self.match(LLVMIRParser.T__20)
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53 or _la==498:
                self.state = 1010
                self.metadataNode()
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1011
                    self.match(LLVMIRParser.T__14)
                    self.state = 1012
                    self.metadataNode()
                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1020
            self.match(LLVMIRParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataDefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetadataId(self):
            return self.getToken(LLVMIRParser.MetadataId, 0)

        def mdTuple(self):
            return self.getTypedRuleContext(LLVMIRParser.MdTupleContext,0)


        def specializedMDNode(self):
            return self.getTypedRuleContext(LLVMIRParser.SpecializedMDNodeContext,0)


        def distinct(self):
            return self.getTypedRuleContext(LLVMIRParser.DistinctContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_metadataDef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataDef" ):
                listener.enterMetadataDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataDef" ):
                listener.exitMetadataDef(self)




    def metadataDef(self):

        localctx = LLVMIRParser.MetadataDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_metadataDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(LLVMIRParser.MetadataId)
            self.state = 1023
            self.match(LLVMIRParser.T__1)
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==263:
                self.state = 1024
                self.distinct()


            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.state = 1027
                self.mdTuple()
                pass
            elif token in [53, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386]:
                self.state = 1028
                self.specializedMDNode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseListOrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def IntLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.IntLit)
            else:
                return self.getToken(LLVMIRParser.IntLit, i)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_useListOrder

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseListOrder" ):
                listener.enterUseListOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseListOrder" ):
                listener.exitUseListOrder(self)




    def useListOrder(self):

        localctx = LLVMIRParser.UseListOrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_useListOrder)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(LLVMIRParser.T__23)
            self.state = 1032
            self.typeValue()
            self.state = 1033
            self.match(LLVMIRParser.T__14)
            self.state = 1034
            self.match(LLVMIRParser.T__20)
            self.state = 1035
            self.match(LLVMIRParser.IntLit)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1036
                self.match(LLVMIRParser.T__14)
                self.state = 1037
                self.match(LLVMIRParser.IntLit)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1043
            self.match(LLVMIRParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseListOrderBBContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def IntLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.IntLit)
            else:
                return self.getToken(LLVMIRParser.IntLit, i)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_useListOrderBB

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseListOrderBB" ):
                listener.enterUseListOrderBB(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseListOrderBB" ):
                listener.exitUseListOrderBB(self)




    def useListOrderBB(self):

        localctx = LLVMIRParser.UseListOrderBBContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_useListOrderBB)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(LLVMIRParser.T__24)
            self.state = 1046
            self.match(LLVMIRParser.GlobalIdent)
            self.state = 1047
            self.match(LLVMIRParser.T__14)
            self.state = 1048
            self.match(LLVMIRParser.LocalIdent)
            self.state = 1049
            self.match(LLVMIRParser.T__14)
            self.state = 1050
            self.match(LLVMIRParser.T__20)
            self.state = 1051
            self.match(LLVMIRParser.IntLit)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1052
                self.match(LLVMIRParser.T__14)
                self.state = 1053
                self.match(LLVMIRParser.IntLit)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1059
            self.match(LLVMIRParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def params(self):
            return self.getTypedRuleContext(LLVMIRParser.ParamsContext,0)


        def linkage(self):
            return self.getTypedRuleContext(LLVMIRParser.LinkageContext,0)


        def preemption(self):
            return self.getTypedRuleContext(LLVMIRParser.PreemptionContext,0)


        def visibility(self):
            return self.getTypedRuleContext(LLVMIRParser.VisibilityContext,0)


        def dllStorageClass(self):
            return self.getTypedRuleContext(LLVMIRParser.DllStorageClassContext,0)


        def callingConv(self):
            return self.getTypedRuleContext(LLVMIRParser.CallingConvContext,0)


        def returnAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ReturnAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ReturnAttributeContext,i)


        def unnamedAddr(self):
            return self.getTypedRuleContext(LLVMIRParser.UnnamedAddrContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def funcHdrField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FuncHdrFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FuncHdrFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_funcHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncHeader" ):
                listener.enterFuncHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncHeader" ):
                listener.exitFuncHeader(self)




    def funcHeader(self):

        localctx = LLVMIRParser.FuncHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_funcHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 33521665) != 0):
                self.state = 1061
                self.linkage()


            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==198 or _la==199:
                self.state = 1064
                self.preemption()


            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 7) != 0):
                self.state = 1067
                self.visibility()


            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==203 or _la==204:
                self.state = 1070
                self.dllStorageClass()


            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28 or ((((_la - 293)) & ~0x3f) == 0 and ((1 << (_la - 293)) & 35184372088831) != 0):
                self.state = 1073
                self.callingConv()


            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 4338307) != 0):
                self.state = 1076
                self.returnAttribute()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1082
            self.type_(0)
            self.state = 1083
            self.match(LLVMIRParser.GlobalIdent)
            self.state = 1084
            self.match(LLVMIRParser.T__25)
            self.state = 1085
            self.params()
            self.state = 1086
            self.match(LLVMIRParser.T__26)
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==208 or _la==209:
                self.state = 1087
                self.unnamedAddr()


            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1090
                self.addrSpace()


            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1008806324584055296) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 172637555169) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0) or _la==491 or _la==495:
                self.state = 1093
                self.funcHdrField()
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectSymbolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def bitCastExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.BitCastExprContext,0)


        def getElementPtrExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.GetElementPtrExprContext,0)


        def addrSpaceCastExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceCastExprContext,0)


        def intToPtrExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.IntToPtrExprContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_indirectSymbol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectSymbol" ):
                listener.enterIndirectSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectSymbol" ):
                listener.exitIndirectSymbol(self)




    def indirectSymbol(self):

        localctx = LLVMIRParser.IndirectSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_indirectSymbol)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 34, 37, 51, 64, 77, 116, 117, 118, 121, 354, 355, 356, 357, 358, 359, 360, 493, 499]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1099
                self.typeConst()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.bitCastExpr()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1101
                self.getElementPtrExpr()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1102
                self.addrSpaceCastExpr()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1103
                self.intToPtrExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallingConvContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callingConvEnum(self):
            return self.getTypedRuleContext(LLVMIRParser.CallingConvEnumContext,0)


        def callingConvInt(self):
            return self.getTypedRuleContext(LLVMIRParser.CallingConvIntContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_callingConv

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallingConv" ):
                listener.enterCallingConv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallingConv" ):
                listener.exitCallingConv(self)




    def callingConv(self):

        localctx = LLVMIRParser.CallingConvContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_callingConv)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.callingConvEnum()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.callingConvInt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallingConvIntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_callingConvInt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallingConvInt" ):
                listener.enterCallingConvInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallingConvInt" ):
                listener.exitCallingConvInt(self)




    def callingConvInt(self):

        localctx = LLVMIRParser.CallingConvIntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_callingConvInt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(LLVMIRParser.T__27)
            self.state = 1111
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncHdrFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcAttribute(self):
            return self.getTypedRuleContext(LLVMIRParser.FuncAttributeContext,0)


        def section(self):
            return self.getTypedRuleContext(LLVMIRParser.SectionContext,0)


        def partition(self):
            return self.getTypedRuleContext(LLVMIRParser.PartitionContext,0)


        def comdat(self):
            return self.getTypedRuleContext(LLVMIRParser.ComdatContext,0)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def gc(self):
            return self.getTypedRuleContext(LLVMIRParser.GcContext,0)


        def prefix(self):
            return self.getTypedRuleContext(LLVMIRParser.PrefixContext,0)


        def prologue(self):
            return self.getTypedRuleContext(LLVMIRParser.PrologueContext,0)


        def personality(self):
            return self.getTypedRuleContext(LLVMIRParser.PersonalityContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_funcHdrField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncHdrField" ):
                listener.enterFuncHdrField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncHdrField" ):
                listener.exitFuncHdrField(self)




    def funcHdrField(self):

        localctx = LLVMIRParser.FuncHdrFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_funcHdrField)
        try:
            self.state = 1122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.funcAttribute()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.section()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1115
                self.partition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1116
                self.comdat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1117
                self.align()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1118
                self.gc()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1119
                self.prefix()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1120
                self.prologue()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1121
                self.personality()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_gc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGc" ):
                listener.enterGc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGc" ):
                listener.exitGc(self)




    def gc(self):

        localctx = LLVMIRParser.GcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_gc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.match(LLVMIRParser.T__28)
            self.state = 1125
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefix" ):
                listener.enterPrefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefix" ):
                listener.exitPrefix(self)




    def prefix(self):

        localctx = LLVMIRParser.PrefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.match(LLVMIRParser.T__29)
            self.state = 1128
            self.typeConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrologueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_prologue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrologue" ):
                listener.enterPrologue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrologue" ):
                listener.exitPrologue(self)




    def prologue(self):

        localctx = LLVMIRParser.PrologueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_prologue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(LLVMIRParser.T__30)
            self.state = 1131
            self.typeConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PersonalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_personality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPersonality" ):
                listener.enterPersonality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPersonality" ):
                listener.exitPersonality(self)




    def personality(self):

        localctx = LLVMIRParser.PersonalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_personality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(LLVMIRParser.T__31)
            self.state = 1134
            self.typeConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnAttr(self):
            return self.getTypedRuleContext(LLVMIRParser.ReturnAttrContext,0)


        def dereferenceable(self):
            return self.getTypedRuleContext(LLVMIRParser.DereferenceableContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_returnAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnAttribute" ):
                listener.enterReturnAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnAttribute" ):
                listener.exitReturnAttribute(self)




    def returnAttribute(self):

        localctx = LLVMIRParser.ReturnAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_returnAttribute)
        try:
            self.state = 1138
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96, 98, 101, 102, 106, 111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1136
                self.returnAttr()
                pass
            elif token in [89, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1137
                self.dereferenceable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.BasicBlockContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.BasicBlockContext,i)


        def useListOrder(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.UseListOrderContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.UseListOrderContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_funcBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncBody" ):
                listener.enterFuncBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncBody" ):
                listener.exitFuncBody(self)




    def funcBody(self):

        localctx = LLVMIRParser.FuncBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_funcBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(LLVMIRParser.T__20)
            self.state = 1142 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1141
                self.basicBlock()
                self.state = 1144 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1077083308556288) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & -2308094869165309957) != 0) or _la==493 or _la==494):
                    break

            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==24:
                self.state = 1146
                self.useListOrder()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.match(LLVMIRParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def terminator(self):
            return self.getTypedRuleContext(LLVMIRParser.TerminatorContext,0)


        def LabelIdent(self):
            return self.getToken(LLVMIRParser.LabelIdent, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.InstructionContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.InstructionContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_basicBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicBlock" ):
                listener.enterBasicBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicBlock" ):
                listener.exitBasicBlock(self)




    def basicBlock(self):

        localctx = LLVMIRParser.BasicBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_basicBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==494:
                self.state = 1154
                self.match(LLVMIRParser.LabelIdent)


            self.state = 1160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1157
                    self.instruction() 
                self.state = 1162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

            self.state = 1163
            self.terminator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localDefInst(self):
            return self.getTypedRuleContext(LLVMIRParser.LocalDefInstContext,0)


        def valueInstruction(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueInstructionContext,0)


        def storeInst(self):
            return self.getTypedRuleContext(LLVMIRParser.StoreInstContext,0)


        def fenceInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FenceInstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)




    def instruction(self):

        localctx = LLVMIRParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_instruction)
        try:
            self.state = 1169
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [493]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1165
                self.localDefInst()
                pass
            elif token in [122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1166
                self.valueInstruction()
                pass
            elif token in [154]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1167
                self.storeInst()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1168
                self.fenceInst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TerminatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localDefTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.LocalDefTermContext,0)


        def valueTerminator(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueTerminatorContext,0)


        def retTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.RetTermContext,0)


        def brTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.BrTermContext,0)


        def condBrTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.CondBrTermContext,0)


        def switchTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.SwitchTermContext,0)


        def indirectBrTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.IndirectBrTermContext,0)


        def resumeTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.ResumeTermContext,0)


        def catchRetTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.CatchRetTermContext,0)


        def cleanupRetTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.CleanupRetTermContext,0)


        def unreachableTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.UnreachableTermContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_terminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminator" ):
                listener.enterTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminator" ):
                listener.exitTerminator(self)




    def terminator(self):

        localctx = LLVMIRParser.TerminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_terminator)
        try:
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1171
                self.localDefTerm()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1172
                self.valueTerminator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1173
                self.retTerm()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1174
                self.brTerm()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1175
                self.condBrTerm()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1176
                self.switchTerm()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1177
                self.indirectBrTerm()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1178
                self.resumeTerm()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1179
                self.catchRetTerm()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1180
                self.cleanupRetTerm()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1181
                self.unreachableTerm()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalDefTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def valueTerminator(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueTerminatorContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_localDefTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalDefTerm" ):
                listener.enterLocalDefTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalDefTerm" ):
                listener.exitLocalDefTerm(self)




    def localDefTerm(self):

        localctx = LLVMIRParser.LocalDefTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_localDefTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(LLVMIRParser.LocalIdent)
            self.state = 1185
            self.match(LLVMIRParser.T__1)
            self.state = 1186
            self.valueTerminator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueTerminatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def invokeTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.InvokeTermContext,0)


        def callBrTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.CallBrTermContext,0)


        def catchSwitchTerm(self):
            return self.getTypedRuleContext(LLVMIRParser.CatchSwitchTermContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_valueTerminator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueTerminator" ):
                listener.enterValueTerminator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueTerminator" ):
                listener.exitValueTerminator(self)




    def valueTerminator(self):

        localctx = LLVMIRParser.ValueTerminatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_valueTerminator)
        try:
            self.state = 1191
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1188
                self.invokeTerm()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1189
                self.callBrTerm()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1190
                self.catchSwitchTerm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def concreteType(self):
            return self.getTypedRuleContext(LLVMIRParser.ConcreteTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_retTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetTerm" ):
                listener.enterRetTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetTerm" ):
                listener.exitRetTerm(self)




    def retTerm(self):

        localctx = LLVMIRParser.RetTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_retTerm)
        self._la = 0 # Token type
        try:
            self.state = 1212
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.match(LLVMIRParser.T__32)
                self.state = 1194
                self.match(LLVMIRParser.T__33)
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1195
                    self.match(LLVMIRParser.T__14)
                    self.state = 1196
                    self.metadataAttachment()
                    self.state = 1201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1202
                self.match(LLVMIRParser.T__32)
                self.state = 1203
                self.concreteType()
                self.state = 1204
                self.value()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1205
                    self.match(LLVMIRParser.T__14)
                    self.state = 1206
                    self.metadataAttachment()
                    self.state = 1211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(LLVMIRParser.LabelContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_brTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBrTerm" ):
                listener.enterBrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBrTerm" ):
                listener.exitBrTerm(self)




    def brTerm(self):

        localctx = LLVMIRParser.BrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_brTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(LLVMIRParser.T__34)
            self.state = 1215
            self.label()
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1216
                self.match(LLVMIRParser.T__14)
                self.state = 1217
                self.metadataAttachment()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondBrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntType(self):
            return self.getToken(LLVMIRParser.IntType, 0)

        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.LabelContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.LabelContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_condBrTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondBrTerm" ):
                listener.enterCondBrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondBrTerm" ):
                listener.exitCondBrTerm(self)




    def condBrTerm(self):

        localctx = LLVMIRParser.CondBrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_condBrTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(LLVMIRParser.T__34)
            self.state = 1224
            self.match(LLVMIRParser.IntType)
            self.state = 1225
            self.value()
            self.state = 1226
            self.match(LLVMIRParser.T__14)
            self.state = 1227
            self.label()
            self.state = 1228
            self.match(LLVMIRParser.T__14)
            self.state = 1229
            self.label()
            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1230
                self.match(LLVMIRParser.T__14)
                self.state = 1231
                self.metadataAttachment()
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def label(self):
            return self.getTypedRuleContext(LLVMIRParser.LabelContext,0)


        def case(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.CaseContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.CaseContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_switchTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchTerm" ):
                listener.enterSwitchTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchTerm" ):
                listener.exitSwitchTerm(self)




    def switchTerm(self):

        localctx = LLVMIRParser.SwitchTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_switchTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(LLVMIRParser.T__35)
            self.state = 1238
            self.typeValue()
            self.state = 1239
            self.match(LLVMIRParser.T__14)
            self.state = 1240
            self.label()
            self.state = 1241
            self.match(LLVMIRParser.T__36)
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                self.state = 1242
                self.case()
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1248
            self.match(LLVMIRParser.T__37)
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1249
                self.match(LLVMIRParser.T__14)
                self.state = 1250
                self.metadataAttachment()
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndirectBrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.LabelContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.LabelContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_indirectBrTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectBrTerm" ):
                listener.enterIndirectBrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectBrTerm" ):
                listener.exitIndirectBrTerm(self)




    def indirectBrTerm(self):

        localctx = LLVMIRParser.IndirectBrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_indirectBrTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1256
            self.match(LLVMIRParser.T__38)
            self.state = 1257
            self.typeValue()
            self.state = 1258
            self.match(LLVMIRParser.T__14)
            self.state = 1259
            self.match(LLVMIRParser.T__36)
            self.state = 1265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1260
                self.label()
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 1261
                    self.match(LLVMIRParser.T__14)
                    self.state = 1262
                    self.label()




            self.state = 1267
            self.match(LLVMIRParser.T__37)
            self.state = 1272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1268
                self.match(LLVMIRParser.T__14)
                self.state = 1269
                self.metadataAttachment()
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResumeTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_resumeTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResumeTerm" ):
                listener.enterResumeTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResumeTerm" ):
                listener.exitResumeTerm(self)




    def resumeTerm(self):

        localctx = LLVMIRParser.ResumeTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_resumeTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(LLVMIRParser.T__39)
            self.state = 1276
            self.typeValue()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1277
                self.match(LLVMIRParser.T__14)
                self.state = 1278
                self.metadataAttachment()
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchRetTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def label(self):
            return self.getTypedRuleContext(LLVMIRParser.LabelContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_catchRetTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchRetTerm" ):
                listener.enterCatchRetTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchRetTerm" ):
                listener.exitCatchRetTerm(self)




    def catchRetTerm(self):

        localctx = LLVMIRParser.CatchRetTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_catchRetTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(LLVMIRParser.T__40)
            self.state = 1285
            self.match(LLVMIRParser.T__41)
            self.state = 1286
            self.value()
            self.state = 1287
            self.match(LLVMIRParser.T__42)
            self.state = 1288
            self.label()
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1289
                self.match(LLVMIRParser.T__14)
                self.state = 1290
                self.metadataAttachment()
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CleanupRetTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def unwindTarget(self):
            return self.getTypedRuleContext(LLVMIRParser.UnwindTargetContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_cleanupRetTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCleanupRetTerm" ):
                listener.enterCleanupRetTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCleanupRetTerm" ):
                listener.exitCleanupRetTerm(self)




    def cleanupRetTerm(self):

        localctx = LLVMIRParser.CleanupRetTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_cleanupRetTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(LLVMIRParser.T__43)
            self.state = 1297
            self.match(LLVMIRParser.T__41)
            self.state = 1298
            self.value()
            self.state = 1299
            self.match(LLVMIRParser.T__44)
            self.state = 1300
            self.unwindTarget()
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1301
                self.match(LLVMIRParser.T__14)
                self.state = 1302
                self.metadataAttachment()
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnreachableTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_unreachableTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnreachableTerm" ):
                listener.enterUnreachableTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnreachableTerm" ):
                listener.exitUnreachableTerm(self)




    def unreachableTerm(self):

        localctx = LLVMIRParser.UnreachableTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_unreachableTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1308
            self.match(LLVMIRParser.T__45)
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1309
                self.match(LLVMIRParser.T__14)
                self.state = 1310
                self.metadataAttachment()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InvokeTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def args(self):
            return self.getTypedRuleContext(LLVMIRParser.ArgsContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.LabelContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.LabelContext,i)


        def callingConv(self):
            return self.getTypedRuleContext(LLVMIRParser.CallingConvContext,0)


        def returnAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ReturnAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ReturnAttributeContext,i)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def funcAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FuncAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FuncAttributeContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def operandBundle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OperandBundleContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OperandBundleContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_invokeTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvokeTerm" ):
                listener.enterInvokeTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvokeTerm" ):
                listener.exitInvokeTerm(self)




    def invokeTerm(self):

        localctx = LLVMIRParser.InvokeTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_invokeTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(LLVMIRParser.T__46)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28 or ((((_la - 293)) & ~0x3f) == 0 and ((1 << (_la - 293)) & 35184372088831) != 0):
                self.state = 1317
                self.callingConv()


            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 4338307) != 0):
                self.state = 1320
                self.returnAttribute()
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1326
                self.addrSpace()


            self.state = 1329
            self.type_(0)
            self.state = 1330
            self.value()
            self.state = 1331
            self.match(LLVMIRParser.T__25)
            self.state = 1332
            self.args()
            self.state = 1333
            self.match(LLVMIRParser.T__26)
            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 45255899262222337) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0) or _la==491 or _la==495:
                self.state = 1334
                self.funcAttribute()
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1340
                self.match(LLVMIRParser.T__36)
                self.state = 1344 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1341
                    self.operandBundle()
                    self.state = 1342
                    self.match(LLVMIRParser.T__14)
                    self.state = 1346 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==491):
                        break

                self.state = 1348
                self.match(LLVMIRParser.T__37)


            self.state = 1352
            self.match(LLVMIRParser.T__42)
            self.state = 1353
            self.label()
            self.state = 1354
            self.match(LLVMIRParser.T__44)
            self.state = 1355
            self.label()
            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1356
                self.match(LLVMIRParser.T__14)
                self.state = 1357
                self.metadataAttachment()
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallBrTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def args(self):
            return self.getTypedRuleContext(LLVMIRParser.ArgsContext,0)


        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.LabelContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.LabelContext,i)


        def callingConv(self):
            return self.getTypedRuleContext(LLVMIRParser.CallingConvContext,0)


        def returnAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ReturnAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ReturnAttributeContext,i)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def funcAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FuncAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FuncAttributeContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def operandBundle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OperandBundleContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OperandBundleContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_callBrTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallBrTerm" ):
                listener.enterCallBrTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallBrTerm" ):
                listener.exitCallBrTerm(self)




    def callBrTerm(self):

        localctx = LLVMIRParser.CallBrTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_callBrTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(LLVMIRParser.T__47)
            self.state = 1365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28 or ((((_la - 293)) & ~0x3f) == 0 and ((1 << (_la - 293)) & 35184372088831) != 0):
                self.state = 1364
                self.callingConv()


            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 4338307) != 0):
                self.state = 1367
                self.returnAttribute()
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 1373
                self.addrSpace()


            self.state = 1376
            self.type_(0)
            self.state = 1377
            self.value()
            self.state = 1378
            self.match(LLVMIRParser.T__25)
            self.state = 1379
            self.args()
            self.state = 1380
            self.match(LLVMIRParser.T__26)
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 45255899262222337) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0) or _la==491 or _la==495:
                self.state = 1381
                self.funcAttribute()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1387
                self.match(LLVMIRParser.T__36)
                self.state = 1391 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1388
                    self.operandBundle()
                    self.state = 1389
                    self.match(LLVMIRParser.T__14)
                    self.state = 1393 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==491):
                        break

                self.state = 1395
                self.match(LLVMIRParser.T__37)


            self.state = 1399
            self.match(LLVMIRParser.T__42)
            self.state = 1400
            self.label()
            self.state = 1401
            self.match(LLVMIRParser.T__36)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 1402
                self.label()
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1403
                    self.match(LLVMIRParser.T__14)
                    self.state = 1404
                    self.label()
                    self.state = 1409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1412
            self.match(LLVMIRParser.T__37)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1413
                self.match(LLVMIRParser.T__14)
                self.state = 1414
                self.metadataAttachment()
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchSwitchTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exceptionPad(self):
            return self.getTypedRuleContext(LLVMIRParser.ExceptionPadContext,0)


        def handlers(self):
            return self.getTypedRuleContext(LLVMIRParser.HandlersContext,0)


        def unwindTarget(self):
            return self.getTypedRuleContext(LLVMIRParser.UnwindTargetContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_catchSwitchTerm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchSwitchTerm" ):
                listener.enterCatchSwitchTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchSwitchTerm" ):
                listener.exitCatchSwitchTerm(self)




    def catchSwitchTerm(self):

        localctx = LLVMIRParser.CatchSwitchTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_catchSwitchTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(LLVMIRParser.T__48)
            self.state = 1421
            self.match(LLVMIRParser.T__49)
            self.state = 1422
            self.exceptionPad()
            self.state = 1423
            self.match(LLVMIRParser.T__36)
            self.state = 1424
            self.handlers()
            self.state = 1425
            self.match(LLVMIRParser.T__37)
            self.state = 1426
            self.match(LLVMIRParser.T__44)
            self.state = 1427
            self.unwindTarget()
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1428
                self.match(LLVMIRParser.T__14)
                self.state = 1429
                self.metadataAttachment()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = LLVMIRParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self.match(LLVMIRParser.T__50)
            self.state = 1436
            self.match(LLVMIRParser.LocalIdent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def label(self):
            return self.getTypedRuleContext(LLVMIRParser.LabelContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase" ):
                listener.enterCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase" ):
                listener.exitCase(self)




    def case(self):

        localctx = LLVMIRParser.CaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.typeConst()
            self.state = 1439
            self.match(LLVMIRParser.T__14)
            self.state = 1440
            self.label()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnwindTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(LLVMIRParser.LabelContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_unwindTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnwindTarget" ):
                listener.enterUnwindTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnwindTarget" ):
                listener.exitUnwindTarget(self)




    def unwindTarget(self):

        localctx = LLVMIRParser.UnwindTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_unwindTarget)
        try:
            self.state = 1445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1442
                self.match(LLVMIRParser.T__42)
                self.state = 1443
                self.match(LLVMIRParser.T__51)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self.label()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.LabelContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.LabelContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_handlers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlers" ):
                listener.enterHandlers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlers" ):
                listener.exitHandlers(self)




    def handlers(self):

        localctx = LLVMIRParser.HandlersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_handlers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.label()
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 1448
                self.match(LLVMIRParser.T__14)
                self.state = 1449
                self.label()
                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetadataId(self):
            return self.getToken(LLVMIRParser.MetadataId, 0)

        def diExpression(self):
            return self.getTypedRuleContext(LLVMIRParser.DiExpressionContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_metadataNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataNode" ):
                listener.enterMetadataNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataNode" ):
                listener.exitMetadataNode(self)




    def metadataNode(self):

        localctx = LLVMIRParser.MetadataNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_metadataNode)
        try:
            self.state = 1457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [498]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1455
                self.match(LLVMIRParser.MetadataId)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1456
                self.diExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diExpressionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiExpressionFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiExpressionFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiExpression" ):
                listener.enterDiExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiExpression" ):
                listener.exitDiExpression(self)




    def diExpression(self):

        localctx = LLVMIRParser.DiExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_diExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(LLVMIRParser.T__52)
            self.state = 1460
            self.match(LLVMIRParser.T__25)
            self.state = 1469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & 1052673) != 0):
                self.state = 1461
                self.diExpressionField()
                self.state = 1466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1462
                    self.match(LLVMIRParser.T__14)
                    self.state = 1463
                    self.diExpressionField()
                    self.state = 1468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1471
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiExpressionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def DwarfAttEncoding(self):
            return self.getToken(LLVMIRParser.DwarfAttEncoding, 0)

        def DwarfOp(self):
            return self.getToken(LLVMIRParser.DwarfOp, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_diExpressionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiExpressionField" ):
                listener.enterDiExpressionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiExpressionField" ):
                listener.exitDiExpressionField(self)




    def diExpressionField(self):

        localctx = LLVMIRParser.DiExpressionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_diExpressionField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            _la = self._input.LA(1)
            if not(((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & 1052673) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sanitizerKind = None # Token

        def section(self):
            return self.getTypedRuleContext(LLVMIRParser.SectionContext,0)


        def partition(self):
            return self.getTypedRuleContext(LLVMIRParser.PartitionContext,0)


        def comdat(self):
            return self.getTypedRuleContext(LLVMIRParser.ComdatContext,0)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_globalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalField" ):
                listener.enterGlobalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalField" ):
                listener.exitGlobalField(self)




    def globalField(self):

        localctx = LLVMIRParser.GlobalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_globalField)
        self._la = 0 # Token type
        try:
            self.state = 1480
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1475
                self.section()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1476
                self.partition()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1477
                self.comdat()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1478
                self.align()
                pass
            elif token in [54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1479
                localctx.sanitizerKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 270215977642229760) != 0)):
                    localctx.sanitizerKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSection" ):
                listener.enterSection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSection" ):
                listener.exitSection(self)




    def section(self):

        localctx = LLVMIRParser.SectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(LLVMIRParser.T__57)
            self.state = 1483
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComdatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ComdatName(self):
            return self.getToken(LLVMIRParser.ComdatName, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_comdat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComdat" ):
                listener.enterComdat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComdat" ):
                listener.exitComdat(self)




    def comdat(self):

        localctx = LLVMIRParser.ComdatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_comdat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(LLVMIRParser.T__8)
            self.state = 1489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1486
                self.match(LLVMIRParser.T__25)
                self.state = 1487
                self.match(LLVMIRParser.ComdatName)
                self.state = 1488
                self.match(LLVMIRParser.T__26)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition" ):
                listener.enterPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition" ):
                listener.exitPartition(self)




    def partition(self):

        localctx = LLVMIRParser.PartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_partition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.match(LLVMIRParser.T__58)
            self.state = 1492
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def intConst(self):
            return self.getTypedRuleContext(LLVMIRParser.IntConstContext,0)


        def floatConst(self):
            return self.getTypedRuleContext(LLVMIRParser.FloatConstContext,0)


        def nullConst(self):
            return self.getTypedRuleContext(LLVMIRParser.NullConstContext,0)


        def noneConst(self):
            return self.getTypedRuleContext(LLVMIRParser.NoneConstContext,0)


        def structConst(self):
            return self.getTypedRuleContext(LLVMIRParser.StructConstContext,0)


        def arrayConst(self):
            return self.getTypedRuleContext(LLVMIRParser.ArrayConstContext,0)


        def vectorConst(self):
            return self.getTypedRuleContext(LLVMIRParser.VectorConstContext,0)


        def zeroInitializerConst(self):
            return self.getTypedRuleContext(LLVMIRParser.ZeroInitializerConstContext,0)


        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def undefConst(self):
            return self.getTypedRuleContext(LLVMIRParser.UndefConstContext,0)


        def poisonConst(self):
            return self.getTypedRuleContext(LLVMIRParser.PoisonConstContext,0)


        def blockAddressConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BlockAddressConstContext,0)


        def dsoLocalEquivalentConst(self):
            return self.getTypedRuleContext(LLVMIRParser.DsoLocalEquivalentConstContext,0)


        def noCFIConst(self):
            return self.getTypedRuleContext(LLVMIRParser.NoCFIConstContext,0)


        def constantExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.ConstantExprContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = LLVMIRParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_constant)
        try:
            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1494
                self.boolConst()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1495
                self.intConst()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1496
                self.floatConst()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1497
                self.nullConst()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1498
                self.noneConst()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1499
                self.structConst()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1500
                self.arrayConst()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1501
                self.vectorConst()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1502
                self.zeroInitializerConst()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1503
                self.match(LLVMIRParser.GlobalIdent)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1504
                self.undefConst()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1505
                self.poisonConst()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1506
                self.blockAddressConst()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1507
                self.dsoLocalEquivalentConst()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1508
                self.noCFIConst()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1509
                self.constantExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_boolConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolConst" ):
                listener.enterBoolConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolConst" ):
                listener.exitBoolConst(self)




    def boolConst(self):

        localctx = LLVMIRParser.BoolConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_boolConst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            _la = self._input.LA(1)
            if not(_la==60 or _la==61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_intConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntConst" ):
                listener.enterIntConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntConst" ):
                listener.exitIntConst(self)




    def intConst(self):

        localctx = LLVMIRParser.IntConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_intConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FloatLit(self):
            return self.getToken(LLVMIRParser.FloatLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_floatConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatConst" ):
                listener.enterFloatConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatConst" ):
                listener.exitFloatConst(self)




    def floatConst(self):

        localctx = LLVMIRParser.FloatConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_floatConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.match(LLVMIRParser.FloatLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_nullConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullConst" ):
                listener.enterNullConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullConst" ):
                listener.exitNullConst(self)




    def nullConst(self):

        localctx = LLVMIRParser.NullConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_nullConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.match(LLVMIRParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoneConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_noneConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoneConst" ):
                listener.enterNoneConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoneConst" ):
                listener.exitNoneConst(self)




    def noneConst(self):

        localctx = LLVMIRParser.NoneConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_noneConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(LLVMIRParser.T__62)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_structConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructConst" ):
                listener.enterStructConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructConst" ):
                listener.exitStructConst(self)




    def structConst(self):

        localctx = LLVMIRParser.StructConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_structConst)
        self._la = 0 # Token type
        try:
            self.state = 1548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1522
                self.match(LLVMIRParser.T__20)
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                    self.state = 1523
                    self.typeConst()
                    self.state = 1528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1524
                        self.match(LLVMIRParser.T__14)
                        self.state = 1525
                        self.typeConst()
                        self.state = 1530
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1533
                self.match(LLVMIRParser.T__21)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1534
                self.match(LLVMIRParser.T__63)
                self.state = 1535
                self.match(LLVMIRParser.T__20)
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                    self.state = 1536
                    self.typeConst()
                    self.state = 1541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1537
                        self.match(LLVMIRParser.T__14)
                        self.state = 1538
                        self.typeConst()
                        self.state = 1543
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1546
                self.match(LLVMIRParser.T__21)
                self.state = 1547
                self.match(LLVMIRParser.T__64)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_arrayConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConst" ):
                listener.enterArrayConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConst" ):
                listener.exitArrayConst(self)




    def arrayConst(self):

        localctx = LLVMIRParser.ArrayConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_arrayConst)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1550
                self.match(LLVMIRParser.T__65)
                self.state = 1551
                self.match(LLVMIRParser.StringLit)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1552
                self.match(LLVMIRParser.T__36)
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                    self.state = 1553
                    self.typeConst()
                    self.state = 1558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1554
                        self.match(LLVMIRParser.T__14)
                        self.state = 1555
                        self.typeConst()
                        self.state = 1560
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1563
                self.match(LLVMIRParser.T__37)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_vectorConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorConst" ):
                listener.enterVectorConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorConst" ):
                listener.exitVectorConst(self)




    def vectorConst(self):

        localctx = LLVMIRParser.VectorConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vectorConst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(LLVMIRParser.T__63)
            self.state = 1575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                self.state = 1567
                self.typeConst()
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1568
                    self.match(LLVMIRParser.T__14)
                    self.state = 1569
                    self.typeConst()
                    self.state = 1574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1577
            self.match(LLVMIRParser.T__64)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZeroInitializerConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_zeroInitializerConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZeroInitializerConst" ):
                listener.enterZeroInitializerConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZeroInitializerConst" ):
                listener.exitZeroInitializerConst(self)




    def zeroInitializerConst(self):

        localctx = LLVMIRParser.ZeroInitializerConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_zeroInitializerConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.match(LLVMIRParser.T__66)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UndefConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_undefConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUndefConst" ):
                listener.enterUndefConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUndefConst" ):
                listener.exitUndefConst(self)




    def undefConst(self):

        localctx = LLVMIRParser.UndefConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_undefConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(LLVMIRParser.T__67)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PoisonConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_poisonConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoisonConst" ):
                listener.enterPoisonConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoisonConst" ):
                listener.exitPoisonConst(self)




    def poisonConst(self):

        localctx = LLVMIRParser.PoisonConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_poisonConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(LLVMIRParser.T__68)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockAddressConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_blockAddressConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockAddressConst" ):
                listener.enterBlockAddressConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockAddressConst" ):
                listener.exitBlockAddressConst(self)




    def blockAddressConst(self):

        localctx = LLVMIRParser.BlockAddressConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_blockAddressConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(LLVMIRParser.T__69)
            self.state = 1586
            self.match(LLVMIRParser.T__25)
            self.state = 1587
            self.match(LLVMIRParser.GlobalIdent)
            self.state = 1588
            self.match(LLVMIRParser.T__14)
            self.state = 1589
            self.match(LLVMIRParser.LocalIdent)
            self.state = 1590
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DsoLocalEquivalentConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_dsoLocalEquivalentConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDsoLocalEquivalentConst" ):
                listener.enterDsoLocalEquivalentConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDsoLocalEquivalentConst" ):
                listener.exitDsoLocalEquivalentConst(self)




    def dsoLocalEquivalentConst(self):

        localctx = LLVMIRParser.DsoLocalEquivalentConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dsoLocalEquivalentConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(LLVMIRParser.T__70)
            self.state = 1593
            self.match(LLVMIRParser.GlobalIdent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoCFIConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GlobalIdent(self):
            return self.getToken(LLVMIRParser.GlobalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_noCFIConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoCFIConst" ):
                listener.enterNoCFIConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoCFIConst" ):
                listener.exitNoCFIConst(self)




    def noCFIConst(self):

        localctx = LLVMIRParser.NoCFIConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_noCFIConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(LLVMIRParser.T__71)
            self.state = 1596
            self.match(LLVMIRParser.GlobalIdent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fNegExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.FNegExprContext,0)


        def addExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.AddExprContext,0)


        def subExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.SubExprContext,0)


        def mulExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.MulExprContext,0)


        def shlExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.ShlExprContext,0)


        def lShrExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.LShrExprContext,0)


        def aShrExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.AShrExprContext,0)


        def andExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.AndExprContext,0)


        def orExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.OrExprContext,0)


        def xorExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.XorExprContext,0)


        def extractElementExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.ExtractElementExprContext,0)


        def insertElementExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.InsertElementExprContext,0)


        def shuffleVectorExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.ShuffleVectorExprContext,0)


        def getElementPtrExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.GetElementPtrExprContext,0)


        def truncExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.TruncExprContext,0)


        def zExtExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.ZExtExprContext,0)


        def sExtExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.SExtExprContext,0)


        def fpTruncExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.FpTruncExprContext,0)


        def fpExtExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.FpExtExprContext,0)


        def fpToUiExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.FpToUiExprContext,0)


        def fpToSiExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.FpToSiExprContext,0)


        def uiToFpExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.UiToFpExprContext,0)


        def siToFpExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.SiToFpExprContext,0)


        def ptrToIntExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.PtrToIntExprContext,0)


        def intToPtrExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.IntToPtrExprContext,0)


        def bitCastExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.BitCastExprContext,0)


        def addrSpaceCastExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceCastExprContext,0)


        def iCmpExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.ICmpExprContext,0)


        def fCmpExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.FCmpExprContext,0)


        def selectExpr(self):
            return self.getTypedRuleContext(LLVMIRParser.SelectExprContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_constantExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpr" ):
                listener.enterConstantExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpr" ):
                listener.exitConstantExpr(self)




    def constantExpr(self):

        localctx = LLVMIRParser.ConstantExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_constantExpr)
        try:
            self.state = 1628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1598
                self.fNegExpr()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                self.addExpr()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1600
                self.subExpr()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1601
                self.mulExpr()
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1602
                self.shlExpr()
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1603
                self.lShrExpr()
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1604
                self.aShrExpr()
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1605
                self.andExpr()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1606
                self.orExpr()
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1607
                self.xorExpr()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1608
                self.extractElementExpr()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1609
                self.insertElementExpr()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1610
                self.shuffleVectorExpr()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1611
                self.getElementPtrExpr()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1612
                self.truncExpr()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1613
                self.zExtExpr()
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1614
                self.sExtExpr()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1615
                self.fpTruncExpr()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1616
                self.fpExtExpr()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1617
                self.fpToUiExpr()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1618
                self.fpToSiExpr()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1619
                self.uiToFpExpr()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1620
                self.siToFpExpr()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1621
                self.ptrToIntExpr()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1622
                self.intToPtrExpr()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 26)
                self.state = 1623
                self.bitCastExpr()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 27)
                self.state = 1624
                self.addrSpaceCastExpr()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 28)
                self.state = 1625
                self.iCmpExpr()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 29)
                self.state = 1626
                self.fCmpExpr()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 30)
                self.state = 1627
                self.selectExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def firstClassType(self):
            return self.getTypedRuleContext(LLVMIRParser.FirstClassTypeContext,0)


        def constant(self):
            return self.getTypedRuleContext(LLVMIRParser.ConstantContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_typeConst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConst" ):
                listener.enterTypeConst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConst" ):
                listener.exitTypeConst(self)




    def typeConst(self):

        localctx = LLVMIRParser.TypeConstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typeConst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.firstClassType()
            self.state = 1631
            self.constant()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataAttachmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MetadataName(self):
            return self.getToken(LLVMIRParser.MetadataName, 0)

        def mdNode(self):
            return self.getTypedRuleContext(LLVMIRParser.MdNodeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_metadataAttachment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataAttachment" ):
                listener.enterMetadataAttachment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataAttachment" ):
                listener.exitMetadataAttachment(self)




    def metadataAttachment(self):

        localctx = LLVMIRParser.MetadataAttachmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_metadataAttachment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(LLVMIRParser.MetadataName)
            self.state = 1634
            self.mdNode()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdTuple(self):
            return self.getTypedRuleContext(LLVMIRParser.MdTupleContext,0)


        def MetadataId(self):
            return self.getToken(LLVMIRParser.MetadataId, 0)

        def specializedMDNode(self):
            return self.getTypedRuleContext(LLVMIRParser.SpecializedMDNodeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_mdNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdNode" ):
                listener.enterMdNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdNode" ):
                listener.exitMdNode(self)




    def mdNode(self):

        localctx = LLVMIRParser.MdNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_mdNode)
        try:
            self.state = 1639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1636
                self.mdTuple()
                pass
            elif token in [498]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1637
                self.match(LLVMIRParser.MetadataId)
                pass
            elif token in [53, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1638
                self.specializedMDNode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MdFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_mdTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdTuple" ):
                listener.enterMdTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdTuple" ):
                listener.exitMdTuple(self)




    def mdTuple(self):

        localctx = LLVMIRParser.MdTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_mdTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1641
            self.match(LLVMIRParser.T__22)
            self.state = 1642
            self.match(LLVMIRParser.T__20)
            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4622945172125122560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467458049) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 8589934591) != 0) or ((((_la - 493)) & ~0x3f) == 0 and ((1 << (_la - 493)) & 97) != 0):
                self.state = 1643
                self.mdField()
                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1644
                    self.match(LLVMIRParser.T__14)
                    self.state = 1645
                    self.mdField()
                    self.state = 1650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1653
            self.match(LLVMIRParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def mdString(self):
            return self.getTypedRuleContext(LLVMIRParser.MdStringContext,0)


        def mdTuple(self):
            return self.getTypedRuleContext(LLVMIRParser.MdTupleContext,0)


        def MetadataId(self):
            return self.getToken(LLVMIRParser.MetadataId, 0)

        def diArgList(self):
            return self.getTypedRuleContext(LLVMIRParser.DiArgListContext,0)


        def specializedMDNode(self):
            return self.getTypedRuleContext(LLVMIRParser.SpecializedMDNodeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = LLVMIRParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_metadata)
        try:
            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1655
                self.typeValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1656
                self.mdString()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1657
                self.mdTuple()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1658
                self.match(LLVMIRParser.MetadataId)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1659
                self.diArgList()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1660
                self.specializedMDNode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiArgListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diArgList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiArgList" ):
                listener.enterDiArgList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiArgList" ):
                listener.exitDiArgList(self)




    def diArgList(self):

        localctx = LLVMIRParser.DiArgListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_diArgList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1663
            self.match(LLVMIRParser.T__72)
            self.state = 1664
            self.match(LLVMIRParser.T__25)
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                self.state = 1665
                self.typeValue()
                self.state = 1670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 1666
                    self.match(LLVMIRParser.T__14)
                    self.state = 1667
                    self.typeValue()
                    self.state = 1672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1675
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def firstClassType(self):
            return self.getTypedRuleContext(LLVMIRParser.FirstClassTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_typeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeValue" ):
                listener.enterTypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeValue" ):
                listener.exitTypeValue(self)




    def typeValue(self):

        localctx = LLVMIRParser.TypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_typeValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.firstClassType()
            self.state = 1678
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(LLVMIRParser.ConstantContext,0)


        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def inlineAsm(self):
            return self.getTypedRuleContext(LLVMIRParser.InlineAsmContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = LLVMIRParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_value)
        try:
            self.state = 1683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 37, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 489, 490, 492]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1680
                self.constant()
                pass
            elif token in [493]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1681
                self.match(LLVMIRParser.LocalIdent)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1682
                self.inlineAsm()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineAsmContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sideEffect = None # Token
            self.alignStackTok = None # Token
            self.intelDialect = None # Token
            self.unwind = None # Token

        def StringLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.StringLit)
            else:
                return self.getToken(LLVMIRParser.StringLit, i)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_inlineAsm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineAsm" ):
                listener.enterInlineAsm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineAsm" ):
                listener.exitInlineAsm(self)




    def inlineAsm(self):

        localctx = LLVMIRParser.InlineAsmContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_inlineAsm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1685
            self.match(LLVMIRParser.T__6)
            self.state = 1687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1686
                localctx.sideEffect = self.match(LLVMIRParser.T__73)


            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 1689
                localctx.alignStackTok = self.match(LLVMIRParser.T__74)


            self.state = 1693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 1692
                localctx.intelDialect = self.match(LLVMIRParser.T__75)


            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 1695
                localctx.unwind = self.match(LLVMIRParser.T__44)


            self.state = 1698
            self.match(LLVMIRParser.StringLit)
            self.state = 1699
            self.match(LLVMIRParser.T__14)
            self.state = 1700
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_mdString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdString" ):
                listener.enterMdString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdString" ):
                listener.exitMdString(self)




    def mdString(self):

        localctx = LLVMIRParser.MdStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_mdString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.match(LLVMIRParser.T__22)
            self.state = 1703
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdFieldOrIntContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_mdFieldOrInt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdFieldOrInt" ):
                listener.enterMdFieldOrInt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdFieldOrInt" ):
                listener.exitMdFieldOrInt(self)




    def mdFieldOrInt(self):

        localctx = LLVMIRParser.MdFieldOrIntContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_mdFieldOrInt)
        try:
            self.state = 1707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [489]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1705
                self.match(LLVMIRParser.IntLit)
                pass
            elif token in [21, 23, 34, 37, 51, 53, 62, 64, 73, 77, 116, 117, 118, 121, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 493, 498, 499]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1706
                self.mdField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSPFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def DispFlag(self):
            return self.getToken(LLVMIRParser.DispFlag, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_diSPFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSPFlag" ):
                listener.enterDiSPFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSPFlag" ):
                listener.exitDiSPFlag(self)




    def diSPFlag(self):

        localctx = LLVMIRParser.DiSPFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_diSPFlag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            _la = self._input.LA(1)
            if not(_la==489 or _la==503):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrString(self):
            return self.getTypedRuleContext(LLVMIRParser.AttrStringContext,0)


        def attrPair(self):
            return self.getTypedRuleContext(LLVMIRParser.AttrPairContext,0)


        def AttrGroupId(self):
            return self.getToken(LLVMIRParser.AttrGroupId, 0)

        def alignPair(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignPairContext,0)


        def alignStack(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignStackContext,0)


        def alignStackPair(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignStackPairContext,0)


        def allocKind(self):
            return self.getTypedRuleContext(LLVMIRParser.AllocKindContext,0)


        def allocSize(self):
            return self.getTypedRuleContext(LLVMIRParser.AllocSizeContext,0)


        def funcAttr(self):
            return self.getTypedRuleContext(LLVMIRParser.FuncAttrContext,0)


        def preallocated(self):
            return self.getTypedRuleContext(LLVMIRParser.PreallocatedContext,0)


        def unwindTable(self):
            return self.getTypedRuleContext(LLVMIRParser.UnwindTableContext,0)


        def vectorScaleRange(self):
            return self.getTypedRuleContext(LLVMIRParser.VectorScaleRangeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_funcAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncAttribute" ):
                listener.enterFuncAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncAttribute" ):
                listener.exitFuncAttribute(self)




    def funcAttribute(self):

        localctx = LLVMIRParser.FuncAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_funcAttribute)
        try:
            self.state = 1723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1711
                self.attrString()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1712
                self.attrPair()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1713
                self.match(LLVMIRParser.AttrGroupId)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1714
                self.alignPair()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1715
                self.alignStack()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1716
                self.alignStackPair()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1717
                self.allocKind()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1718
                self.allocSize()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1719
                self.funcAttr()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1720
                self.preallocated()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1721
                self.unwindTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1722
                self.vectorScaleRange()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intType(self):
            return self.getTypedRuleContext(LLVMIRParser.IntTypeContext,0)


        def floatType(self):
            return self.getTypedRuleContext(LLVMIRParser.FloatTypeContext,0)


        def opaquePointerType(self):
            return self.getTypedRuleContext(LLVMIRParser.OpaquePointerTypeContext,0)


        def vectorType(self):
            return self.getTypedRuleContext(LLVMIRParser.VectorTypeContext,0)


        def labelType(self):
            return self.getTypedRuleContext(LLVMIRParser.LabelTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(LLVMIRParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(LLVMIRParser.StructTypeContext,0)


        def namedType(self):
            return self.getTypedRuleContext(LLVMIRParser.NamedTypeContext,0)


        def mmxType(self):
            return self.getTypedRuleContext(LLVMIRParser.MmxTypeContext,0)


        def tokenType(self):
            return self.getTypedRuleContext(LLVMIRParser.TokenTypeContext,0)


        def metadataType(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataTypeContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def params(self):
            return self.getTypedRuleContext(LLVMIRParser.ParamsContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)



    def type_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = LLVMIRParser.TypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 174
        self.enterRecursionRule(localctx, 174, self.RULE_type, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1726
                self.match(LLVMIRParser.T__33)
                pass

            elif la_ == 2:
                self.state = 1727
                self.match(LLVMIRParser.T__76)
                pass

            elif la_ == 3:
                self.state = 1728
                self.intType()
                pass

            elif la_ == 4:
                self.state = 1729
                self.floatType()
                pass

            elif la_ == 5:
                self.state = 1730
                self.opaquePointerType()
                pass

            elif la_ == 6:
                self.state = 1731
                self.vectorType()
                pass

            elif la_ == 7:
                self.state = 1732
                self.labelType()
                pass

            elif la_ == 8:
                self.state = 1733
                self.arrayType()
                pass

            elif la_ == 9:
                self.state = 1734
                self.structType()
                pass

            elif la_ == 10:
                self.state = 1735
                self.namedType()
                pass

            elif la_ == 11:
                self.state = 1736
                self.mmxType()
                pass

            elif la_ == 12:
                self.state = 1737
                self.tokenType()
                pass

            elif la_ == 13:
                self.state = 1738
                self.metadataType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1753
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1751
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                    if la_ == 1:
                        localctx = LLVMIRParser.TypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_type)
                        self.state = 1741
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1742
                        self.match(LLVMIRParser.T__25)
                        self.state = 1743
                        self.params()
                        self.state = 1744
                        self.match(LLVMIRParser.T__26)
                        pass

                    elif la_ == 2:
                        localctx = LLVMIRParser.TypeContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_type)
                        self.state = 1746
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==119:
                            self.state = 1747
                            self.addrSpace()


                        self.state = 1750
                        self.match(LLVMIRParser.T__77)
                        pass

             
                self.state = 1755
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ellipsis = None # Token

        def param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ParamContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ParamContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams" ):
                listener.enterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams" ):
                listener.exitParams(self)




    def params(self):

        localctx = LLVMIRParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_params)
        self._la = 0 # Token type
        try:
            self.state = 1771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 1756
                    localctx.ellipsis = self.match(LLVMIRParser.T__78)


                pass
            elif token in [21, 34, 37, 51, 64, 77, 116, 117, 118, 121, 354, 355, 356, 357, 358, 359, 360, 493, 499]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1759
                self.param()
                self.state = 1764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1760
                        self.match(LLVMIRParser.T__14)
                        self.state = 1761
                        self.param() 
                    self.state = 1766
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                self.state = 1769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 1767
                    self.match(LLVMIRParser.T__14)
                    self.state = 1768
                    localctx.ellipsis = self.match(LLVMIRParser.T__78)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def paramAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ParamAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ParamAttributeContext,i)


        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)




    def param(self):

        localctx = LLVMIRParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.type_(0)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 549755809825) != 0) or _la==491:
                self.state = 1774
                self.paramAttribute()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==493:
                self.state = 1780
                self.match(LLVMIRParser.LocalIdent)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attrString(self):
            return self.getTypedRuleContext(LLVMIRParser.AttrStringContext,0)


        def attrPair(self):
            return self.getTypedRuleContext(LLVMIRParser.AttrPairContext,0)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def alignStack(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignStackContext,0)


        def byRefAttr(self):
            return self.getTypedRuleContext(LLVMIRParser.ByRefAttrContext,0)


        def byval(self):
            return self.getTypedRuleContext(LLVMIRParser.ByvalContext,0)


        def dereferenceable(self):
            return self.getTypedRuleContext(LLVMIRParser.DereferenceableContext,0)


        def elementType(self):
            return self.getTypedRuleContext(LLVMIRParser.ElementTypeContext,0)


        def inAlloca(self):
            return self.getTypedRuleContext(LLVMIRParser.InAllocaContext,0)


        def paramAttr(self):
            return self.getTypedRuleContext(LLVMIRParser.ParamAttrContext,0)


        def preallocated(self):
            return self.getTypedRuleContext(LLVMIRParser.PreallocatedContext,0)


        def structRetAttr(self):
            return self.getTypedRuleContext(LLVMIRParser.StructRetAttrContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_paramAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamAttribute" ):
                listener.enterParamAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamAttribute" ):
                listener.exitParamAttribute(self)




    def paramAttribute(self):

        localctx = LLVMIRParser.ParamAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_paramAttribute)
        try:
            self.state = 1795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1783
                self.attrString()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1784
                self.attrPair()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                self.align()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1786
                self.alignStack()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1787
                self.byRefAttr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1788
                self.byval()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1789
                self.dereferenceable()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1790
                self.elementType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1791
                self.inAlloca()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1792
                self.paramAttr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1793
                self.preallocated()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1794
                self.structRetAttr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_attrString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrString" ):
                listener.enterAttrString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrString" ):
                listener.exitAttrString(self)




    def attrString(self):

        localctx = LLVMIRParser.AttrStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_attrString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1797
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.StringLit)
            else:
                return self.getToken(LLVMIRParser.StringLit, i)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_attrPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrPair" ):
                listener.enterAttrPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrPair" ):
                listener.exitAttrPair(self)




    def attrPair(self):

        localctx = LLVMIRParser.AttrPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_attrPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1799
            self.match(LLVMIRParser.StringLit)
            self.state = 1800
            self.match(LLVMIRParser.T__1)
            self.state = 1801
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_align

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlign" ):
                listener.enterAlign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlign" ):
                listener.exitAlign(self)




    def align(self):

        localctx = LLVMIRParser.AlignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_align)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1803
                self.match(LLVMIRParser.T__79)
                self.state = 1804
                self.match(LLVMIRParser.IntLit)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1805
                self.match(LLVMIRParser.T__79)
                self.state = 1806
                self.match(LLVMIRParser.T__25)
                self.state = 1807
                self.match(LLVMIRParser.IntLit)
                self.state = 1808
                self.match(LLVMIRParser.T__26)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_alignPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignPair" ):
                listener.enterAlignPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignPair" ):
                listener.exitAlignPair(self)




    def alignPair(self):

        localctx = LLVMIRParser.AlignPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_alignPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1811
            self.match(LLVMIRParser.T__79)
            self.state = 1812
            self.match(LLVMIRParser.T__1)
            self.state = 1813
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignStackContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_alignStack

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignStack" ):
                listener.enterAlignStack(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignStack" ):
                listener.exitAlignStack(self)




    def alignStack(self):

        localctx = LLVMIRParser.AlignStackContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_alignStack)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1815
            self.match(LLVMIRParser.T__74)
            self.state = 1816
            self.match(LLVMIRParser.T__25)
            self.state = 1817
            self.match(LLVMIRParser.IntLit)
            self.state = 1818
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignStackPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_alignStackPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignStackPair" ):
                listener.enterAlignStackPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignStackPair" ):
                listener.exitAlignStackPair(self)




    def alignStackPair(self):

        localctx = LLVMIRParser.AlignStackPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_alignStackPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(LLVMIRParser.T__74)
            self.state = 1821
            self.match(LLVMIRParser.T__1)
            self.state = 1822
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_allocKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocKind" ):
                listener.enterAllocKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocKind" ):
                listener.exitAllocKind(self)




    def allocKind(self):

        localctx = LLVMIRParser.AllocKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_allocKind)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(LLVMIRParser.T__80)
            self.state = 1825
            self.match(LLVMIRParser.T__25)
            self.state = 1826
            self.match(LLVMIRParser.StringLit)
            self.state = 1827
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocSizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.IntLit)
            else:
                return self.getToken(LLVMIRParser.IntLit, i)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_allocSize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocSize" ):
                listener.enterAllocSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocSize" ):
                listener.exitAllocSize(self)




    def allocSize(self):

        localctx = LLVMIRParser.AllocSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_allocSize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.match(LLVMIRParser.T__81)
            self.state = 1830
            self.match(LLVMIRParser.T__25)
            self.state = 1831
            self.match(LLVMIRParser.IntLit)
            self.state = 1834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1832
                self.match(LLVMIRParser.T__14)
                self.state = 1833
                self.match(LLVMIRParser.IntLit)


            self.state = 1836
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnwindTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unwindTableKind = None # Token


        def getRuleIndex(self):
            return LLVMIRParser.RULE_unwindTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnwindTable" ):
                listener.enterUnwindTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnwindTable" ):
                listener.exitUnwindTable(self)




    def unwindTable(self):

        localctx = LLVMIRParser.UnwindTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_unwindTable)
        self._la = 0 # Token type
        try:
            self.state = 1843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.match(LLVMIRParser.T__82)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1839
                self.match(LLVMIRParser.T__82)
                self.state = 1840
                self.match(LLVMIRParser.T__25)
                self.state = 1841
                localctx.unwindTableKind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==84 or _la==85):
                    localctx.unwindTableKind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1842
                self.match(LLVMIRParser.T__26)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorScaleRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.IntLit)
            else:
                return self.getToken(LLVMIRParser.IntLit, i)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_vectorScaleRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorScaleRange" ):
                listener.enterVectorScaleRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorScaleRange" ):
                listener.exitVectorScaleRange(self)




    def vectorScaleRange(self):

        localctx = LLVMIRParser.VectorScaleRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vectorScaleRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1845
            self.match(LLVMIRParser.T__85)
            self.state = 1854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1846
                self.match(LLVMIRParser.T__25)
                self.state = 1851
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1847
                    self.match(LLVMIRParser.IntLit)
                    pass

                elif la_ == 2:
                    self.state = 1848
                    self.match(LLVMIRParser.IntLit)
                    self.state = 1849
                    self.match(LLVMIRParser.T__14)
                    self.state = 1850
                    self.match(LLVMIRParser.IntLit)
                    pass


                self.state = 1853
                self.match(LLVMIRParser.T__26)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByRefAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_byRefAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByRefAttr" ):
                listener.enterByRefAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByRefAttr" ):
                listener.exitByRefAttr(self)




    def byRefAttr(self):

        localctx = LLVMIRParser.ByRefAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_byRefAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.match(LLVMIRParser.T__86)
            self.state = 1857
            self.match(LLVMIRParser.T__25)
            self.state = 1858
            self.type_(0)
            self.state = 1859
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ByvalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_byval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByval" ):
                listener.enterByval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByval" ):
                listener.exitByval(self)




    def byval(self):

        localctx = LLVMIRParser.ByvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_byval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            self.match(LLVMIRParser.T__87)
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1862
                self.match(LLVMIRParser.T__25)
                self.state = 1863
                self.type_(0)
                self.state = 1864
                self.match(LLVMIRParser.T__26)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DereferenceableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_dereferenceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereferenceable" ):
                listener.enterDereferenceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereferenceable" ):
                listener.exitDereferenceable(self)




    def dereferenceable(self):

        localctx = LLVMIRParser.DereferenceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dereferenceable)
        try:
            self.state = 1876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1868
                self.match(LLVMIRParser.T__88)
                self.state = 1869
                self.match(LLVMIRParser.T__25)
                self.state = 1870
                self.match(LLVMIRParser.IntLit)
                self.state = 1871
                self.match(LLVMIRParser.T__26)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1872
                self.match(LLVMIRParser.T__89)
                self.state = 1873
                self.match(LLVMIRParser.T__25)
                self.state = 1874
                self.match(LLVMIRParser.IntLit)
                self.state = 1875
                self.match(LLVMIRParser.T__26)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_elementType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementType" ):
                listener.enterElementType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementType" ):
                listener.exitElementType(self)




    def elementType(self):

        localctx = LLVMIRParser.ElementTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_elementType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.match(LLVMIRParser.T__90)
            self.state = 1879
            self.match(LLVMIRParser.T__25)
            self.state = 1880
            self.type_(0)
            self.state = 1881
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InAllocaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_inAlloca

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInAlloca" ):
                listener.enterInAlloca(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInAlloca" ):
                listener.exitInAlloca(self)




    def inAlloca(self):

        localctx = LLVMIRParser.InAllocaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_inAlloca)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.match(LLVMIRParser.T__91)
            self.state = 1884
            self.match(LLVMIRParser.T__25)
            self.state = 1885
            self.type_(0)
            self.state = 1886
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_paramAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamAttr" ):
                listener.enterParamAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamAttr" ):
                listener.exitParamAttr(self)




    def paramAttr(self):

        localctx = LLVMIRParser.ParamAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_paramAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & 524287) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreallocatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_preallocated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreallocated" ):
                listener.enterPreallocated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreallocated" ):
                listener.exitPreallocated(self)




    def preallocated(self):

        localctx = LLVMIRParser.PreallocatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_preallocated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(LLVMIRParser.T__111)
            self.state = 1891
            self.match(LLVMIRParser.T__25)
            self.state = 1892
            self.type_(0)
            self.state = 1893
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructRetAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_structRetAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructRetAttr" ):
                listener.enterStructRetAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructRetAttr" ):
                listener.exitStructRetAttr(self)




    def structRetAttr(self):

        localctx = LLVMIRParser.StructRetAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_structRetAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(LLVMIRParser.T__112)
            self.state = 1896
            self.match(LLVMIRParser.T__25)
            self.state = 1897
            self.type_(0)
            self.state = 1898
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FirstClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concreteType(self):
            return self.getTypedRuleContext(LLVMIRParser.ConcreteTypeContext,0)


        def metadataType(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataTypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_firstClassType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFirstClassType" ):
                listener.enterFirstClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFirstClassType" ):
                listener.exitFirstClassType(self)




    def firstClassType(self):

        localctx = LLVMIRParser.FirstClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_firstClassType)
        try:
            self.state = 1902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1900
                self.concreteType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1901
                self.metadataType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcreteTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intType(self):
            return self.getTypedRuleContext(LLVMIRParser.IntTypeContext,0)


        def floatType(self):
            return self.getTypedRuleContext(LLVMIRParser.FloatTypeContext,0)


        def pointerType(self):
            return self.getTypedRuleContext(LLVMIRParser.PointerTypeContext,0)


        def vectorType(self):
            return self.getTypedRuleContext(LLVMIRParser.VectorTypeContext,0)


        def labelType(self):
            return self.getTypedRuleContext(LLVMIRParser.LabelTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(LLVMIRParser.ArrayTypeContext,0)


        def structType(self):
            return self.getTypedRuleContext(LLVMIRParser.StructTypeContext,0)


        def namedType(self):
            return self.getTypedRuleContext(LLVMIRParser.NamedTypeContext,0)


        def mmxType(self):
            return self.getTypedRuleContext(LLVMIRParser.MmxTypeContext,0)


        def tokenType(self):
            return self.getTypedRuleContext(LLVMIRParser.TokenTypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_concreteType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcreteType" ):
                listener.enterConcreteType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcreteType" ):
                listener.exitConcreteType(self)




    def concreteType(self):

        localctx = LLVMIRParser.ConcreteTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_concreteType)
        try:
            self.state = 1914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1904
                self.intType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1905
                self.floatType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1906
                self.pointerType()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1907
                self.vectorType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1908
                self.labelType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1909
                self.arrayType()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1910
                self.structType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1911
                self.namedType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1912
                self.mmxType()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1913
                self.tokenType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntType(self):
            return self.getToken(LLVMIRParser.IntType, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_intType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntType" ):
                listener.enterIntType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntType" ):
                listener.exitIntType(self)




    def intType(self):

        localctx = LLVMIRParser.IntTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_intType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.match(LLVMIRParser.IntType)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def floatKind(self):
            return self.getTypedRuleContext(LLVMIRParser.FloatKindContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_floatType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatType" ):
                listener.enterFloatType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatType" ):
                listener.exitFloatType(self)




    def floatType(self):

        localctx = LLVMIRParser.FloatTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_floatType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            self.floatKind()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def opaquePointerType(self):
            return self.getTypedRuleContext(LLVMIRParser.OpaquePointerTypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_pointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerType" ):
                listener.enterPointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerType" ):
                listener.exitPointerType(self)




    def pointerType(self):

        localctx = LLVMIRParser.PointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_pointerType)
        self._la = 0 # Token type
        try:
            self.state = 1927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1920
                self.type_(0)
                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1921
                    self.addrSpace()


                self.state = 1924
                self.match(LLVMIRParser.T__77)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.opaquePointerType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_vectorType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVectorType" ):
                listener.enterVectorType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVectorType" ):
                listener.exitVectorType(self)




    def vectorType(self):

        localctx = LLVMIRParser.VectorTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_vectorType)
        try:
            self.state = 1943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1929
                self.match(LLVMIRParser.T__63)
                self.state = 1930
                self.match(LLVMIRParser.IntLit)
                self.state = 1931
                self.match(LLVMIRParser.T__113)
                self.state = 1932
                self.type_(0)
                self.state = 1933
                self.match(LLVMIRParser.T__64)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1935
                self.match(LLVMIRParser.T__63)
                self.state = 1936
                self.match(LLVMIRParser.T__114)
                self.state = 1937
                self.match(LLVMIRParser.T__113)
                self.state = 1938
                self.match(LLVMIRParser.IntLit)
                self.state = 1939
                self.match(LLVMIRParser.T__113)
                self.state = 1940
                self.type_(0)
                self.state = 1941
                self.match(LLVMIRParser.T__64)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_labelType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelType" ):
                listener.enterLabelType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelType" ):
                listener.exitLabelType(self)




    def labelType(self):

        localctx = LLVMIRParser.LabelTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_labelType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self.match(LLVMIRParser.T__50)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = LLVMIRParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(LLVMIRParser.T__36)
            self.state = 1948
            self.match(LLVMIRParser.IntLit)
            self.state = 1949
            self.match(LLVMIRParser.T__113)
            self.state = 1950
            self.type_(0)
            self.state = 1951
            self.match(LLVMIRParser.T__37)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_structType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructType" ):
                listener.enterStructType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructType" ):
                listener.exitStructType(self)




    def structType(self):

        localctx = LLVMIRParser.StructTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_structType)
        self._la = 0 # Token type
        try:
            self.state = 1979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1953
                self.match(LLVMIRParser.T__20)
                self.state = 1962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                    self.state = 1954
                    self.type_(0)
                    self.state = 1959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1955
                        self.match(LLVMIRParser.T__14)
                        self.state = 1956
                        self.type_(0)
                        self.state = 1961
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1964
                self.match(LLVMIRParser.T__21)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.match(LLVMIRParser.T__63)
                self.state = 1966
                self.match(LLVMIRParser.T__20)
                self.state = 1975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                    self.state = 1967
                    self.type_(0)
                    self.state = 1972
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==15:
                        self.state = 1968
                        self.match(LLVMIRParser.T__14)
                        self.state = 1969
                        self.type_(0)
                        self.state = 1974
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1977
                self.match(LLVMIRParser.T__21)
                self.state = 1978
                self.match(LLVMIRParser.T__64)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_namedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedType" ):
                listener.enterNamedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedType" ):
                listener.exitNamedType(self)




    def namedType(self):

        localctx = LLVMIRParser.NamedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_namedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1981
            self.match(LLVMIRParser.LocalIdent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MmxTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_mmxType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMmxType" ):
                listener.enterMmxType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMmxType" ):
                listener.exitMmxType(self)




    def mmxType(self):

        localctx = LLVMIRParser.MmxTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_mmxType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            self.match(LLVMIRParser.T__115)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_tokenType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenType" ):
                listener.enterTokenType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenType" ):
                listener.exitTokenType(self)




    def tokenType(self):

        localctx = LLVMIRParser.TokenTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_tokenType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1985
            self.match(LLVMIRParser.T__116)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaquePointerTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_opaquePointerType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaquePointerType" ):
                listener.enterOpaquePointerType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaquePointerType" ):
                listener.exitOpaquePointerType(self)




    def opaquePointerType(self):

        localctx = LLVMIRParser.OpaquePointerTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_opaquePointerType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(LLVMIRParser.T__117)
            self.state = 1989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1988
                self.addrSpace()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_addrSpace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddrSpace" ):
                listener.enterAddrSpace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddrSpace" ):
                listener.exitAddrSpace(self)




    def addrSpace(self):

        localctx = LLVMIRParser.AddrSpaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_addrSpace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1991
            self.match(LLVMIRParser.T__118)
            self.state = 1992
            self.match(LLVMIRParser.T__25)
            self.state = 1993
            self.match(LLVMIRParser.IntLit)
            self.state = 1994
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadLocalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tlsModel(self):
            return self.getTypedRuleContext(LLVMIRParser.TlsModelContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_threadLocal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadLocal" ):
                listener.enterThreadLocal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadLocal" ):
                listener.exitThreadLocal(self)




    def threadLocal(self):

        localctx = LLVMIRParser.ThreadLocalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_threadLocal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.match(LLVMIRParser.T__119)
            self.state = 2001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1997
                self.match(LLVMIRParser.T__25)
                self.state = 1998
                self.tlsModel()
                self.state = 1999
                self.match(LLVMIRParser.T__26)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_metadataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataType" ):
                listener.enterMetadataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataType" ):
                listener.exitMetadataType(self)




    def metadataType(self):

        localctx = LLVMIRParser.MetadataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_metadataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2003
            self.match(LLVMIRParser.T__120)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_bitCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitCastExpr" ):
                listener.enterBitCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitCastExpr" ):
                listener.exitBitCastExpr(self)




    def bitCastExpr(self):

        localctx = LLVMIRParser.BitCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_bitCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.match(LLVMIRParser.T__121)
            self.state = 2006
            self.match(LLVMIRParser.T__25)
            self.state = 2007
            self.typeConst()
            self.state = 2008
            self.match(LLVMIRParser.T__42)
            self.state = 2009
            self.type_(0)
            self.state = 2010
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetElementPtrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def inBounds(self):
            return self.getTypedRuleContext(LLVMIRParser.InBoundsContext,0)


        def gepIndex(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.GepIndexContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.GepIndexContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_getElementPtrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetElementPtrExpr" ):
                listener.enterGetElementPtrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetElementPtrExpr" ):
                listener.exitGetElementPtrExpr(self)




    def getElementPtrExpr(self):

        localctx = LLVMIRParser.GetElementPtrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_getElementPtrExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.match(LLVMIRParser.T__122)
            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==264:
                self.state = 2013
                self.inBounds()


            self.state = 2016
            self.match(LLVMIRParser.T__25)
            self.state = 2017
            self.type_(0)
            self.state = 2018
            self.match(LLVMIRParser.T__14)
            self.state = 2019
            self.typeConst()
            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2020
                self.match(LLVMIRParser.T__14)
                self.state = 2021
                self.gepIndex()
                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2027
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GepIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inRange = None # Token

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_gepIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGepIndex" ):
                listener.enterGepIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGepIndex" ):
                listener.exitGepIndex(self)




    def gepIndex(self):

        localctx = LLVMIRParser.GepIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_gepIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 2029
                localctx.inRange = self.match(LLVMIRParser.T__123)


            self.state = 2032
            self.typeConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceCastExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_addrSpaceCastExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddrSpaceCastExpr" ):
                listener.enterAddrSpaceCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddrSpaceCastExpr" ):
                listener.exitAddrSpaceCastExpr(self)




    def addrSpaceCastExpr(self):

        localctx = LLVMIRParser.AddrSpaceCastExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_addrSpaceCastExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.match(LLVMIRParser.T__124)
            self.state = 2035
            self.match(LLVMIRParser.T__25)
            self.state = 2036
            self.typeConst()
            self.state = 2037
            self.match(LLVMIRParser.T__42)
            self.state = 2038
            self.type_(0)
            self.state = 2039
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntToPtrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_intToPtrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntToPtrExpr" ):
                listener.enterIntToPtrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntToPtrExpr" ):
                listener.exitIntToPtrExpr(self)




    def intToPtrExpr(self):

        localctx = LLVMIRParser.IntToPtrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_intToPtrExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2041
            self.match(LLVMIRParser.T__125)
            self.state = 2042
            self.match(LLVMIRParser.T__25)
            self.state = 2043
            self.typeConst()
            self.state = 2044
            self.match(LLVMIRParser.T__42)
            self.state = 2045
            self.type_(0)
            self.state = 2046
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICmpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iPred(self):
            return self.getTypedRuleContext(LLVMIRParser.IPredContext,0)


        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_iCmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICmpExpr" ):
                listener.enterICmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICmpExpr" ):
                listener.exitICmpExpr(self)




    def iCmpExpr(self):

        localctx = LLVMIRParser.ICmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_iCmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self.match(LLVMIRParser.T__126)
            self.state = 2049
            self.iPred()
            self.state = 2050
            self.match(LLVMIRParser.T__25)
            self.state = 2051
            self.typeConst()
            self.state = 2052
            self.match(LLVMIRParser.T__14)
            self.state = 2053
            self.typeConst()
            self.state = 2054
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FCmpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fPred(self):
            return self.getTypedRuleContext(LLVMIRParser.FPredContext,0)


        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fCmpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFCmpExpr" ):
                listener.enterFCmpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFCmpExpr" ):
                listener.exitFCmpExpr(self)




    def fCmpExpr(self):

        localctx = LLVMIRParser.FCmpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_fCmpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.match(LLVMIRParser.T__127)
            self.state = 2057
            self.fPred()
            self.state = 2058
            self.match(LLVMIRParser.T__25)
            self.state = 2059
            self.typeConst()
            self.state = 2060
            self.match(LLVMIRParser.T__14)
            self.state = 2061
            self.typeConst()
            self.state = 2062
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_selectExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpr" ):
                listener.enterSelectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpr" ):
                listener.exitSelectExpr(self)




    def selectExpr(self):

        localctx = LLVMIRParser.SelectExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_selectExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self.match(LLVMIRParser.T__128)
            self.state = 2065
            self.match(LLVMIRParser.T__25)
            self.state = 2066
            self.typeConst()
            self.state = 2067
            self.match(LLVMIRParser.T__14)
            self.state = 2068
            self.typeConst()
            self.state = 2069
            self.match(LLVMIRParser.T__14)
            self.state = 2070
            self.typeConst()
            self.state = 2071
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_truncExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncExpr" ):
                listener.enterTruncExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncExpr" ):
                listener.exitTruncExpr(self)




    def truncExpr(self):

        localctx = LLVMIRParser.TruncExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_truncExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.match(LLVMIRParser.T__129)
            self.state = 2074
            self.match(LLVMIRParser.T__25)
            self.state = 2075
            self.typeConst()
            self.state = 2076
            self.match(LLVMIRParser.T__42)
            self.state = 2077
            self.type_(0)
            self.state = 2078
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZExtExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_zExtExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZExtExpr" ):
                listener.enterZExtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZExtExpr" ):
                listener.exitZExtExpr(self)




    def zExtExpr(self):

        localctx = LLVMIRParser.ZExtExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_zExtExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            self.match(LLVMIRParser.T__130)
            self.state = 2081
            self.match(LLVMIRParser.T__25)
            self.state = 2082
            self.typeConst()
            self.state = 2083
            self.match(LLVMIRParser.T__42)
            self.state = 2084
            self.type_(0)
            self.state = 2085
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SExtExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_sExtExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSExtExpr" ):
                listener.enterSExtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSExtExpr" ):
                listener.exitSExtExpr(self)




    def sExtExpr(self):

        localctx = LLVMIRParser.SExtExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_sExtExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            self.match(LLVMIRParser.T__131)
            self.state = 2088
            self.match(LLVMIRParser.T__25)
            self.state = 2089
            self.typeConst()
            self.state = 2090
            self.match(LLVMIRParser.T__42)
            self.state = 2091
            self.type_(0)
            self.state = 2092
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpTruncExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpTruncExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpTruncExpr" ):
                listener.enterFpTruncExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpTruncExpr" ):
                listener.exitFpTruncExpr(self)




    def fpTruncExpr(self):

        localctx = LLVMIRParser.FpTruncExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_fpTruncExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2094
            self.match(LLVMIRParser.T__132)
            self.state = 2095
            self.match(LLVMIRParser.T__25)
            self.state = 2096
            self.typeConst()
            self.state = 2097
            self.match(LLVMIRParser.T__42)
            self.state = 2098
            self.type_(0)
            self.state = 2099
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpExtExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpExtExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpExtExpr" ):
                listener.enterFpExtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpExtExpr" ):
                listener.exitFpExtExpr(self)




    def fpExtExpr(self):

        localctx = LLVMIRParser.FpExtExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_fpExtExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2101
            self.match(LLVMIRParser.T__133)
            self.state = 2102
            self.match(LLVMIRParser.T__25)
            self.state = 2103
            self.typeConst()
            self.state = 2104
            self.match(LLVMIRParser.T__42)
            self.state = 2105
            self.type_(0)
            self.state = 2106
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToUiExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpToUiExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToUiExpr" ):
                listener.enterFpToUiExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToUiExpr" ):
                listener.exitFpToUiExpr(self)




    def fpToUiExpr(self):

        localctx = LLVMIRParser.FpToUiExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_fpToUiExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(LLVMIRParser.T__134)
            self.state = 2109
            self.match(LLVMIRParser.T__25)
            self.state = 2110
            self.typeConst()
            self.state = 2111
            self.match(LLVMIRParser.T__42)
            self.state = 2112
            self.type_(0)
            self.state = 2113
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToSiExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpToSiExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToSiExpr" ):
                listener.enterFpToSiExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToSiExpr" ):
                listener.exitFpToSiExpr(self)




    def fpToSiExpr(self):

        localctx = LLVMIRParser.FpToSiExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_fpToSiExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2115
            self.match(LLVMIRParser.T__135)
            self.state = 2116
            self.match(LLVMIRParser.T__25)
            self.state = 2117
            self.typeConst()
            self.state = 2118
            self.match(LLVMIRParser.T__42)
            self.state = 2119
            self.type_(0)
            self.state = 2120
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UiToFpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_uiToFpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUiToFpExpr" ):
                listener.enterUiToFpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUiToFpExpr" ):
                listener.exitUiToFpExpr(self)




    def uiToFpExpr(self):

        localctx = LLVMIRParser.UiToFpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_uiToFpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2122
            self.match(LLVMIRParser.T__136)
            self.state = 2123
            self.match(LLVMIRParser.T__25)
            self.state = 2124
            self.typeConst()
            self.state = 2125
            self.match(LLVMIRParser.T__42)
            self.state = 2126
            self.type_(0)
            self.state = 2127
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SiToFpExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_siToFpExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSiToFpExpr" ):
                listener.enterSiToFpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSiToFpExpr" ):
                listener.exitSiToFpExpr(self)




    def siToFpExpr(self):

        localctx = LLVMIRParser.SiToFpExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_siToFpExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.match(LLVMIRParser.T__137)
            self.state = 2130
            self.match(LLVMIRParser.T__25)
            self.state = 2131
            self.typeConst()
            self.state = 2132
            self.match(LLVMIRParser.T__42)
            self.state = 2133
            self.type_(0)
            self.state = 2134
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrToIntExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_ptrToIntExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrToIntExpr" ):
                listener.enterPtrToIntExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrToIntExpr" ):
                listener.exitPtrToIntExpr(self)




    def ptrToIntExpr(self):

        localctx = LLVMIRParser.PtrToIntExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_ptrToIntExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            self.match(LLVMIRParser.T__138)
            self.state = 2137
            self.match(LLVMIRParser.T__25)
            self.state = 2138
            self.typeConst()
            self.state = 2139
            self.match(LLVMIRParser.T__42)
            self.state = 2140
            self.type_(0)
            self.state = 2141
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractElementExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_extractElementExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractElementExpr" ):
                listener.enterExtractElementExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractElementExpr" ):
                listener.exitExtractElementExpr(self)




    def extractElementExpr(self):

        localctx = LLVMIRParser.ExtractElementExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_extractElementExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.match(LLVMIRParser.T__139)
            self.state = 2144
            self.match(LLVMIRParser.T__25)
            self.state = 2145
            self.typeConst()
            self.state = 2146
            self.match(LLVMIRParser.T__14)
            self.state = 2147
            self.typeConst()
            self.state = 2148
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertElementExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_insertElementExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertElementExpr" ):
                listener.enterInsertElementExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertElementExpr" ):
                listener.exitInsertElementExpr(self)




    def insertElementExpr(self):

        localctx = LLVMIRParser.InsertElementExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_insertElementExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2150
            self.match(LLVMIRParser.T__140)
            self.state = 2151
            self.match(LLVMIRParser.T__25)
            self.state = 2152
            self.typeConst()
            self.state = 2153
            self.match(LLVMIRParser.T__14)
            self.state = 2154
            self.typeConst()
            self.state = 2155
            self.match(LLVMIRParser.T__14)
            self.state = 2156
            self.typeConst()
            self.state = 2157
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShuffleVectorExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_shuffleVectorExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShuffleVectorExpr" ):
                listener.enterShuffleVectorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShuffleVectorExpr" ):
                listener.exitShuffleVectorExpr(self)




    def shuffleVectorExpr(self):

        localctx = LLVMIRParser.ShuffleVectorExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_shuffleVectorExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2159
            self.match(LLVMIRParser.T__141)
            self.state = 2160
            self.match(LLVMIRParser.T__25)
            self.state = 2161
            self.typeConst()
            self.state = 2162
            self.match(LLVMIRParser.T__14)
            self.state = 2163
            self.typeConst()
            self.state = 2164
            self.match(LLVMIRParser.T__14)
            self.state = 2165
            self.typeConst()
            self.state = 2166
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShlExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_shlExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShlExpr" ):
                listener.enterShlExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShlExpr" ):
                listener.exitShlExpr(self)




    def shlExpr(self):

        localctx = LLVMIRParser.ShlExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_shlExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2168
            self.match(LLVMIRParser.T__142)
            self.state = 2172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2169
                self.overflowFlag()
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2175
            self.match(LLVMIRParser.T__25)
            self.state = 2176
            self.typeConst()
            self.state = 2177
            self.match(LLVMIRParser.T__14)
            self.state = 2178
            self.typeConst()
            self.state = 2179
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LShrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exact = None # Token

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_lShrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLShrExpr" ):
                listener.enterLShrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLShrExpr" ):
                listener.exitLShrExpr(self)




    def lShrExpr(self):

        localctx = LLVMIRParser.LShrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_lShrExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.match(LLVMIRParser.T__143)
            self.state = 2183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2182
                localctx.exact = self.match(LLVMIRParser.T__144)


            self.state = 2185
            self.match(LLVMIRParser.T__25)
            self.state = 2186
            self.typeConst()
            self.state = 2187
            self.match(LLVMIRParser.T__14)
            self.state = 2188
            self.typeConst()
            self.state = 2189
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AShrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exact = None # Token

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_aShrExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAShrExpr" ):
                listener.enterAShrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAShrExpr" ):
                listener.exitAShrExpr(self)




    def aShrExpr(self):

        localctx = LLVMIRParser.AShrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_aShrExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(LLVMIRParser.T__145)
            self.state = 2193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2192
                localctx.exact = self.match(LLVMIRParser.T__144)


            self.state = 2195
            self.match(LLVMIRParser.T__25)
            self.state = 2196
            self.typeConst()
            self.state = 2197
            self.match(LLVMIRParser.T__14)
            self.state = 2198
            self.typeConst()
            self.state = 2199
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_andExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpr" ):
                listener.enterAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpr" ):
                listener.exitAndExpr(self)




    def andExpr(self):

        localctx = LLVMIRParser.AndExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_andExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2201
            self.match(LLVMIRParser.T__146)
            self.state = 2202
            self.match(LLVMIRParser.T__25)
            self.state = 2203
            self.typeConst()
            self.state = 2204
            self.match(LLVMIRParser.T__14)
            self.state = 2205
            self.typeConst()
            self.state = 2206
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_orExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpr" ):
                listener.enterOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpr" ):
                listener.exitOrExpr(self)




    def orExpr(self):

        localctx = LLVMIRParser.OrExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_orExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2208
            self.match(LLVMIRParser.T__147)
            self.state = 2209
            self.match(LLVMIRParser.T__25)
            self.state = 2210
            self.typeConst()
            self.state = 2211
            self.match(LLVMIRParser.T__14)
            self.state = 2212
            self.typeConst()
            self.state = 2213
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XorExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_xorExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXorExpr" ):
                listener.enterXorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXorExpr" ):
                listener.exitXorExpr(self)




    def xorExpr(self):

        localctx = LLVMIRParser.XorExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_xorExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.match(LLVMIRParser.T__148)
            self.state = 2216
            self.match(LLVMIRParser.T__25)
            self.state = 2217
            self.typeConst()
            self.state = 2218
            self.match(LLVMIRParser.T__14)
            self.state = 2219
            self.typeConst()
            self.state = 2220
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_addExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddExpr" ):
                listener.enterAddExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddExpr" ):
                listener.exitAddExpr(self)




    def addExpr(self):

        localctx = LLVMIRParser.AddExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_addExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            self.match(LLVMIRParser.T__149)
            self.state = 2226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2223
                self.overflowFlag()
                self.state = 2228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2229
            self.match(LLVMIRParser.T__25)
            self.state = 2230
            self.typeConst()
            self.state = 2231
            self.match(LLVMIRParser.T__14)
            self.state = 2232
            self.typeConst()
            self.state = 2233
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_subExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubExpr" ):
                listener.enterSubExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubExpr" ):
                listener.exitSubExpr(self)




    def subExpr(self):

        localctx = LLVMIRParser.SubExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_subExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2235
            self.match(LLVMIRParser.T__150)
            self.state = 2239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2236
                self.overflowFlag()
                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2242
            self.match(LLVMIRParser.T__25)
            self.state = 2243
            self.typeConst()
            self.state = 2244
            self.match(LLVMIRParser.T__14)
            self.state = 2245
            self.typeConst()
            self.state = 2246
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeConstContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,i)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_mulExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulExpr" ):
                listener.enterMulExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulExpr" ):
                listener.exitMulExpr(self)




    def mulExpr(self):

        localctx = LLVMIRParser.MulExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_mulExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2248
            self.match(LLVMIRParser.T__151)
            self.state = 2252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2249
                self.overflowFlag()
                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2255
            self.match(LLVMIRParser.T__25)
            self.state = 2256
            self.typeConst()
            self.state = 2257
            self.match(LLVMIRParser.T__14)
            self.state = 2258
            self.typeConst()
            self.state = 2259
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FNegExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConst(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fNegExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFNegExpr" ):
                listener.enterFNegExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFNegExpr" ):
                listener.exitFNegExpr(self)




    def fNegExpr(self):

        localctx = LLVMIRParser.FNegExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_fNegExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.match(LLVMIRParser.T__152)
            self.state = 2262
            self.match(LLVMIRParser.T__25)
            self.state = 2263
            self.typeConst()
            self.state = 2264
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalDefInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def valueInstruction(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueInstructionContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_localDefInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalDefInst" ):
                listener.enterLocalDefInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalDefInst" ):
                listener.exitLocalDefInst(self)




    def localDefInst(self):

        localctx = LLVMIRParser.LocalDefInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_localDefInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2266
            self.match(LLVMIRParser.LocalIdent)
            self.state = 2267
            self.match(LLVMIRParser.T__1)
            self.state = 2268
            self.valueInstruction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueInstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fNegInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FNegInstContext,0)


        def addInst(self):
            return self.getTypedRuleContext(LLVMIRParser.AddInstContext,0)


        def fAddInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FAddInstContext,0)


        def subInst(self):
            return self.getTypedRuleContext(LLVMIRParser.SubInstContext,0)


        def fSubInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FSubInstContext,0)


        def mulInst(self):
            return self.getTypedRuleContext(LLVMIRParser.MulInstContext,0)


        def fMulInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FMulInstContext,0)


        def uDivInst(self):
            return self.getTypedRuleContext(LLVMIRParser.UDivInstContext,0)


        def sDivInst(self):
            return self.getTypedRuleContext(LLVMIRParser.SDivInstContext,0)


        def fDivInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FDivInstContext,0)


        def uRemInst(self):
            return self.getTypedRuleContext(LLVMIRParser.URemInstContext,0)


        def sRemInst(self):
            return self.getTypedRuleContext(LLVMIRParser.SRemInstContext,0)


        def fRemInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FRemInstContext,0)


        def shlInst(self):
            return self.getTypedRuleContext(LLVMIRParser.ShlInstContext,0)


        def lShrInst(self):
            return self.getTypedRuleContext(LLVMIRParser.LShrInstContext,0)


        def aShrInst(self):
            return self.getTypedRuleContext(LLVMIRParser.AShrInstContext,0)


        def andInst(self):
            return self.getTypedRuleContext(LLVMIRParser.AndInstContext,0)


        def orInst(self):
            return self.getTypedRuleContext(LLVMIRParser.OrInstContext,0)


        def xorInst(self):
            return self.getTypedRuleContext(LLVMIRParser.XorInstContext,0)


        def extractElementInst(self):
            return self.getTypedRuleContext(LLVMIRParser.ExtractElementInstContext,0)


        def insertElementInst(self):
            return self.getTypedRuleContext(LLVMIRParser.InsertElementInstContext,0)


        def shuffleVectorInst(self):
            return self.getTypedRuleContext(LLVMIRParser.ShuffleVectorInstContext,0)


        def extractValueInst(self):
            return self.getTypedRuleContext(LLVMIRParser.ExtractValueInstContext,0)


        def insertValueInst(self):
            return self.getTypedRuleContext(LLVMIRParser.InsertValueInstContext,0)


        def allocaInst(self):
            return self.getTypedRuleContext(LLVMIRParser.AllocaInstContext,0)


        def loadInst(self):
            return self.getTypedRuleContext(LLVMIRParser.LoadInstContext,0)


        def cmpXchgInst(self):
            return self.getTypedRuleContext(LLVMIRParser.CmpXchgInstContext,0)


        def atomicRMWInst(self):
            return self.getTypedRuleContext(LLVMIRParser.AtomicRMWInstContext,0)


        def getElementPtrInst(self):
            return self.getTypedRuleContext(LLVMIRParser.GetElementPtrInstContext,0)


        def truncInst(self):
            return self.getTypedRuleContext(LLVMIRParser.TruncInstContext,0)


        def zExtInst(self):
            return self.getTypedRuleContext(LLVMIRParser.ZExtInstContext,0)


        def sExtInst(self):
            return self.getTypedRuleContext(LLVMIRParser.SExtInstContext,0)


        def fpTruncInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FpTruncInstContext,0)


        def fpExtInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FpExtInstContext,0)


        def fpToUiInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FpToUiInstContext,0)


        def fpToSiInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FpToSiInstContext,0)


        def uiToFpInst(self):
            return self.getTypedRuleContext(LLVMIRParser.UiToFpInstContext,0)


        def siToFpInst(self):
            return self.getTypedRuleContext(LLVMIRParser.SiToFpInstContext,0)


        def ptrToIntInst(self):
            return self.getTypedRuleContext(LLVMIRParser.PtrToIntInstContext,0)


        def intToPtrInst(self):
            return self.getTypedRuleContext(LLVMIRParser.IntToPtrInstContext,0)


        def bitCastInst(self):
            return self.getTypedRuleContext(LLVMIRParser.BitCastInstContext,0)


        def addrSpaceCastInst(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceCastInstContext,0)


        def iCmpInst(self):
            return self.getTypedRuleContext(LLVMIRParser.ICmpInstContext,0)


        def fCmpInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FCmpInstContext,0)


        def phiInst(self):
            return self.getTypedRuleContext(LLVMIRParser.PhiInstContext,0)


        def selectInst(self):
            return self.getTypedRuleContext(LLVMIRParser.SelectInstContext,0)


        def freezeInst(self):
            return self.getTypedRuleContext(LLVMIRParser.FreezeInstContext,0)


        def callInst(self):
            return self.getTypedRuleContext(LLVMIRParser.CallInstContext,0)


        def vaargInst(self):
            return self.getTypedRuleContext(LLVMIRParser.VaargInstContext,0)


        def landingPadInst(self):
            return self.getTypedRuleContext(LLVMIRParser.LandingPadInstContext,0)


        def catchPadInst(self):
            return self.getTypedRuleContext(LLVMIRParser.CatchPadInstContext,0)


        def cleanupPadInst(self):
            return self.getTypedRuleContext(LLVMIRParser.CleanupPadInstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_valueInstruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueInstruction" ):
                listener.enterValueInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueInstruction" ):
                listener.exitValueInstruction(self)




    def valueInstruction(self):

        localctx = LLVMIRParser.ValueInstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_valueInstruction)
        try:
            self.state = 2322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2270
                self.fNegInst()
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2271
                self.addInst()
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2272
                self.fAddInst()
                pass
            elif token in [151]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2273
                self.subInst()
                pass
            elif token in [160]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2274
                self.fSubInst()
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2275
                self.mulInst()
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2276
                self.fMulInst()
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2277
                self.uDivInst()
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2278
                self.sDivInst()
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2279
                self.fDivInst()
                pass
            elif token in [165]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2280
                self.uRemInst()
                pass
            elif token in [166]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2281
                self.sRemInst()
                pass
            elif token in [167]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2282
                self.fRemInst()
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2283
                self.shlInst()
                pass
            elif token in [144]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2284
                self.lShrInst()
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2285
                self.aShrInst()
                pass
            elif token in [147]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2286
                self.andInst()
                pass
            elif token in [148]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2287
                self.orInst()
                pass
            elif token in [149]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2288
                self.xorInst()
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2289
                self.extractElementInst()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2290
                self.insertElementInst()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 22)
                self.state = 2291
                self.shuffleVectorInst()
                pass
            elif token in [168]:
                self.enterOuterAlt(localctx, 23)
                self.state = 2292
                self.extractValueInst()
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 24)
                self.state = 2293
                self.insertValueInst()
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 25)
                self.state = 2294
                self.allocaInst()
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 26)
                self.state = 2295
                self.loadInst()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 27)
                self.state = 2296
                self.cmpXchgInst()
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 28)
                self.state = 2297
                self.atomicRMWInst()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 29)
                self.state = 2298
                self.getElementPtrInst()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 30)
                self.state = 2299
                self.truncInst()
                pass
            elif token in [131]:
                self.enterOuterAlt(localctx, 31)
                self.state = 2300
                self.zExtInst()
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 32)
                self.state = 2301
                self.sExtInst()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 33)
                self.state = 2302
                self.fpTruncInst()
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 34)
                self.state = 2303
                self.fpExtInst()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 35)
                self.state = 2304
                self.fpToUiInst()
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 36)
                self.state = 2305
                self.fpToSiInst()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 37)
                self.state = 2306
                self.uiToFpInst()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 38)
                self.state = 2307
                self.siToFpInst()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 39)
                self.state = 2308
                self.ptrToIntInst()
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 40)
                self.state = 2309
                self.intToPtrInst()
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 41)
                self.state = 2310
                self.bitCastInst()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 42)
                self.state = 2311
                self.addrSpaceCastInst()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 43)
                self.state = 2312
                self.iCmpInst()
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 44)
                self.state = 2313
                self.fCmpInst()
                pass
            elif token in [175]:
                self.enterOuterAlt(localctx, 45)
                self.state = 2314
                self.phiInst()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 46)
                self.state = 2315
                self.selectInst()
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 47)
                self.state = 2316
                self.freezeInst()
                pass
            elif token in [177, 178, 179, 180]:
                self.enterOuterAlt(localctx, 48)
                self.state = 2317
                self.callInst()
                pass
            elif token in [181]:
                self.enterOuterAlt(localctx, 49)
                self.state = 2318
                self.vaargInst()
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 50)
                self.state = 2319
                self.landingPadInst()
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 51)
                self.state = 2320
                self.catchPadInst()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 52)
                self.state = 2321
                self.cleanupPadInst()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StoreInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.volatile = None # Token
            self.atomic = None # Token

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMIRParser.AtomicOrderingContext,0)


        def syncScope(self):
            return self.getTypedRuleContext(LLVMIRParser.SyncScopeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_storeInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStoreInst" ):
                listener.enterStoreInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStoreInst" ):
                listener.exitStoreInst(self)




    def storeInst(self):

        localctx = LLVMIRParser.StoreInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_storeInst)
        self._la = 0 # Token type
        try:
            self.state = 2365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2324
                self.match(LLVMIRParser.T__153)
                self.state = 2326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==155:
                    self.state = 2325
                    localctx.volatile = self.match(LLVMIRParser.T__154)


                self.state = 2328
                self.typeValue()
                self.state = 2329
                self.match(LLVMIRParser.T__14)
                self.state = 2330
                self.typeValue()
                self.state = 2333
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 2331
                    self.match(LLVMIRParser.T__14)
                    self.state = 2332
                    self.align()


                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2335
                    self.match(LLVMIRParser.T__14)
                    self.state = 2336
                    self.metadataAttachment()
                    self.state = 2341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2342
                self.match(LLVMIRParser.T__153)
                self.state = 2343
                localctx.atomic = self.match(LLVMIRParser.T__155)
                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==155:
                    self.state = 2344
                    localctx.volatile = self.match(LLVMIRParser.T__154)


                self.state = 2347
                self.typeValue()
                self.state = 2348
                self.match(LLVMIRParser.T__14)
                self.state = 2349
                self.typeValue()
                self.state = 2351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 2350
                    self.syncScope()


                self.state = 2353
                self.atomicOrdering()
                self.state = 2356
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 2354
                    self.match(LLVMIRParser.T__14)
                    self.state = 2355
                    self.align()


                self.state = 2362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2358
                    self.match(LLVMIRParser.T__14)
                    self.state = 2359
                    self.metadataAttachment()
                    self.state = 2364
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyncScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_syncScope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyncScope" ):
                listener.enterSyncScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyncScope" ):
                listener.exitSyncScope(self)




    def syncScope(self):

        localctx = LLVMIRParser.SyncScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_syncScope)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2367
            self.match(LLVMIRParser.T__156)
            self.state = 2368
            self.match(LLVMIRParser.T__25)
            self.state = 2369
            self.match(LLVMIRParser.StringLit)
            self.state = 2370
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FenceInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMIRParser.AtomicOrderingContext,0)


        def syncScope(self):
            return self.getTypedRuleContext(LLVMIRParser.SyncScopeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fenceInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFenceInst" ):
                listener.enterFenceInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFenceInst" ):
                listener.exitFenceInst(self)




    def fenceInst(self):

        localctx = LLVMIRParser.FenceInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_fenceInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2372
            self.match(LLVMIRParser.T__157)
            self.state = 2374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 2373
                self.syncScope()


            self.state = 2376
            self.atomicOrdering()
            self.state = 2381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2377
                self.match(LLVMIRParser.T__14)
                self.state = 2378
                self.metadataAttachment()
                self.state = 2383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FNegInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fNegInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFNegInst" ):
                listener.enterFNegInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFNegInst" ):
                listener.exitFNegInst(self)




    def fNegInst(self):

        localctx = LLVMIRParser.FNegInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_fNegInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(LLVMIRParser.T__152)
            self.state = 2388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 2385
                self.fastMathFlag()
                self.state = 2390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2391
            self.typeValue()
            self.state = 2396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2392
                self.match(LLVMIRParser.T__14)
                self.state = 2393
                self.metadataAttachment()
                self.state = 2398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_addInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddInst" ):
                listener.enterAddInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddInst" ):
                listener.exitAddInst(self)




    def addInst(self):

        localctx = LLVMIRParser.AddInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_addInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2399
            self.match(LLVMIRParser.T__149)
            self.state = 2403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2400
                self.overflowFlag()
                self.state = 2405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2406
            self.typeValue()
            self.state = 2407
            self.match(LLVMIRParser.T__14)
            self.state = 2408
            self.value()
            self.state = 2413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2409
                self.match(LLVMIRParser.T__14)
                self.state = 2410
                self.metadataAttachment()
                self.state = 2415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FAddInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fAddInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFAddInst" ):
                listener.enterFAddInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFAddInst" ):
                listener.exitFAddInst(self)




    def fAddInst(self):

        localctx = LLVMIRParser.FAddInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_fAddInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2416
            self.match(LLVMIRParser.T__158)
            self.state = 2420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 2417
                self.fastMathFlag()
                self.state = 2422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2423
            self.typeValue()
            self.state = 2424
            self.match(LLVMIRParser.T__14)
            self.state = 2425
            self.value()
            self.state = 2430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2426
                self.match(LLVMIRParser.T__14)
                self.state = 2427
                self.metadataAttachment()
                self.state = 2432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_subInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubInst" ):
                listener.enterSubInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubInst" ):
                listener.exitSubInst(self)




    def subInst(self):

        localctx = LLVMIRParser.SubInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_subInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(LLVMIRParser.T__150)
            self.state = 2437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2434
                self.overflowFlag()
                self.state = 2439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2440
            self.typeValue()
            self.state = 2441
            self.match(LLVMIRParser.T__14)
            self.state = 2442
            self.value()
            self.state = 2447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2443
                self.match(LLVMIRParser.T__14)
                self.state = 2444
                self.metadataAttachment()
                self.state = 2449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FSubInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fSubInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFSubInst" ):
                listener.enterFSubInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFSubInst" ):
                listener.exitFSubInst(self)




    def fSubInst(self):

        localctx = LLVMIRParser.FSubInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_fSubInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2450
            self.match(LLVMIRParser.T__159)
            self.state = 2454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 2451
                self.fastMathFlag()
                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2457
            self.typeValue()
            self.state = 2458
            self.match(LLVMIRParser.T__14)
            self.state = 2459
            self.value()
            self.state = 2464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2460
                self.match(LLVMIRParser.T__14)
                self.state = 2461
                self.metadataAttachment()
                self.state = 2466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MulInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_mulInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMulInst" ):
                listener.enterMulInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMulInst" ):
                listener.exitMulInst(self)




    def mulInst(self):

        localctx = LLVMIRParser.MulInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_mulInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.match(LLVMIRParser.T__151)
            self.state = 2471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2468
                self.overflowFlag()
                self.state = 2473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2474
            self.typeValue()
            self.state = 2475
            self.match(LLVMIRParser.T__14)
            self.state = 2476
            self.value()
            self.state = 2481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2477
                self.match(LLVMIRParser.T__14)
                self.state = 2478
                self.metadataAttachment()
                self.state = 2483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FMulInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fMulInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFMulInst" ):
                listener.enterFMulInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFMulInst" ):
                listener.exitFMulInst(self)




    def fMulInst(self):

        localctx = LLVMIRParser.FMulInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_fMulInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2484
            self.match(LLVMIRParser.T__160)
            self.state = 2488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 2485
                self.fastMathFlag()
                self.state = 2490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2491
            self.typeValue()
            self.state = 2492
            self.match(LLVMIRParser.T__14)
            self.state = 2493
            self.value()
            self.state = 2498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2494
                self.match(LLVMIRParser.T__14)
                self.state = 2495
                self.metadataAttachment()
                self.state = 2500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UDivInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exact = None # Token

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_uDivInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDivInst" ):
                listener.enterUDivInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDivInst" ):
                listener.exitUDivInst(self)




    def uDivInst(self):

        localctx = LLVMIRParser.UDivInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_uDivInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2501
            self.match(LLVMIRParser.T__161)
            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2502
                localctx.exact = self.match(LLVMIRParser.T__144)


            self.state = 2505
            self.typeValue()
            self.state = 2506
            self.match(LLVMIRParser.T__14)
            self.state = 2507
            self.value()
            self.state = 2512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2508
                self.match(LLVMIRParser.T__14)
                self.state = 2509
                self.metadataAttachment()
                self.state = 2514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SDivInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exact = None # Token

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_sDivInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSDivInst" ):
                listener.enterSDivInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSDivInst" ):
                listener.exitSDivInst(self)




    def sDivInst(self):

        localctx = LLVMIRParser.SDivInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_sDivInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            self.match(LLVMIRParser.T__162)
            self.state = 2517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2516
                localctx.exact = self.match(LLVMIRParser.T__144)


            self.state = 2519
            self.typeValue()
            self.state = 2520
            self.match(LLVMIRParser.T__14)
            self.state = 2521
            self.value()
            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2522
                self.match(LLVMIRParser.T__14)
                self.state = 2523
                self.metadataAttachment()
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FDivInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fDivInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFDivInst" ):
                listener.enterFDivInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFDivInst" ):
                listener.exitFDivInst(self)




    def fDivInst(self):

        localctx = LLVMIRParser.FDivInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_fDivInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self.match(LLVMIRParser.T__163)
            self.state = 2533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 2530
                self.fastMathFlag()
                self.state = 2535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2536
            self.typeValue()
            self.state = 2537
            self.match(LLVMIRParser.T__14)
            self.state = 2538
            self.value()
            self.state = 2543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2539
                self.match(LLVMIRParser.T__14)
                self.state = 2540
                self.metadataAttachment()
                self.state = 2545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class URemInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_uRemInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterURemInst" ):
                listener.enterURemInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitURemInst" ):
                listener.exitURemInst(self)




    def uRemInst(self):

        localctx = LLVMIRParser.URemInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_uRemInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2546
            self.match(LLVMIRParser.T__164)
            self.state = 2547
            self.typeValue()
            self.state = 2548
            self.match(LLVMIRParser.T__14)
            self.state = 2549
            self.value()
            self.state = 2554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2550
                self.match(LLVMIRParser.T__14)
                self.state = 2551
                self.metadataAttachment()
                self.state = 2556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SRemInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_sRemInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSRemInst" ):
                listener.enterSRemInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSRemInst" ):
                listener.exitSRemInst(self)




    def sRemInst(self):

        localctx = LLVMIRParser.SRemInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_sRemInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2557
            self.match(LLVMIRParser.T__165)
            self.state = 2558
            self.typeValue()
            self.state = 2559
            self.match(LLVMIRParser.T__14)
            self.state = 2560
            self.value()
            self.state = 2565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2561
                self.match(LLVMIRParser.T__14)
                self.state = 2562
                self.metadataAttachment()
                self.state = 2567
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FRemInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fRemInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFRemInst" ):
                listener.enterFRemInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFRemInst" ):
                listener.exitFRemInst(self)




    def fRemInst(self):

        localctx = LLVMIRParser.FRemInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_fRemInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2568
            self.match(LLVMIRParser.T__166)
            self.state = 2572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 2569
                self.fastMathFlag()
                self.state = 2574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2575
            self.typeValue()
            self.state = 2576
            self.match(LLVMIRParser.T__14)
            self.state = 2577
            self.value()
            self.state = 2582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2578
                self.match(LLVMIRParser.T__14)
                self.state = 2579
                self.metadataAttachment()
                self.state = 2584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShlInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def overflowFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OverflowFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OverflowFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_shlInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShlInst" ):
                listener.enterShlInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShlInst" ):
                listener.exitShlInst(self)




    def shlInst(self):

        localctx = LLVMIRParser.ShlInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_shlInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2585
            self.match(LLVMIRParser.T__142)
            self.state = 2589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==265 or _la==266:
                self.state = 2586
                self.overflowFlag()
                self.state = 2591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2592
            self.typeValue()
            self.state = 2593
            self.match(LLVMIRParser.T__14)
            self.state = 2594
            self.value()
            self.state = 2599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2595
                self.match(LLVMIRParser.T__14)
                self.state = 2596
                self.metadataAttachment()
                self.state = 2601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LShrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exact = None # Token

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_lShrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLShrInst" ):
                listener.enterLShrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLShrInst" ):
                listener.exitLShrInst(self)




    def lShrInst(self):

        localctx = LLVMIRParser.LShrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_lShrInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            self.match(LLVMIRParser.T__143)
            self.state = 2604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2603
                localctx.exact = self.match(LLVMIRParser.T__144)


            self.state = 2606
            self.typeValue()
            self.state = 2607
            self.match(LLVMIRParser.T__14)
            self.state = 2608
            self.value()
            self.state = 2613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2609
                self.match(LLVMIRParser.T__14)
                self.state = 2610
                self.metadataAttachment()
                self.state = 2615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AShrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exact = None # Token

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_aShrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAShrInst" ):
                listener.enterAShrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAShrInst" ):
                listener.exitAShrInst(self)




    def aShrInst(self):

        localctx = LLVMIRParser.AShrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_aShrInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.match(LLVMIRParser.T__145)
            self.state = 2618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 2617
                localctx.exact = self.match(LLVMIRParser.T__144)


            self.state = 2620
            self.typeValue()
            self.state = 2621
            self.match(LLVMIRParser.T__14)
            self.state = 2622
            self.value()
            self.state = 2627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2623
                self.match(LLVMIRParser.T__14)
                self.state = 2624
                self.metadataAttachment()
                self.state = 2629
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_andInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndInst" ):
                listener.enterAndInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndInst" ):
                listener.exitAndInst(self)




    def andInst(self):

        localctx = LLVMIRParser.AndInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_andInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            self.match(LLVMIRParser.T__146)
            self.state = 2631
            self.typeValue()
            self.state = 2632
            self.match(LLVMIRParser.T__14)
            self.state = 2633
            self.value()
            self.state = 2638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2634
                self.match(LLVMIRParser.T__14)
                self.state = 2635
                self.metadataAttachment()
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_orInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrInst" ):
                listener.enterOrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrInst" ):
                listener.exitOrInst(self)




    def orInst(self):

        localctx = LLVMIRParser.OrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_orInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.match(LLVMIRParser.T__147)
            self.state = 2642
            self.typeValue()
            self.state = 2643
            self.match(LLVMIRParser.T__14)
            self.state = 2644
            self.value()
            self.state = 2649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2645
                self.match(LLVMIRParser.T__14)
                self.state = 2646
                self.metadataAttachment()
                self.state = 2651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XorInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_xorInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXorInst" ):
                listener.enterXorInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXorInst" ):
                listener.exitXorInst(self)




    def xorInst(self):

        localctx = LLVMIRParser.XorInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_xorInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            self.match(LLVMIRParser.T__148)
            self.state = 2653
            self.typeValue()
            self.state = 2654
            self.match(LLVMIRParser.T__14)
            self.state = 2655
            self.value()
            self.state = 2660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2656
                self.match(LLVMIRParser.T__14)
                self.state = 2657
                self.metadataAttachment()
                self.state = 2662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractElementInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_extractElementInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractElementInst" ):
                listener.enterExtractElementInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractElementInst" ):
                listener.exitExtractElementInst(self)




    def extractElementInst(self):

        localctx = LLVMIRParser.ExtractElementInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_extractElementInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2663
            self.match(LLVMIRParser.T__139)
            self.state = 2664
            self.typeValue()
            self.state = 2665
            self.match(LLVMIRParser.T__14)
            self.state = 2666
            self.typeValue()
            self.state = 2671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2667
                self.match(LLVMIRParser.T__14)
                self.state = 2668
                self.metadataAttachment()
                self.state = 2673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertElementInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_insertElementInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertElementInst" ):
                listener.enterInsertElementInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertElementInst" ):
                listener.exitInsertElementInst(self)




    def insertElementInst(self):

        localctx = LLVMIRParser.InsertElementInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_insertElementInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2674
            self.match(LLVMIRParser.T__140)
            self.state = 2675
            self.typeValue()
            self.state = 2676
            self.match(LLVMIRParser.T__14)
            self.state = 2677
            self.typeValue()
            self.state = 2678
            self.match(LLVMIRParser.T__14)
            self.state = 2679
            self.typeValue()
            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2680
                self.match(LLVMIRParser.T__14)
                self.state = 2681
                self.metadataAttachment()
                self.state = 2686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShuffleVectorInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_shuffleVectorInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShuffleVectorInst" ):
                listener.enterShuffleVectorInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShuffleVectorInst" ):
                listener.exitShuffleVectorInst(self)




    def shuffleVectorInst(self):

        localctx = LLVMIRParser.ShuffleVectorInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_shuffleVectorInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2687
            self.match(LLVMIRParser.T__141)
            self.state = 2688
            self.typeValue()
            self.state = 2689
            self.match(LLVMIRParser.T__14)
            self.state = 2690
            self.typeValue()
            self.state = 2691
            self.match(LLVMIRParser.T__14)
            self.state = 2692
            self.typeValue()
            self.state = 2697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2693
                self.match(LLVMIRParser.T__14)
                self.state = 2694
                self.metadataAttachment()
                self.state = 2699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtractValueInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def IntLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.IntLit)
            else:
                return self.getToken(LLVMIRParser.IntLit, i)

        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_extractValueInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractValueInst" ):
                listener.enterExtractValueInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractValueInst" ):
                listener.exitExtractValueInst(self)




    def extractValueInst(self):

        localctx = LLVMIRParser.ExtractValueInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_extractValueInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2700
            self.match(LLVMIRParser.T__167)
            self.state = 2701
            self.typeValue()
            self.state = 2704 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2702
                    self.match(LLVMIRParser.T__14)
                    self.state = 2703
                    self.match(LLVMIRParser.IntLit)

                else:
                    raise NoViableAltException(self)
                self.state = 2706 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

            self.state = 2712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2708
                self.match(LLVMIRParser.T__14)
                self.state = 2709
                self.metadataAttachment()
                self.state = 2714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertValueInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def IntLit(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.IntLit)
            else:
                return self.getToken(LLVMIRParser.IntLit, i)

        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_insertValueInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertValueInst" ):
                listener.enterInsertValueInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertValueInst" ):
                listener.exitInsertValueInst(self)




    def insertValueInst(self):

        localctx = LLVMIRParser.InsertValueInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_insertValueInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2715
            self.match(LLVMIRParser.T__168)
            self.state = 2716
            self.typeValue()
            self.state = 2717
            self.match(LLVMIRParser.T__14)
            self.state = 2718
            self.typeValue()
            self.state = 2721 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2719
                    self.match(LLVMIRParser.T__14)
                    self.state = 2720
                    self.match(LLVMIRParser.IntLit)

                else:
                    raise NoViableAltException(self)
                self.state = 2723 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

            self.state = 2729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2725
                self.match(LLVMIRParser.T__14)
                self.state = 2726
                self.metadataAttachment()
                self.state = 2731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocaInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.inAllocaTok = None # Token
            self.swiftError = None # Token

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_allocaInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocaInst" ):
                listener.enterAllocaInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocaInst" ):
                listener.exitAllocaInst(self)




    def allocaInst(self):

        localctx = LLVMIRParser.AllocaInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_allocaInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2732
            self.match(LLVMIRParser.T__169)
            self.state = 2734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 2733
                localctx.inAllocaTok = self.match(LLVMIRParser.T__91)


            self.state = 2737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 2736
                localctx.swiftError = self.match(LLVMIRParser.T__107)


            self.state = 2739
            self.type_(0)
            self.state = 2742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 2740
                self.match(LLVMIRParser.T__14)
                self.state = 2741
                self.typeValue()


            self.state = 2746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 2744
                self.match(LLVMIRParser.T__14)
                self.state = 2745
                self.align()


            self.state = 2750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 2748
                self.match(LLVMIRParser.T__14)
                self.state = 2749
                self.addrSpace()


            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2752
                self.match(LLVMIRParser.T__14)
                self.state = 2753
                self.metadataAttachment()
                self.state = 2758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.volatile = None # Token
            self.atomic = None # Token

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMIRParser.AtomicOrderingContext,0)


        def syncScope(self):
            return self.getTypedRuleContext(LLVMIRParser.SyncScopeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_loadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadInst" ):
                listener.enterLoadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadInst" ):
                listener.exitLoadInst(self)




    def loadInst(self):

        localctx = LLVMIRParser.LoadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_loadInst)
        self._la = 0 # Token type
        try:
            self.state = 2800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2759
                self.match(LLVMIRParser.T__170)
                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==155:
                    self.state = 2760
                    localctx.volatile = self.match(LLVMIRParser.T__154)


                self.state = 2763
                self.type_(0)
                self.state = 2764
                self.match(LLVMIRParser.T__14)
                self.state = 2765
                self.typeValue()
                self.state = 2768
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 2766
                    self.match(LLVMIRParser.T__14)
                    self.state = 2767
                    self.align()


                self.state = 2774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2770
                    self.match(LLVMIRParser.T__14)
                    self.state = 2771
                    self.metadataAttachment()
                    self.state = 2776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2777
                self.match(LLVMIRParser.T__170)
                self.state = 2778
                localctx.atomic = self.match(LLVMIRParser.T__155)
                self.state = 2780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==155:
                    self.state = 2779
                    localctx.volatile = self.match(LLVMIRParser.T__154)


                self.state = 2782
                self.type_(0)
                self.state = 2783
                self.match(LLVMIRParser.T__14)
                self.state = 2784
                self.typeValue()
                self.state = 2786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 2785
                    self.syncScope()


                self.state = 2788
                self.atomicOrdering()
                self.state = 2791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
                if la_ == 1:
                    self.state = 2789
                    self.match(LLVMIRParser.T__14)
                    self.state = 2790
                    self.align()


                self.state = 2797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 2793
                    self.match(LLVMIRParser.T__14)
                    self.state = 2794
                    self.metadataAttachment()
                    self.state = 2799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CmpXchgInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.weak = None # Token
            self.volatile = None # Token

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def atomicOrdering(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.AtomicOrderingContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.AtomicOrderingContext,i)


        def syncScope(self):
            return self.getTypedRuleContext(LLVMIRParser.SyncScopeContext,0)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_cmpXchgInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpXchgInst" ):
                listener.enterCmpXchgInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpXchgInst" ):
                listener.exitCmpXchgInst(self)




    def cmpXchgInst(self):

        localctx = LLVMIRParser.CmpXchgInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_cmpXchgInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2802
            self.match(LLVMIRParser.T__171)
            self.state = 2804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 2803
                localctx.weak = self.match(LLVMIRParser.T__172)


            self.state = 2807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 2806
                localctx.volatile = self.match(LLVMIRParser.T__154)


            self.state = 2809
            self.typeValue()
            self.state = 2810
            self.match(LLVMIRParser.T__14)
            self.state = 2811
            self.typeValue()
            self.state = 2812
            self.match(LLVMIRParser.T__14)
            self.state = 2813
            self.typeValue()
            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 2814
                self.syncScope()


            self.state = 2817
            self.atomicOrdering()
            self.state = 2818
            self.atomicOrdering()
            self.state = 2821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.state = 2819
                self.match(LLVMIRParser.T__14)
                self.state = 2820
                self.align()


            self.state = 2827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2823
                self.match(LLVMIRParser.T__14)
                self.state = 2824
                self.metadataAttachment()
                self.state = 2829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicRMWInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.volatile = None # Token

        def atomicOp(self):
            return self.getTypedRuleContext(LLVMIRParser.AtomicOpContext,0)


        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def atomicOrdering(self):
            return self.getTypedRuleContext(LLVMIRParser.AtomicOrderingContext,0)


        def syncScope(self):
            return self.getTypedRuleContext(LLVMIRParser.SyncScopeContext,0)


        def align(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_atomicRMWInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicRMWInst" ):
                listener.enterAtomicRMWInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicRMWInst" ):
                listener.exitAtomicRMWInst(self)




    def atomicRMWInst(self):

        localctx = LLVMIRParser.AtomicRMWInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_atomicRMWInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2830
            self.match(LLVMIRParser.T__173)
            self.state = 2832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 2831
                localctx.volatile = self.match(LLVMIRParser.T__154)


            self.state = 2834
            self.atomicOp()
            self.state = 2835
            self.typeValue()
            self.state = 2836
            self.match(LLVMIRParser.T__14)
            self.state = 2837
            self.typeValue()
            self.state = 2839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==157:
                self.state = 2838
                self.syncScope()


            self.state = 2841
            self.atomicOrdering()
            self.state = 2844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 2842
                self.match(LLVMIRParser.T__14)
                self.state = 2843
                self.align()


            self.state = 2850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2846
                self.match(LLVMIRParser.T__14)
                self.state = 2847
                self.metadataAttachment()
                self.state = 2852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetElementPtrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def inBounds(self):
            return self.getTypedRuleContext(LLVMIRParser.InBoundsContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_getElementPtrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetElementPtrInst" ):
                listener.enterGetElementPtrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetElementPtrInst" ):
                listener.exitGetElementPtrInst(self)




    def getElementPtrInst(self):

        localctx = LLVMIRParser.GetElementPtrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_getElementPtrInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2853
            self.match(LLVMIRParser.T__122)
            self.state = 2855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==264:
                self.state = 2854
                self.inBounds()


            self.state = 2857
            self.type_(0)
            self.state = 2858
            self.match(LLVMIRParser.T__14)
            self.state = 2859
            self.typeValue()
            self.state = 2864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2860
                    self.match(LLVMIRParser.T__14)
                    self.state = 2861
                    self.typeValue() 
                self.state = 2866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2867
                self.match(LLVMIRParser.T__14)
                self.state = 2868
                self.metadataAttachment()
                self.state = 2873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_truncInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncInst" ):
                listener.enterTruncInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncInst" ):
                listener.exitTruncInst(self)




    def truncInst(self):

        localctx = LLVMIRParser.TruncInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_truncInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2874
            self.match(LLVMIRParser.T__129)
            self.state = 2875
            self.typeValue()
            self.state = 2876
            self.match(LLVMIRParser.T__42)
            self.state = 2877
            self.type_(0)
            self.state = 2882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2878
                self.match(LLVMIRParser.T__14)
                self.state = 2879
                self.metadataAttachment()
                self.state = 2884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ZExtInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_zExtInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZExtInst" ):
                listener.enterZExtInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZExtInst" ):
                listener.exitZExtInst(self)




    def zExtInst(self):

        localctx = LLVMIRParser.ZExtInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_zExtInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2885
            self.match(LLVMIRParser.T__130)
            self.state = 2886
            self.typeValue()
            self.state = 2887
            self.match(LLVMIRParser.T__42)
            self.state = 2888
            self.type_(0)
            self.state = 2893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2889
                self.match(LLVMIRParser.T__14)
                self.state = 2890
                self.metadataAttachment()
                self.state = 2895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SExtInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_sExtInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSExtInst" ):
                listener.enterSExtInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSExtInst" ):
                listener.exitSExtInst(self)




    def sExtInst(self):

        localctx = LLVMIRParser.SExtInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_sExtInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2896
            self.match(LLVMIRParser.T__131)
            self.state = 2897
            self.typeValue()
            self.state = 2898
            self.match(LLVMIRParser.T__42)
            self.state = 2899
            self.type_(0)
            self.state = 2904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2900
                self.match(LLVMIRParser.T__14)
                self.state = 2901
                self.metadataAttachment()
                self.state = 2906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpTruncInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpTruncInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpTruncInst" ):
                listener.enterFpTruncInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpTruncInst" ):
                listener.exitFpTruncInst(self)




    def fpTruncInst(self):

        localctx = LLVMIRParser.FpTruncInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_fpTruncInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2907
            self.match(LLVMIRParser.T__132)
            self.state = 2908
            self.typeValue()
            self.state = 2909
            self.match(LLVMIRParser.T__42)
            self.state = 2910
            self.type_(0)
            self.state = 2915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2911
                self.match(LLVMIRParser.T__14)
                self.state = 2912
                self.metadataAttachment()
                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpExtInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpExtInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpExtInst" ):
                listener.enterFpExtInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpExtInst" ):
                listener.exitFpExtInst(self)




    def fpExtInst(self):

        localctx = LLVMIRParser.FpExtInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_fpExtInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2918
            self.match(LLVMIRParser.T__133)
            self.state = 2919
            self.typeValue()
            self.state = 2920
            self.match(LLVMIRParser.T__42)
            self.state = 2921
            self.type_(0)
            self.state = 2926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2922
                self.match(LLVMIRParser.T__14)
                self.state = 2923
                self.metadataAttachment()
                self.state = 2928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToUiInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpToUiInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToUiInst" ):
                listener.enterFpToUiInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToUiInst" ):
                listener.exitFpToUiInst(self)




    def fpToUiInst(self):

        localctx = LLVMIRParser.FpToUiInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_fpToUiInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2929
            self.match(LLVMIRParser.T__134)
            self.state = 2930
            self.typeValue()
            self.state = 2931
            self.match(LLVMIRParser.T__42)
            self.state = 2932
            self.type_(0)
            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2933
                self.match(LLVMIRParser.T__14)
                self.state = 2934
                self.metadataAttachment()
                self.state = 2939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FpToSiInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fpToSiInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFpToSiInst" ):
                listener.enterFpToSiInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFpToSiInst" ):
                listener.exitFpToSiInst(self)




    def fpToSiInst(self):

        localctx = LLVMIRParser.FpToSiInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_fpToSiInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2940
            self.match(LLVMIRParser.T__135)
            self.state = 2941
            self.typeValue()
            self.state = 2942
            self.match(LLVMIRParser.T__42)
            self.state = 2943
            self.type_(0)
            self.state = 2948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2944
                self.match(LLVMIRParser.T__14)
                self.state = 2945
                self.metadataAttachment()
                self.state = 2950
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UiToFpInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_uiToFpInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUiToFpInst" ):
                listener.enterUiToFpInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUiToFpInst" ):
                listener.exitUiToFpInst(self)




    def uiToFpInst(self):

        localctx = LLVMIRParser.UiToFpInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_uiToFpInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2951
            self.match(LLVMIRParser.T__136)
            self.state = 2952
            self.typeValue()
            self.state = 2953
            self.match(LLVMIRParser.T__42)
            self.state = 2954
            self.type_(0)
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2955
                self.match(LLVMIRParser.T__14)
                self.state = 2956
                self.metadataAttachment()
                self.state = 2961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SiToFpInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_siToFpInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSiToFpInst" ):
                listener.enterSiToFpInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSiToFpInst" ):
                listener.exitSiToFpInst(self)




    def siToFpInst(self):

        localctx = LLVMIRParser.SiToFpInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_siToFpInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2962
            self.match(LLVMIRParser.T__137)
            self.state = 2963
            self.typeValue()
            self.state = 2964
            self.match(LLVMIRParser.T__42)
            self.state = 2965
            self.type_(0)
            self.state = 2970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2966
                self.match(LLVMIRParser.T__14)
                self.state = 2967
                self.metadataAttachment()
                self.state = 2972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrToIntInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_ptrToIntInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrToIntInst" ):
                listener.enterPtrToIntInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrToIntInst" ):
                listener.exitPtrToIntInst(self)




    def ptrToIntInst(self):

        localctx = LLVMIRParser.PtrToIntInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_ptrToIntInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2973
            self.match(LLVMIRParser.T__138)
            self.state = 2974
            self.typeValue()
            self.state = 2975
            self.match(LLVMIRParser.T__42)
            self.state = 2976
            self.type_(0)
            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2977
                self.match(LLVMIRParser.T__14)
                self.state = 2978
                self.metadataAttachment()
                self.state = 2983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntToPtrInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_intToPtrInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntToPtrInst" ):
                listener.enterIntToPtrInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntToPtrInst" ):
                listener.exitIntToPtrInst(self)




    def intToPtrInst(self):

        localctx = LLVMIRParser.IntToPtrInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_intToPtrInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2984
            self.match(LLVMIRParser.T__125)
            self.state = 2985
            self.typeValue()
            self.state = 2986
            self.match(LLVMIRParser.T__42)
            self.state = 2987
            self.type_(0)
            self.state = 2992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2988
                self.match(LLVMIRParser.T__14)
                self.state = 2989
                self.metadataAttachment()
                self.state = 2994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitCastInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_bitCastInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitCastInst" ):
                listener.enterBitCastInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitCastInst" ):
                listener.exitBitCastInst(self)




    def bitCastInst(self):

        localctx = LLVMIRParser.BitCastInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_bitCastInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2995
            self.match(LLVMIRParser.T__121)
            self.state = 2996
            self.typeValue()
            self.state = 2997
            self.match(LLVMIRParser.T__42)
            self.state = 2998
            self.type_(0)
            self.state = 3003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 2999
                self.match(LLVMIRParser.T__14)
                self.state = 3000
                self.metadataAttachment()
                self.state = 3005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddrSpaceCastInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_addrSpaceCastInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddrSpaceCastInst" ):
                listener.enterAddrSpaceCastInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddrSpaceCastInst" ):
                listener.exitAddrSpaceCastInst(self)




    def addrSpaceCastInst(self):

        localctx = LLVMIRParser.AddrSpaceCastInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_addrSpaceCastInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3006
            self.match(LLVMIRParser.T__124)
            self.state = 3007
            self.typeValue()
            self.state = 3008
            self.match(LLVMIRParser.T__42)
            self.state = 3009
            self.type_(0)
            self.state = 3014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3010
                self.match(LLVMIRParser.T__14)
                self.state = 3011
                self.metadataAttachment()
                self.state = 3016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ICmpInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def iPred(self):
            return self.getTypedRuleContext(LLVMIRParser.IPredContext,0)


        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_iCmpInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterICmpInst" ):
                listener.enterICmpInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitICmpInst" ):
                listener.exitICmpInst(self)




    def iCmpInst(self):

        localctx = LLVMIRParser.ICmpInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_iCmpInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3017
            self.match(LLVMIRParser.T__126)
            self.state = 3018
            self.iPred()
            self.state = 3019
            self.typeValue()
            self.state = 3020
            self.match(LLVMIRParser.T__14)
            self.state = 3021
            self.value()
            self.state = 3026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3022
                self.match(LLVMIRParser.T__14)
                self.state = 3023
                self.metadataAttachment()
                self.state = 3028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FCmpInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fPred(self):
            return self.getTypedRuleContext(LLVMIRParser.FPredContext,0)


        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fCmpInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFCmpInst" ):
                listener.enterFCmpInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFCmpInst" ):
                listener.exitFCmpInst(self)




    def fCmpInst(self):

        localctx = LLVMIRParser.FCmpInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_fCmpInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3029
            self.match(LLVMIRParser.T__127)
            self.state = 3033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 3030
                self.fastMathFlag()
                self.state = 3035
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3036
            self.fPred()
            self.state = 3037
            self.typeValue()
            self.state = 3038
            self.match(LLVMIRParser.T__14)
            self.state = 3039
            self.value()
            self.state = 3044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3040
                self.match(LLVMIRParser.T__14)
                self.state = 3041
                self.metadataAttachment()
                self.state = 3046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PhiInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def inc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.IncContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.IncContext,i)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_phiInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhiInst" ):
                listener.enterPhiInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhiInst" ):
                listener.exitPhiInst(self)




    def phiInst(self):

        localctx = LLVMIRParser.PhiInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_phiInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3047
            self.match(LLVMIRParser.T__174)
            self.state = 3051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 3048
                self.fastMathFlag()
                self.state = 3053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3054
            self.type_(0)

            self.state = 3055
            self.inc()
            self.state = 3060
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3056
                    self.match(LLVMIRParser.T__14)
                    self.state = 3057
                    self.inc() 
                self.state = 3062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

            self.state = 3067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3063
                self.match(LLVMIRParser.T__14)
                self.state = 3064
                self.metadataAttachment()
                self.state = 3069
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_selectInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectInst" ):
                listener.enterSelectInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectInst" ):
                listener.exitSelectInst(self)




    def selectInst(self):

        localctx = LLVMIRParser.SelectInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_selectInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3070
            self.match(LLVMIRParser.T__128)
            self.state = 3074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 3071
                self.fastMathFlag()
                self.state = 3076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3077
            self.typeValue()
            self.state = 3078
            self.match(LLVMIRParser.T__14)
            self.state = 3079
            self.typeValue()
            self.state = 3080
            self.match(LLVMIRParser.T__14)
            self.state = 3081
            self.typeValue()
            self.state = 3086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3082
                self.match(LLVMIRParser.T__14)
                self.state = 3083
                self.metadataAttachment()
                self.state = 3088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FreezeInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_freezeInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFreezeInst" ):
                listener.enterFreezeInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFreezeInst" ):
                listener.exitFreezeInst(self)




    def freezeInst(self):

        localctx = LLVMIRParser.FreezeInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_freezeInst)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3089
            self.match(LLVMIRParser.T__175)
            self.state = 3090
            self.typeValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tail = None # Token

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def args(self):
            return self.getTypedRuleContext(LLVMIRParser.ArgsContext,0)


        def fastMathFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FastMathFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FastMathFlagContext,i)


        def callingConv(self):
            return self.getTypedRuleContext(LLVMIRParser.CallingConvContext,0)


        def returnAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ReturnAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ReturnAttributeContext,i)


        def addrSpace(self):
            return self.getTypedRuleContext(LLVMIRParser.AddrSpaceContext,0)


        def funcAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.FuncAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.FuncAttributeContext,i)


        def operandBundle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.OperandBundleContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.OperandBundleContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_callInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallInst" ):
                listener.enterCallInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallInst" ):
                listener.exitCallInst(self)




    def callInst(self):

        localctx = LLVMIRParser.CallInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_callInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 7) != 0):
                self.state = 3092
                localctx.tail = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 7) != 0)):
                    localctx.tail = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3095
            self.match(LLVMIRParser.T__179)
            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0):
                self.state = 3096
                self.fastMathFlag()
                self.state = 3101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28 or ((((_la - 293)) & ~0x3f) == 0 and ((1 << (_la - 293)) & 35184372088831) != 0):
                self.state = 3102
                self.callingConv()


            self.state = 3108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 4338307) != 0):
                self.state = 3105
                self.returnAttribute()
                self.state = 3110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 3111
                self.addrSpace()


            self.state = 3114
            self.type_(0)
            self.state = 3115
            self.value()
            self.state = 3116
            self.match(LLVMIRParser.T__25)
            self.state = 3117
            self.args()
            self.state = 3118
            self.match(LLVMIRParser.T__26)
            self.state = 3122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 45255899262222337) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0) or _la==491 or _la==495:
                self.state = 3119
                self.funcAttribute()
                self.state = 3124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 3125
                self.match(LLVMIRParser.T__36)
                self.state = 3126
                self.operandBundle()
                self.state = 3131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3127
                    self.match(LLVMIRParser.T__14)
                    self.state = 3128
                    self.operandBundle()
                    self.state = 3133
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3134
                self.match(LLVMIRParser.T__37)


            self.state = 3142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3138
                self.match(LLVMIRParser.T__14)
                self.state = 3139
                self.metadataAttachment()
                self.state = 3144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VaargInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_vaargInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVaargInst" ):
                listener.enterVaargInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVaargInst" ):
                listener.exitVaargInst(self)




    def vaargInst(self):

        localctx = LLVMIRParser.VaargInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_vaargInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3145
            self.match(LLVMIRParser.T__180)
            self.state = 3146
            self.typeValue()
            self.state = 3147
            self.match(LLVMIRParser.T__14)
            self.state = 3148
            self.type_(0)
            self.state = 3153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3149
                self.match(LLVMIRParser.T__14)
                self.state = 3150
                self.metadataAttachment()
                self.state = 3155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LandingPadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cleanUp = None # Token

        def type_(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeContext,0)


        def clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ClauseContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ClauseContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_landingPadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLandingPadInst" ):
                listener.enterLandingPadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLandingPadInst" ):
                listener.exitLandingPadInst(self)




    def landingPadInst(self):

        localctx = LLVMIRParser.LandingPadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_landingPadInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3156
            self.match(LLVMIRParser.T__181)
            self.state = 3157
            self.type_(0)
            self.state = 3159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==183:
                self.state = 3158
                localctx.cleanUp = self.match(LLVMIRParser.T__182)


            self.state = 3164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==186 or _la==187:
                self.state = 3161
                self.clause()
                self.state = 3166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3167
                self.match(LLVMIRParser.T__14)
                self.state = 3168
                self.metadataAttachment()
                self.state = 3173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchPadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def exceptionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ExceptionArgContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ExceptionArgContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_catchPadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchPadInst" ):
                listener.enterCatchPadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchPadInst" ):
                listener.exitCatchPadInst(self)




    def catchPadInst(self):

        localctx = LLVMIRParser.CatchPadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_catchPadInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3174
            self.match(LLVMIRParser.T__183)
            self.state = 3175
            self.match(LLVMIRParser.T__49)
            self.state = 3176
            self.match(LLVMIRParser.LocalIdent)
            self.state = 3177
            self.match(LLVMIRParser.T__36)
            self.state = 3186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                self.state = 3178
                self.exceptionArg()
                self.state = 3183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3179
                    self.match(LLVMIRParser.T__14)
                    self.state = 3180
                    self.exceptionArg()
                    self.state = 3185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3188
            self.match(LLVMIRParser.T__37)
            self.state = 3193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3189
                self.match(LLVMIRParser.T__14)
                self.state = 3190
                self.metadataAttachment()
                self.state = 3195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CleanupPadInstContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exceptionPad(self):
            return self.getTypedRuleContext(LLVMIRParser.ExceptionPadContext,0)


        def exceptionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ExceptionArgContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ExceptionArgContext,i)


        def metadataAttachment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MetadataAttachmentContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MetadataAttachmentContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_cleanupPadInst

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCleanupPadInst" ):
                listener.enterCleanupPadInst(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCleanupPadInst" ):
                listener.exitCleanupPadInst(self)




    def cleanupPadInst(self):

        localctx = LLVMIRParser.CleanupPadInstContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_cleanupPadInst)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3196
            self.match(LLVMIRParser.T__184)
            self.state = 3197
            self.match(LLVMIRParser.T__49)
            self.state = 3198
            self.exceptionPad()
            self.state = 3199
            self.match(LLVMIRParser.T__36)
            self.state = 3208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                self.state = 3200
                self.exceptionArg()
                self.state = 3205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3201
                    self.match(LLVMIRParser.T__14)
                    self.state = 3202
                    self.exceptionArg()
                    self.state = 3207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3210
            self.match(LLVMIRParser.T__37)
            self.state = 3215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==15:
                self.state = 3211
                self.match(LLVMIRParser.T__14)
                self.state = 3212
                self.metadataAttachment()
                self.state = 3217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_inc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInc" ):
                listener.enterInc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInc" ):
                listener.exitInc(self)




    def inc(self):

        localctx = LLVMIRParser.IncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_inc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3218
            self.match(LLVMIRParser.T__36)
            self.state = 3219
            self.value()
            self.state = 3220
            self.match(LLVMIRParser.T__14)
            self.state = 3221
            self.match(LLVMIRParser.LocalIdent)
            self.state = 3222
            self.match(LLVMIRParser.T__37)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandBundleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def typeValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.TypeValueContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_operandBundle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandBundle" ):
                listener.enterOperandBundle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandBundle" ):
                listener.exitOperandBundle(self)




    def operandBundle(self):

        localctx = LLVMIRParser.OperandBundleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_operandBundle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3224
            self.match(LLVMIRParser.StringLit)
            self.state = 3225
            self.match(LLVMIRParser.T__25)
            self.state = 3234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251954434605056) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467457537) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0) or _la==493 or _la==499:
                self.state = 3226
                self.typeValue()
                self.state = 3231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3227
                    self.match(LLVMIRParser.T__14)
                    self.state = 3228
                    self.typeValue()
                    self.state = 3233
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3236
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clauseType = None # Token

        def typeValue(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeValueContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClause" ):
                listener.enterClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClause" ):
                listener.exitClause(self)




    def clause(self):

        localctx = LLVMIRParser.ClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3238
            localctx.clauseType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==186 or _la==187):
                localctx.clauseType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3239
            self.typeValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ellipsis = None # Token

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ArgContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ArgContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = LLVMIRParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_args)
        self._la = 0 # Token type
        try:
            self.state = 3256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 3241
                    localctx.ellipsis = self.match(LLVMIRParser.T__78)


                pass
            elif token in [21, 34, 37, 51, 64, 77, 116, 117, 118, 121, 354, 355, 356, 357, 358, 359, 360, 493, 499]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3244
                self.arg()
                self.state = 3249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3245
                        self.match(LLVMIRParser.T__14)
                        self.state = 3246
                        self.arg() 
                    self.state = 3251
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

                self.state = 3254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==15:
                    self.state = 3252
                    self.match(LLVMIRParser.T__14)
                    self.state = 3253
                    localctx.ellipsis = self.match(LLVMIRParser.T__78)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concreteType(self):
            return self.getTypedRuleContext(LLVMIRParser.ConcreteTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def paramAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.ParamAttributeContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.ParamAttributeContext,i)


        def metadataType(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataTypeContext,0)


        def metadata(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)




    def arg(self):

        localctx = LLVMIRParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_arg)
        self._la = 0 # Token type
        try:
            self.state = 3270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3258
                self.concreteType()
                self.state = 3262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 549755809825) != 0) or _la==491:
                    self.state = 3259
                    self.paramAttribute()
                    self.state = 3264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3265
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3267
                self.metadataType()
                self.state = 3268
                self.metadata()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concreteType(self):
            return self.getTypedRuleContext(LLVMIRParser.ConcreteTypeContext,0)


        def value(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueContext,0)


        def metadataType(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataTypeContext,0)


        def metadata(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_exceptionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionArg" ):
                listener.enterExceptionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionArg" ):
                listener.exitExceptionArg(self)




    def exceptionArg(self):

        localctx = LLVMIRParser.ExceptionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_exceptionArg)
        try:
            self.state = 3278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3272
                self.concreteType()
                self.state = 3273
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3275
                self.metadataType()
                self.state = 3276
                self.metadata()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionPadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noneConst(self):
            return self.getTypedRuleContext(LLVMIRParser.NoneConstContext,0)


        def LocalIdent(self):
            return self.getToken(LLVMIRParser.LocalIdent, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_exceptionPad

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionPad" ):
                listener.enterExceptionPad(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionPad" ):
                listener.exitExceptionPad(self)




    def exceptionPad(self):

        localctx = LLVMIRParser.ExceptionPadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_exceptionPad)
        try:
            self.state = 3282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3280
                self.noneConst()
                pass
            elif token in [493]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3281
                self.match(LLVMIRParser.LocalIdent)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalLinkageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_externalLinkage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalLinkage" ):
                listener.enterExternalLinkage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalLinkage" ):
                listener.exitExternalLinkage(self)




    def externalLinkage(self):

        localctx = LLVMIRParser.ExternalLinkageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_externalLinkage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3284
            _la = self._input.LA(1)
            if not(_la==188 or _la==189):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InternalLinkageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_internalLinkage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInternalLinkage" ):
                listener.enterInternalLinkage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInternalLinkage" ):
                listener.exitInternalLinkage(self)




    def internalLinkage(self):

        localctx = LLVMIRParser.InternalLinkageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_internalLinkage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3286
            _la = self._input.LA(1)
            if not(((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 33423361) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def internalLinkage(self):
            return self.getTypedRuleContext(LLVMIRParser.InternalLinkageContext,0)


        def externalLinkage(self):
            return self.getTypedRuleContext(LLVMIRParser.ExternalLinkageContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_linkage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkage" ):
                listener.enterLinkage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkage" ):
                listener.exitLinkage(self)




    def linkage(self):

        localctx = LLVMIRParser.LinkageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_linkage)
        try:
            self.state = 3290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [173, 190, 191, 192, 193, 194, 195, 196, 197]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3288
                self.internalLinkage()
                pass
            elif token in [188, 189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3289
                self.externalLinkage()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreemptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_preemption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreemption" ):
                listener.enterPreemption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreemption" ):
                listener.exitPreemption(self)




    def preemption(self):

        localctx = LLVMIRParser.PreemptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_preemption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3292
            _la = self._input.LA(1)
            if not(_la==198 or _la==199):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_visibility

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibility" ):
                listener.enterVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibility" ):
                listener.exitVisibility(self)




    def visibility(self):

        localctx = LLVMIRParser.VisibilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_visibility)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3294
            _la = self._input.LA(1)
            if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllStorageClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_dllStorageClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDllStorageClass" ):
                listener.enterDllStorageClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDllStorageClass" ):
                listener.exitDllStorageClass(self)




    def dllStorageClass(self):

        localctx = LLVMIRParser.DllStorageClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_dllStorageClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3296
            _la = self._input.LA(1)
            if not(_la==203 or _la==204):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsModelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_tlsModel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsModel" ):
                listener.enterTlsModel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsModel" ):
                listener.exitTlsModel(self)




    def tlsModel(self):

        localctx = LLVMIRParser.TlsModelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_tlsModel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3298
            _la = self._input.LA(1)
            if not(((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamedAddrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_unnamedAddr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamedAddr" ):
                listener.enterUnnamedAddr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamedAddr" ):
                listener.exitUnnamedAddr(self)




    def unnamedAddr(self):

        localctx = LLVMIRParser.UnnamedAddrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_unnamedAddr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            _la = self._input.LA(1)
            if not(_la==208 or _la==209):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternallyInitializedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_externallyInitialized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternallyInitialized" ):
                listener.enterExternallyInitialized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternallyInitialized" ):
                listener.exitExternallyInitialized(self)




    def externallyInitialized(self):

        localctx = LLVMIRParser.ExternallyInitializedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_externallyInitialized)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3302
            self.match(LLVMIRParser.T__209)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImmutableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_immutable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImmutable" ):
                listener.enterImmutable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImmutable" ):
                listener.exitImmutable(self)




    def immutable(self):

        localctx = LLVMIRParser.ImmutableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_immutable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3304
            _la = self._input.LA(1)
            if not(_la==211 or _la==212):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_funcAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncAttr" ):
                listener.enterFuncAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncAttr" ):
                listener.exitFuncAttr(self)




    def funcAttr(self):

        localctx = LLVMIRParser.FuncAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_funcAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3306
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 9227101580296193) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 1125899906842623) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistinctContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_distinct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct" ):
                listener.enterDistinct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct" ):
                listener.exitDistinct(self)




    def distinct(self):

        localctx = LLVMIRParser.DistinctContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_distinct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3308
            self.match(LLVMIRParser.T__262)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InBoundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_inBounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInBounds" ):
                listener.enterInBounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInBounds" ):
                listener.exitInBounds(self)




    def inBounds(self):

        localctx = LLVMIRParser.InBoundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_inBounds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3310
            self.match(LLVMIRParser.T__263)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnAttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_returnAttr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnAttr" ):
                listener.enterReturnAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnAttr" ):
                listener.exitReturnAttr(self)




    def returnAttr(self):

        localctx = LLVMIRParser.ReturnAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_returnAttr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3312
            _la = self._input.LA(1)
            if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 33893) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverflowFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_overflowFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverflowFlag" ):
                listener.enterOverflowFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverflowFlag" ):
                listener.exitOverflowFlag(self)




    def overflowFlag(self):

        localctx = LLVMIRParser.OverflowFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_overflowFlag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3314
            _la = self._input.LA(1)
            if not(_la==265 or _la==266):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IPredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_iPred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIPred" ):
                listener.enterIPred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIPred" ):
                listener.exitIPred(self)




    def iPred(self):

        localctx = LLVMIRParser.IPredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_iPred)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3316
            _la = self._input.LA(1)
            if not(((((_la - 267)) & ~0x3f) == 0 and ((1 << (_la - 267)) & 1023) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FPredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fPred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFPred" ):
                listener.enterFPred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFPred" ):
                listener.exitFPred(self)




    def fPred(self):

        localctx = LLVMIRParser.FPredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_fPred)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3318
            _la = self._input.LA(1)
            if not(_la==60 or _la==61 or ((((_la - 273)) & ~0x3f) == 0 and ((1 << (_la - 273)) & 16383) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicOrderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_atomicOrdering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicOrdering" ):
                listener.enterAtomicOrdering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicOrdering" ):
                listener.exitAtomicOrdering(self)




    def atomicOrdering(self):

        localctx = LLVMIRParser.AtomicOrderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_atomicOrdering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3320
            _la = self._input.LA(1)
            if not(((((_la - 287)) & ~0x3f) == 0 and ((1 << (_la - 287)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallingConvEnumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_callingConvEnum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallingConvEnum" ):
                listener.enterCallingConvEnum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallingConvEnum" ):
                listener.exitCallingConvEnum(self)




    def callingConvEnum(self):

        localctx = LLVMIRParser.CallingConvEnumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_callingConvEnum)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322
            _la = self._input.LA(1)
            if not(((((_la - 293)) & ~0x3f) == 0 and ((1 << (_la - 293)) & 35184372088831) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FastMathFlagContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fastMathFlag

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFastMathFlag" ):
                listener.enterFastMathFlag(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFastMathFlag" ):
                listener.exitFastMathFlag(self)




    def fastMathFlag(self):

        localctx = LLVMIRParser.FastMathFlagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_fastMathFlag)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3324
            _la = self._input.LA(1)
            if not(((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_atomicOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicOp" ):
                listener.enterAtomicOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicOp" ):
                listener.exitAtomicOp(self)




    def atomicOp(self):

        localctx = LLVMIRParser.AtomicOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_atomicOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3326
            _la = self._input.LA(1)
            if not(((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 12319) != 0) or ((((_la - 346)) & ~0x3f) == 0 and ((1 << (_la - 346)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatKindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return LLVMIRParser.RULE_floatKind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatKind" ):
                listener.enterFloatKind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatKind" ):
                listener.exitFloatKind(self)




    def floatKind(self):

        localctx = LLVMIRParser.FloatKindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_floatKind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3328
            _la = self._input.LA(1)
            if not(((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecializedMDNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diBasicType(self):
            return self.getTypedRuleContext(LLVMIRParser.DiBasicTypeContext,0)


        def diCommonBlock(self):
            return self.getTypedRuleContext(LLVMIRParser.DiCommonBlockContext,0)


        def diCompileUnit(self):
            return self.getTypedRuleContext(LLVMIRParser.DiCompileUnitContext,0)


        def diCompositeType(self):
            return self.getTypedRuleContext(LLVMIRParser.DiCompositeTypeContext,0)


        def diDerivedType(self):
            return self.getTypedRuleContext(LLVMIRParser.DiDerivedTypeContext,0)


        def diEnumerator(self):
            return self.getTypedRuleContext(LLVMIRParser.DiEnumeratorContext,0)


        def diExpression(self):
            return self.getTypedRuleContext(LLVMIRParser.DiExpressionContext,0)


        def diFile(self):
            return self.getTypedRuleContext(LLVMIRParser.DiFileContext,0)


        def diGlobalVariable(self):
            return self.getTypedRuleContext(LLVMIRParser.DiGlobalVariableContext,0)


        def diGlobalVariableExpression(self):
            return self.getTypedRuleContext(LLVMIRParser.DiGlobalVariableExpressionContext,0)


        def diImportedEntity(self):
            return self.getTypedRuleContext(LLVMIRParser.DiImportedEntityContext,0)


        def diLabel(self):
            return self.getTypedRuleContext(LLVMIRParser.DiLabelContext,0)


        def diLexicalBlock(self):
            return self.getTypedRuleContext(LLVMIRParser.DiLexicalBlockContext,0)


        def diLexicalBlockFile(self):
            return self.getTypedRuleContext(LLVMIRParser.DiLexicalBlockFileContext,0)


        def diLocalVariable(self):
            return self.getTypedRuleContext(LLVMIRParser.DiLocalVariableContext,0)


        def diLocation(self):
            return self.getTypedRuleContext(LLVMIRParser.DiLocationContext,0)


        def diMacro(self):
            return self.getTypedRuleContext(LLVMIRParser.DiMacroContext,0)


        def diMacroFile(self):
            return self.getTypedRuleContext(LLVMIRParser.DiMacroFileContext,0)


        def diModule(self):
            return self.getTypedRuleContext(LLVMIRParser.DiModuleContext,0)


        def diNamespace(self):
            return self.getTypedRuleContext(LLVMIRParser.DiNamespaceContext,0)


        def diObjCProperty(self):
            return self.getTypedRuleContext(LLVMIRParser.DiObjCPropertyContext,0)


        def diStringType(self):
            return self.getTypedRuleContext(LLVMIRParser.DiStringTypeContext,0)


        def diSubprogram(self):
            return self.getTypedRuleContext(LLVMIRParser.DiSubprogramContext,0)


        def diSubrange(self):
            return self.getTypedRuleContext(LLVMIRParser.DiSubrangeContext,0)


        def diSubroutineType(self):
            return self.getTypedRuleContext(LLVMIRParser.DiSubroutineTypeContext,0)


        def diTemplateTypeParameter(self):
            return self.getTypedRuleContext(LLVMIRParser.DiTemplateTypeParameterContext,0)


        def diTemplateValueParameter(self):
            return self.getTypedRuleContext(LLVMIRParser.DiTemplateValueParameterContext,0)


        def genericDiNode(self):
            return self.getTypedRuleContext(LLVMIRParser.GenericDiNodeContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_specializedMDNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecializedMDNode" ):
                listener.enterSpecializedMDNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecializedMDNode" ):
                listener.exitSpecializedMDNode(self)




    def specializedMDNode(self):

        localctx = LLVMIRParser.SpecializedMDNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_specializedMDNode)
        try:
            self.state = 3358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3330
                self.diBasicType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3331
                self.diCommonBlock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3332
                self.diCompileUnit()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3333
                self.diCompositeType()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3334
                self.diDerivedType()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3335
                self.diEnumerator()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3336
                self.diExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3337
                self.diFile()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3338
                self.diGlobalVariable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3339
                self.diGlobalVariableExpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3340
                self.diImportedEntity()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3341
                self.diLabel()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3342
                self.diLexicalBlock()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3343
                self.diLexicalBlockFile()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3344
                self.diLocalVariable()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3345
                self.diLocation()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3346
                self.diMacro()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3347
                self.diMacroFile()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3348
                self.diModule()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3349
                self.diNamespace()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3350
                self.diObjCProperty()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3351
                self.diStringType()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 3352
                self.diSubprogram()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 3353
                self.diSubrange()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 3354
                self.diSubroutineType()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 3355
                self.diTemplateTypeParameter()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 3356
                self.diTemplateValueParameter()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 3357
                self.genericDiNode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiBasicTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diBasicTypeField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiBasicTypeFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiBasicTypeFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diBasicType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiBasicType" ):
                listener.enterDiBasicType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiBasicType" ):
                listener.exitDiBasicType(self)




    def diBasicType(self):

        localctx = LLVMIRParser.DiBasicTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_diBasicType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3360
            self.match(LLVMIRParser.T__360)
            self.state = 3361
            self.match(LLVMIRParser.T__25)
            self.state = 3370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & 68719477897) != 0) or _la==466:
                self.state = 3362
                self.diBasicTypeField()
                self.state = 3367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3363
                    self.match(LLVMIRParser.T__14)
                    self.state = 3364
                    self.diBasicTypeField()
                    self.state = 3369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3372
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCommonBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCommonBlockField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiCommonBlockFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiCommonBlockFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diCommonBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCommonBlock" ):
                listener.enterDiCommonBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCommonBlock" ):
                listener.exitDiCommonBlock(self)




    def diCommonBlock(self):

        localctx = LLVMIRParser.DiCommonBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_diCommonBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3374
            self.match(LLVMIRParser.T__361)
            self.state = 3375
            self.match(LLVMIRParser.T__25)
            self.state = 3384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 36029346776875009) != 0) or _la==462:
                self.state = 3376
                self.diCommonBlockField()
                self.state = 3381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3377
                    self.match(LLVMIRParser.T__14)
                    self.state = 3378
                    self.diCommonBlockField()
                    self.state = 3383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3386
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompileUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCompileUnitField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiCompileUnitFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiCompileUnitFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diCompileUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompileUnit" ):
                listener.enterDiCompileUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompileUnit" ):
                listener.exitDiCompileUnit(self)




    def diCompileUnit(self):

        localctx = LLVMIRParser.DiCompileUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_diCompileUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3388
            self.match(LLVMIRParser.T__362)
            self.state = 3389
            self.match(LLVMIRParser.T__25)
            self.state = 3398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & 6972840271482519553) != 0) or ((((_la - 459)) & ~0x3f) == 0 and ((1 << (_la - 459)) & 68645) != 0):
                self.state = 3390
                self.diCompileUnitField()
                self.state = 3395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3391
                    self.match(LLVMIRParser.T__14)
                    self.state = 3392
                    self.diCompileUnitField()
                    self.state = 3397
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3400
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompositeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diCompositeTypeField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiCompositeTypeFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiCompositeTypeFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diCompositeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompositeType" ):
                listener.enterDiCompositeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompositeType" ):
                listener.exitDiCompositeType(self)




    def diCompositeType(self):

        localctx = LLVMIRParser.DiCompositeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_diCompositeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3402
            self.match(LLVMIRParser.T__363)
            self.state = 3403
            self.match(LLVMIRParser.T__25)
            self.state = 3412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & 288305144217558153) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & 4303360329) != 0):
                self.state = 3404
                self.diCompositeTypeField()
                self.state = 3409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3405
                    self.match(LLVMIRParser.T__14)
                    self.state = 3406
                    self.diCompositeTypeField()
                    self.state = 3411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3414
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompositeTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMIRParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def baseTypeField(self):
            return self.getTypedRuleContext(LLVMIRParser.BaseTypeFieldContext,0)


        def sizeField(self):
            return self.getTypedRuleContext(LLVMIRParser.SizeFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignFieldContext,0)


        def offsetField(self):
            return self.getTypedRuleContext(LLVMIRParser.OffsetFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMIRParser.FlagsFieldContext,0)


        def elementsField(self):
            return self.getTypedRuleContext(LLVMIRParser.ElementsFieldContext,0)


        def runtimeLangField(self):
            return self.getTypedRuleContext(LLVMIRParser.RuntimeLangFieldContext,0)


        def vtableHolderField(self):
            return self.getTypedRuleContext(LLVMIRParser.VtableHolderFieldContext,0)


        def templateParamsField(self):
            return self.getTypedRuleContext(LLVMIRParser.TemplateParamsFieldContext,0)


        def identifierField(self):
            return self.getTypedRuleContext(LLVMIRParser.IdentifierFieldContext,0)


        def discriminatorField(self):
            return self.getTypedRuleContext(LLVMIRParser.DiscriminatorFieldContext,0)


        def dataLocationField(self):
            return self.getTypedRuleContext(LLVMIRParser.DataLocationFieldContext,0)


        def associatedField(self):
            return self.getTypedRuleContext(LLVMIRParser.AssociatedFieldContext,0)


        def allocatedField(self):
            return self.getTypedRuleContext(LLVMIRParser.AllocatedFieldContext,0)


        def rankField(self):
            return self.getTypedRuleContext(LLVMIRParser.RankFieldContext,0)


        def annotationsField(self):
            return self.getTypedRuleContext(LLVMIRParser.AnnotationsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diCompositeTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompositeTypeField" ):
                listener.enterDiCompositeTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompositeTypeField" ):
                listener.exitDiCompositeTypeField(self)




    def diCompositeTypeField(self):

        localctx = LLVMIRParser.DiCompositeTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_diCompositeTypeField)
        try:
            self.state = 3437
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3416
                self.tagField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3417
                self.nameField()
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3418
                self.scopeField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3419
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3420
                self.lineField()
                pass
            elif token in [403]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3421
                self.baseTypeField()
                pass
            elif token in [466]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3422
                self.sizeField()
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3423
                self.alignField()
                pass
            elif token in [454]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3424
                self.offsetField()
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3425
                self.flagsField()
                pass
            elif token in [417]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3426
                self.elementsField()
                pass
            elif token in [460]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3427
                self.runtimeLangField()
                pass
            elif token in [486]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3428
                self.vtableHolderField()
                pass
            elif token in [477]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3429
                self.templateParamsField()
                pass
            elif token in [433]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3430
                self.identifierField()
                pass
            elif token in [413]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3431
                self.discriminatorField()
                pass
            elif token in [414]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3432
                self.dataLocationField()
                pass
            elif token in [401]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3433
                self.associatedField()
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3434
                self.allocatedField()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3435
                self.rankField()
                pass
            elif token in [399]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3436
                self.annotationsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiDerivedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diDerivedTypeField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiDerivedTypeFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiDerivedTypeFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diDerivedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiDerivedType" ):
                listener.enterDiDerivedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiDerivedType" ):
                listener.exitDiDerivedType(self)




    def diDerivedType(self):

        localctx = LLVMIRParser.DiDerivedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_diDerivedType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3439
            self.match(LLVMIRParser.T__364)
            self.state = 3440
            self.match(LLVMIRParser.T__25)
            self.state = 3449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & 288236973489984649) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & 4353) != 0):
                self.state = 3441
                self.diDerivedTypeField()
                self.state = 3446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3442
                    self.match(LLVMIRParser.T__14)
                    self.state = 3443
                    self.diDerivedTypeField()
                    self.state = 3448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3451
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiDerivedTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMIRParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def baseTypeField(self):
            return self.getTypedRuleContext(LLVMIRParser.BaseTypeFieldContext,0)


        def sizeField(self):
            return self.getTypedRuleContext(LLVMIRParser.SizeFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignFieldContext,0)


        def offsetField(self):
            return self.getTypedRuleContext(LLVMIRParser.OffsetFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMIRParser.FlagsFieldContext,0)


        def extraDataField(self):
            return self.getTypedRuleContext(LLVMIRParser.ExtraDataFieldContext,0)


        def dwarfAddressSpaceField(self):
            return self.getTypedRuleContext(LLVMIRParser.DwarfAddressSpaceFieldContext,0)


        def annotationsField(self):
            return self.getTypedRuleContext(LLVMIRParser.AnnotationsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diDerivedTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiDerivedTypeField" ):
                listener.enterDiDerivedTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiDerivedTypeField" ):
                listener.exitDiDerivedTypeField(self)




    def diDerivedTypeField(self):

        localctx = LLVMIRParser.DiDerivedTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_diDerivedTypeField)
        try:
            self.state = 3466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3453
                self.tagField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3454
                self.nameField()
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3455
                self.scopeField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3456
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3457
                self.lineField()
                pass
            elif token in [403]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3458
                self.baseTypeField()
                pass
            elif token in [466]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3459
                self.sizeField()
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3460
                self.alignField()
                pass
            elif token in [454]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3461
                self.offsetField()
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3462
                self.flagsField()
                pass
            elif token in [428]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3463
                self.extraDataField()
                pass
            elif token in [415]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3464
                self.dwarfAddressSpaceField()
                pass
            elif token in [399]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3465
                self.annotationsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiEnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diEnumeratorField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiEnumeratorFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiEnumeratorFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diEnumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiEnumerator" ):
                listener.enterDiEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiEnumerator" ):
                listener.exitDiEnumerator(self)




    def diEnumerator(self):

        localctx = LLVMIRParser.DiEnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_diEnumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3468
            self.match(LLVMIRParser.T__365)
            self.state = 3469
            self.match(LLVMIRParser.T__25)
            self.state = 3478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 4503599627370505) != 0):
                self.state = 3470
                self.diEnumeratorField()
                self.state = 3475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3471
                    self.match(LLVMIRParser.T__14)
                    self.state = 3472
                    self.diEnumeratorField()
                    self.state = 3477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3480
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiEnumeratorFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def valueIntField(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueIntFieldContext,0)


        def isUnsignedField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsUnsignedFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diEnumeratorField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiEnumeratorField" ):
                listener.enterDiEnumeratorField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiEnumeratorField" ):
                listener.exitDiEnumeratorField(self)




    def diEnumeratorField(self):

        localctx = LLVMIRParser.DiEnumeratorFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_diEnumeratorField)
        try:
            self.state = 3485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [390]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3482
                self.nameField()
                pass
            elif token in [393]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3483
                self.valueIntField()
                pass
            elif token in [442]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3484
                self.isUnsignedField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diFileField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiFileFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiFileFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFile" ):
                listener.enterDiFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFile" ):
                listener.exitDiFile(self)




    def diFile(self):

        localctx = LLVMIRParser.DiFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_diFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3487
            self.match(LLVMIRParser.T__366)
            self.state = 3488
            self.match(LLVMIRParser.T__25)
            self.state = 3497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 404)) & ~0x3f) == 0 and ((1 << (_la - 404)) & -9223372036787666685) != 0):
                self.state = 3489
                self.diFileField()
                self.state = 3494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3490
                    self.match(LLVMIRParser.T__14)
                    self.state = 3491
                    self.diFileField()
                    self.state = 3496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3499
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiFileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filenameField(self):
            return self.getTypedRuleContext(LLVMIRParser.FilenameFieldContext,0)


        def directoryField(self):
            return self.getTypedRuleContext(LLVMIRParser.DirectoryFieldContext,0)


        def checksumkindField(self):
            return self.getTypedRuleContext(LLVMIRParser.ChecksumkindFieldContext,0)


        def checksumField(self):
            return self.getTypedRuleContext(LLVMIRParser.ChecksumFieldContext,0)


        def sourceField(self):
            return self.getTypedRuleContext(LLVMIRParser.SourceFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diFileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFileField" ):
                listener.enterDiFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFileField" ):
                listener.exitDiFileField(self)




    def diFileField(self):

        localctx = LLVMIRParser.DiFileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_diFileField)
        try:
            self.state = 3506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [430]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3501
                self.filenameField()
                pass
            elif token in [412]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3502
                self.directoryField()
                pass
            elif token in [405]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3503
                self.checksumkindField()
                pass
            elif token in [404]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3504
                self.checksumField()
                pass
            elif token in [467]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3505
                self.sourceField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diGlobalVariableField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiGlobalVariableFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiGlobalVariableFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diGlobalVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariable" ):
                listener.enterDiGlobalVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariable" ):
                listener.exitDiGlobalVariable(self)




    def diGlobalVariable(self):

        localctx = LLVMIRParser.DiGlobalVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_diGlobalVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3508
            self.match(LLVMIRParser.T__367)
            self.state = 3509
            self.match(LLVMIRParser.T__25)
            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 109494315698356867) != 0) or _la==462 or _la==477:
                self.state = 3510
                self.diGlobalVariableField()
                self.state = 3515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3511
                    self.match(LLVMIRParser.T__14)
                    self.state = 3512
                    self.diGlobalVariableField()
                    self.state = 3517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3520
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def linkageNameField(self):
            return self.getTypedRuleContext(LLVMIRParser.LinkageNameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeFieldContext,0)


        def isLocalField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsLocalFieldContext,0)


        def isDefinitionField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsDefinitionFieldContext,0)


        def templateParamsField(self):
            return self.getTypedRuleContext(LLVMIRParser.TemplateParamsFieldContext,0)


        def declarationField(self):
            return self.getTypedRuleContext(LLVMIRParser.DeclarationFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignFieldContext,0)


        def annotationsField(self):
            return self.getTypedRuleContext(LLVMIRParser.AnnotationsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diGlobalVariableField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableField" ):
                listener.enterDiGlobalVariableField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableField" ):
                listener.exitDiGlobalVariableField(self)




    def diGlobalVariableField(self):

        localctx = LLVMIRParser.DiGlobalVariableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_diGlobalVariableField)
        try:
            self.state = 3534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [390]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3522
                self.nameField()
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3523
                self.scopeField()
                pass
            elif token in [446]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3524
                self.linkageNameField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3525
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3526
                self.lineField()
                pass
            elif token in [391]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3527
                self.typeField()
                pass
            elif token in [440]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3528
                self.isLocalField()
                pass
            elif token in [438]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3529
                self.isDefinitionField()
                pass
            elif token in [477]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3530
                self.templateParamsField()
                pass
            elif token in [411]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3531
                self.declarationField()
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3532
                self.alignField()
                pass
            elif token in [399]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3533
                self.annotationsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diGlobalVariableExpressionField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiGlobalVariableExpressionFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiGlobalVariableExpressionFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diGlobalVariableExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableExpression" ):
                listener.enterDiGlobalVariableExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableExpression" ):
                listener.exitDiGlobalVariableExpression(self)




    def diGlobalVariableExpression(self):

        localctx = LLVMIRParser.DiGlobalVariableExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_diGlobalVariableExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3536
            self.match(LLVMIRParser.T__368)
            self.state = 3537
            self.match(LLVMIRParser.T__25)
            self.state = 3546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==427 or _la==483:
                self.state = 3538
                self.diGlobalVariableExpressionField()
                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3539
                    self.match(LLVMIRParser.T__14)
                    self.state = 3540
                    self.diGlobalVariableExpressionField()
                    self.state = 3545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3548
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiGlobalVariableExpressionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varField(self):
            return self.getTypedRuleContext(LLVMIRParser.VarFieldContext,0)


        def exprField(self):
            return self.getTypedRuleContext(LLVMIRParser.ExprFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diGlobalVariableExpressionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiGlobalVariableExpressionField" ):
                listener.enterDiGlobalVariableExpressionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiGlobalVariableExpressionField" ):
                listener.exitDiGlobalVariableExpressionField(self)




    def diGlobalVariableExpressionField(self):

        localctx = LLVMIRParser.DiGlobalVariableExpressionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_diGlobalVariableExpressionField)
        try:
            self.state = 3552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [483]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3550
                self.varField()
                pass
            elif token in [427]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3551
                self.exprField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiImportedEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diImportedEntityField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiImportedEntityFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiImportedEntityFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diImportedEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiImportedEntity" ):
                listener.enterDiImportedEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiImportedEntity" ):
                listener.exitDiImportedEntity(self)




    def diImportedEntity(self):

        localctx = LLVMIRParser.DiImportedEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_diImportedEntity)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3554
            self.match(LLVMIRParser.T__369)
            self.state = 3555
            self.match(LLVMIRParser.T__25)
            self.state = 3564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & 288234912710918153) != 0) or _la==462:
                self.state = 3556
                self.diImportedEntityField()
                self.state = 3561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3557
                    self.match(LLVMIRParser.T__14)
                    self.state = 3558
                    self.diImportedEntityField()
                    self.state = 3563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3566
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiImportedEntityFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMIRParser.TagFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def entityField(self):
            return self.getTypedRuleContext(LLVMIRParser.EntityFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def elementsField(self):
            return self.getTypedRuleContext(LLVMIRParser.ElementsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diImportedEntityField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiImportedEntityField" ):
                listener.enterDiImportedEntityField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiImportedEntityField" ):
                listener.exitDiImportedEntityField(self)




    def diImportedEntityField(self):

        localctx = LLVMIRParser.DiImportedEntityFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_diImportedEntityField)
        try:
            self.state = 3575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3568
                self.tagField()
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3569
                self.scopeField()
                pass
            elif token in [424]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3570
                self.entityField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3571
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3572
                self.lineField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3573
                self.nameField()
                pass
            elif token in [417]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3574
                self.elementsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLabelField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiLabelFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiLabelFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLabel" ):
                listener.enterDiLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLabel" ):
                listener.exitDiLabel(self)




    def diLabel(self):

        localctx = LLVMIRParser.DiLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_diLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.match(LLVMIRParser.T__370)
            self.state = 3578
            self.match(LLVMIRParser.T__25)
            self.state = 3587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 36029346774777857) != 0) or _la==462:
                self.state = 3579
                self.diLabelField()
                self.state = 3584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3580
                    self.match(LLVMIRParser.T__14)
                    self.state = 3581
                    self.diLabelField()
                    self.state = 3586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3589
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLabelFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLabelField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLabelField" ):
                listener.enterDiLabelField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLabelField" ):
                listener.exitDiLabelField(self)




    def diLabelField(self):

        localctx = LLVMIRParser.DiLabelFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_diLabelField)
        try:
            self.state = 3595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3591
                self.scopeField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3592
                self.nameField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3593
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3594
                self.lineField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLexicalBlockField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiLexicalBlockFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiLexicalBlockFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLexicalBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlock" ):
                listener.enterDiLexicalBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlock" ):
                listener.exitDiLexicalBlock(self)




    def diLexicalBlock(self):

        localctx = LLVMIRParser.DiLexicalBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_diLexicalBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3597
            self.match(LLVMIRParser.T__371)
            self.state = 3598
            self.match(LLVMIRParser.T__25)
            self.state = 3607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & 72058143802130433) != 0):
                self.state = 3599
                self.diLexicalBlockField()
                self.state = 3604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3600
                    self.match(LLVMIRParser.T__14)
                    self.state = 3601
                    self.diLexicalBlockField()
                    self.state = 3606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3609
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def columnField(self):
            return self.getTypedRuleContext(LLVMIRParser.ColumnFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLexicalBlockField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockField" ):
                listener.enterDiLexicalBlockField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockField" ):
                listener.exitDiLexicalBlockField(self)




    def diLexicalBlockField(self):

        localctx = LLVMIRParser.DiLexicalBlockFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_diLexicalBlockField)
        try:
            self.state = 3615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3611
                self.scopeField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3612
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3613
                self.lineField()
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3614
                self.columnField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLexicalBlockFileField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiLexicalBlockFileFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiLexicalBlockFileFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLexicalBlockFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFile" ):
                listener.enterDiLexicalBlockFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFile" ):
                listener.exitDiLexicalBlockFile(self)




    def diLexicalBlockFile(self):

        localctx = LLVMIRParser.DiLexicalBlockFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_diLexicalBlockFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3617
            self.match(LLVMIRParser.T__372)
            self.state = 3618
            self.match(LLVMIRParser.T__25)
            self.state = 3627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 413)) & ~0x3f) == 0 and ((1 << (_la - 413)) & 562949953486849) != 0):
                self.state = 3619
                self.diLexicalBlockFileField()
                self.state = 3624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3620
                    self.match(LLVMIRParser.T__14)
                    self.state = 3621
                    self.diLexicalBlockFileField()
                    self.state = 3626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3629
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLexicalBlockFileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def discriminatorIntField(self):
            return self.getTypedRuleContext(LLVMIRParser.DiscriminatorIntFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLexicalBlockFileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLexicalBlockFileField" ):
                listener.enterDiLexicalBlockFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLexicalBlockFileField" ):
                listener.exitDiLexicalBlockFileField(self)




    def diLexicalBlockFileField(self):

        localctx = LLVMIRParser.DiLexicalBlockFileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_diLexicalBlockFileField)
        try:
            self.state = 3634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3631
                self.scopeField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3632
                self.fileField()
                pass
            elif token in [413]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3633
                self.discriminatorIntField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocalVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLocalVariableField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiLocalVariableFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiLocalVariableFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLocalVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocalVariable" ):
                listener.enterDiLocalVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocalVariable" ):
                listener.exitDiLocalVariable(self)




    def diLocalVariable(self):

        localctx = LLVMIRParser.DiLocalVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_diLocalVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3636
            self.match(LLVMIRParser.T__373)
            self.state = 3637
            self.match(LLVMIRParser.T__25)
            self.state = 3646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 36029346774779539) != 0) or _la==462:
                self.state = 3638
                self.diLocalVariableField()
                self.state = 3643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3639
                    self.match(LLVMIRParser.T__14)
                    self.state = 3640
                    self.diLocalVariableField()
                    self.state = 3645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3648
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocalVariableFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def argField(self):
            return self.getTypedRuleContext(LLVMIRParser.ArgFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMIRParser.FlagsFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignFieldContext,0)


        def annotationsField(self):
            return self.getTypedRuleContext(LLVMIRParser.AnnotationsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLocalVariableField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocalVariableField" ):
                listener.enterDiLocalVariableField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocalVariableField" ):
                listener.exitDiLocalVariableField(self)




    def diLocalVariableField(self):

        localctx = LLVMIRParser.DiLocalVariableFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_diLocalVariableField)
        try:
            self.state = 3659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3650
                self.scopeField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3651
                self.nameField()
                pass
            elif token in [400]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3652
                self.argField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3653
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3654
                self.lineField()
                pass
            elif token in [391]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3655
                self.typeField()
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3656
                self.flagsField()
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3657
                self.alignField()
                pass
            elif token in [399]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3658
                self.annotationsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diLocationField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiLocationFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiLocationFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocation" ):
                listener.enterDiLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocation" ):
                listener.exitDiLocation(self)




    def diLocation(self):

        localctx = LLVMIRParser.DiLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_diLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3661
            self.match(LLVMIRParser.T__374)
            self.state = 3662
            self.match(LLVMIRParser.T__25)
            self.state = 3671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & 72058153457418241) != 0):
                self.state = 3663
                self.diLocationField()
                self.state = 3668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3664
                    self.match(LLVMIRParser.T__14)
                    self.state = 3665
                    self.diLocationField()
                    self.state = 3670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3673
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiLocationFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def columnField(self):
            return self.getTypedRuleContext(LLVMIRParser.ColumnFieldContext,0)


        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def inlinedAtField(self):
            return self.getTypedRuleContext(LLVMIRParser.InlinedAtFieldContext,0)


        def isImplicitCodeField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsImplicitCodeFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diLocationField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiLocationField" ):
                listener.enterDiLocationField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiLocationField" ):
                listener.exitDiLocationField(self)




    def diLocationField(self):

        localctx = LLVMIRParser.DiLocationFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_diLocationField)
        try:
            self.state = 3680
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [445]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3675
                self.lineField()
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3676
                self.columnField()
                pass
            elif token in [462]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3677
                self.scopeField()
                pass
            elif token in [436]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3678
                self.inlinedAtField()
                pass
            elif token in [439]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3679
                self.isImplicitCodeField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diMacroField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiMacroFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiMacroFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diMacro

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacro" ):
                listener.enterDiMacro(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacro" ):
                listener.exitDiMacro(self)




    def diMacro(self):

        localctx = LLVMIRParser.DiMacroContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_diMacro)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3682
            self.match(LLVMIRParser.T__375)
            self.state = 3683
            self.match(LLVMIRParser.T__25)
            self.state = 3692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 36028797018963979) != 0):
                self.state = 3684
                self.diMacroField()
                self.state = 3689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3685
                    self.match(LLVMIRParser.T__14)
                    self.state = 3686
                    self.diMacroField()
                    self.state = 3691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3694
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeMacinfoField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeMacinfoFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def valueStringField(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueStringFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diMacroField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroField" ):
                listener.enterDiMacroField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroField" ):
                listener.exitDiMacroField(self)




    def diMacroField(self):

        localctx = LLVMIRParser.DiMacroFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_diMacroField)
        try:
            self.state = 3700
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [391]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3696
                self.typeMacinfoField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3697
                self.lineField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3698
                self.nameField()
                pass
            elif token in [393]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3699
                self.valueStringField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diMacroFileField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiMacroFileFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiMacroFileFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diMacroFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFile" ):
                listener.enterDiMacroFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFile" ):
                listener.exitDiMacroFile(self)




    def diMacroFile(self):

        localctx = LLVMIRParser.DiMacroFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_diMacroFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3702
            self.match(LLVMIRParser.T__376)
            self.state = 3703
            self.match(LLVMIRParser.T__25)
            self.state = 3712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 391)) & ~0x3f) == 0 and ((1 << (_la - 391)) & 4629700691814776833) != 0):
                self.state = 3704
                self.diMacroFileField()
                self.state = 3709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3705
                    self.match(LLVMIRParser.T__14)
                    self.state = 3706
                    self.diMacroFileField()
                    self.state = 3711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3714
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiMacroFileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeMacinfoField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeMacinfoFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def nodesField(self):
            return self.getTypedRuleContext(LLVMIRParser.NodesFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diMacroFileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiMacroFileField" ):
                listener.enterDiMacroFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiMacroFileField" ):
                listener.exitDiMacroFileField(self)




    def diMacroFileField(self):

        localctx = LLVMIRParser.DiMacroFileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_diMacroFileField)
        try:
            self.state = 3720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [391]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3716
                self.typeMacinfoField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3717
                self.lineField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3718
                self.fileField()
                pass
            elif token in [453]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3719
                self.nodesField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diModuleField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiModuleFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiModuleFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diModule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiModule" ):
                listener.enterDiModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiModule" ):
                listener.exitDiModule(self)




    def diModule(self):

        localctx = LLVMIRParser.DiModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_diModule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3722
            self.match(LLVMIRParser.T__377)
            self.state = 3723
            self.match(LLVMIRParser.T__25)
            self.state = 3732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 45212467890094081) != 0) or _la==462:
                self.state = 3724
                self.diModuleField()
                self.state = 3729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3725
                    self.match(LLVMIRParser.T__14)
                    self.state = 3726
                    self.diModuleField()
                    self.state = 3731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3734
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiModuleFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def configMacrosField(self):
            return self.getTypedRuleContext(LLVMIRParser.ConfigMacrosFieldContext,0)


        def includePathField(self):
            return self.getTypedRuleContext(LLVMIRParser.IncludePathFieldContext,0)


        def apiNotesField(self):
            return self.getTypedRuleContext(LLVMIRParser.ApiNotesFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def isDeclField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsDeclFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diModuleField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiModuleField" ):
                listener.enterDiModuleField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiModuleField" ):
                listener.exitDiModuleField(self)




    def diModuleField(self):

        localctx = LLVMIRParser.DiModuleFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_diModuleField)
        try:
            self.state = 3744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3736
                self.scopeField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3737
                self.nameField()
                pass
            elif token in [407]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3738
                self.configMacrosField()
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3739
                self.includePathField()
                pass
            elif token in [443]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3740
                self.apiNotesField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3741
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3742
                self.lineField()
                pass
            elif token in [437]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3743
                self.isDeclField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diNamespaceField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiNamespaceFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiNamespaceFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiNamespace" ):
                listener.enterDiNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiNamespace" ):
                listener.exitDiNamespace(self)




    def diNamespace(self):

        localctx = LLVMIRParser.DiNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_diNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3746
            self.match(LLVMIRParser.T__378)
            self.state = 3747
            self.match(LLVMIRParser.T__25)
            self.state = 3756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390 or _la==426 or _la==462:
                self.state = 3748
                self.diNamespaceField()
                self.state = 3753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3749
                    self.match(LLVMIRParser.T__14)
                    self.state = 3750
                    self.diNamespaceField()
                    self.state = 3755
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3758
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiNamespaceFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def exportSymbolsField(self):
            return self.getTypedRuleContext(LLVMIRParser.ExportSymbolsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diNamespaceField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiNamespaceField" ):
                listener.enterDiNamespaceField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiNamespaceField" ):
                listener.exitDiNamespaceField(self)




    def diNamespaceField(self):

        localctx = LLVMIRParser.DiNamespaceFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_diNamespaceField)
        try:
            self.state = 3763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3760
                self.scopeField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3761
                self.nameField()
                pass
            elif token in [426]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3762
                self.exportSymbolsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiObjCPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diObjCPropertyField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiObjCPropertyFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiObjCPropertyFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diObjCProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiObjCProperty" ):
                listener.enterDiObjCProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiObjCProperty" ):
                listener.exitDiObjCProperty(self)




    def diObjCProperty(self):

        localctx = LLVMIRParser.DiObjCPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_diObjCProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            self.match(LLVMIRParser.T__379)
            self.state = 3766
            self.match(LLVMIRParser.T__25)
            self.state = 3775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 36031545798037507) != 0) or _la==465:
                self.state = 3767
                self.diObjCPropertyField()
                self.state = 3772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3768
                    self.match(LLVMIRParser.T__14)
                    self.state = 3769
                    self.diObjCPropertyField()
                    self.state = 3774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3777
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiObjCPropertyFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def setterField(self):
            return self.getTypedRuleContext(LLVMIRParser.SetterFieldContext,0)


        def getterField(self):
            return self.getTypedRuleContext(LLVMIRParser.GetterFieldContext,0)


        def attributesField(self):
            return self.getTypedRuleContext(LLVMIRParser.AttributesFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diObjCPropertyField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiObjCPropertyField" ):
                listener.enterDiObjCPropertyField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiObjCPropertyField" ):
                listener.exitDiObjCPropertyField(self)




    def diObjCPropertyField(self):

        localctx = LLVMIRParser.DiObjCPropertyFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_diObjCPropertyField)
        try:
            self.state = 3786
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [390]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3779
                self.nameField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3780
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3781
                self.lineField()
                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3782
                self.setterField()
                pass
            elif token in [431]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3783
                self.getterField()
                pass
            elif token in [402]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3784
                self.attributesField()
                pass
            elif token in [391]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3785
                self.typeField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiStringTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diStringTypeField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiStringTypeFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiStringTypeFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diStringType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiStringType" ):
                listener.enterDiStringType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiStringType" ):
                listener.exitDiStringType(self)




    def diStringType(self):

        localctx = LLVMIRParser.DiStringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_diStringType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3788
            self.match(LLVMIRParser.T__380)
            self.state = 3789
            self.match(LLVMIRParser.T__25)
            self.state = 3798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & 68719477769) != 0) or ((((_la - 466)) & ~0x3f) == 0 and ((1 << (_la - 466)) & 449) != 0):
                self.state = 3790
                self.diStringTypeField()
                self.state = 3795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3791
                    self.match(LLVMIRParser.T__14)
                    self.state = 3792
                    self.diStringTypeField()
                    self.state = 3797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3800
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiStringTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMIRParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def stringLengthField(self):
            return self.getTypedRuleContext(LLVMIRParser.StringLengthFieldContext,0)


        def stringLengthExpressionField(self):
            return self.getTypedRuleContext(LLVMIRParser.StringLengthExpressionFieldContext,0)


        def stringLocationExpressionField(self):
            return self.getTypedRuleContext(LLVMIRParser.StringLocationExpressionFieldContext,0)


        def sizeField(self):
            return self.getTypedRuleContext(LLVMIRParser.SizeFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignFieldContext,0)


        def encodingField(self):
            return self.getTypedRuleContext(LLVMIRParser.EncodingFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diStringTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiStringTypeField" ):
                listener.enterDiStringTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiStringTypeField" ):
                listener.exitDiStringTypeField(self)




    def diStringTypeField(self):

        localctx = LLVMIRParser.DiStringTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_diStringTypeField)
        try:
            self.state = 3810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3802
                self.tagField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3803
                self.nameField()
                pass
            elif token in [472]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3804
                self.stringLengthField()
                pass
            elif token in [473]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3805
                self.stringLengthExpressionField()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3806
                self.stringLocationExpressionField()
                pass
            elif token in [466]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3807
                self.sizeField()
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3808
                self.alignField()
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3809
                self.encodingField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubprogramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubprogramField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiSubprogramFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiSubprogramFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diSubprogram

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubprogram" ):
                listener.enterDiSubprogram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubprogram" ):
                listener.exitDiSubprogram(self)




    def diSubprogram(self):

        localctx = LLVMIRParser.DiSubprogramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_diSubprogram)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3812
            self.match(LLVMIRParser.T__381)
            self.state = 3813
            self.match(LLVMIRParser.T__25)
            self.state = 3822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 111746115512304147) != 0) or ((((_la - 458)) & ~0x3f) == 0 and ((1 << (_la - 458)) & 213648433) != 0):
                self.state = 3814
                self.diSubprogramField()
                self.state = 3819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3815
                    self.match(LLVMIRParser.T__14)
                    self.state = 3816
                    self.diSubprogramField()
                    self.state = 3821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3824
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubprogramFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def linkageNameField(self):
            return self.getTypedRuleContext(LLVMIRParser.LinkageNameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeFieldContext,0)


        def isLocalField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsLocalFieldContext,0)


        def isDefinitionField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsDefinitionFieldContext,0)


        def scopeLineField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeLineFieldContext,0)


        def containingTypeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ContainingTypeFieldContext,0)


        def virtualityField(self):
            return self.getTypedRuleContext(LLVMIRParser.VirtualityFieldContext,0)


        def virtualIndexField(self):
            return self.getTypedRuleContext(LLVMIRParser.VirtualIndexFieldContext,0)


        def thisAdjustmentField(self):
            return self.getTypedRuleContext(LLVMIRParser.ThisAdjustmentFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMIRParser.FlagsFieldContext,0)


        def spFlagsField(self):
            return self.getTypedRuleContext(LLVMIRParser.SpFlagsFieldContext,0)


        def isOptimizedField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsOptimizedFieldContext,0)


        def unitField(self):
            return self.getTypedRuleContext(LLVMIRParser.UnitFieldContext,0)


        def templateParamsField(self):
            return self.getTypedRuleContext(LLVMIRParser.TemplateParamsFieldContext,0)


        def declarationField(self):
            return self.getTypedRuleContext(LLVMIRParser.DeclarationFieldContext,0)


        def retainedNodesField(self):
            return self.getTypedRuleContext(LLVMIRParser.RetainedNodesFieldContext,0)


        def thrownTypesField(self):
            return self.getTypedRuleContext(LLVMIRParser.ThrownTypesFieldContext,0)


        def annotationsField(self):
            return self.getTypedRuleContext(LLVMIRParser.AnnotationsFieldContext,0)


        def targetFuncNameField(self):
            return self.getTypedRuleContext(LLVMIRParser.TargetFuncNameFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diSubprogramField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubprogramField" ):
                listener.enterDiSubprogramField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubprogramField" ):
                listener.exitDiSubprogramField(self)




    def diSubprogramField(self):

        localctx = LLVMIRParser.DiSubprogramFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_diSubprogramField)
        try:
            self.state = 3849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3826
                self.scopeField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3827
                self.nameField()
                pass
            elif token in [446]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3828
                self.linkageNameField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3829
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3830
                self.lineField()
                pass
            elif token in [391]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3831
                self.typeField()
                pass
            elif token in [440]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3832
                self.isLocalField()
                pass
            elif token in [438]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3833
                self.isDefinitionField()
                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3834
                self.scopeLineField()
                pass
            elif token in [408]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3835
                self.containingTypeField()
                pass
            elif token in [485]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3836
                self.virtualityField()
                pass
            elif token in [484]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3837
                self.virtualIndexField()
                pass
            elif token in [478]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3838
                self.thisAdjustmentField()
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3839
                self.flagsField()
                pass
            elif token in [468]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3840
                self.spFlagsField()
                pass
            elif token in [441]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3841
                self.isOptimizedField()
                pass
            elif token in [481]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3842
                self.unitField()
                pass
            elif token in [477]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3843
                self.templateParamsField()
                pass
            elif token in [411]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3844
                self.declarationField()
                pass
            elif token in [458]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3845
                self.retainedNodesField()
                pass
            elif token in [479]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3846
                self.thrownTypesField()
                pass
            elif token in [399]:
                self.enterOuterAlt(localctx, 22)
                self.state = 3847
                self.annotationsField()
                pass
            elif token in [476]:
                self.enterOuterAlt(localctx, 23)
                self.state = 3848
                self.targetFuncNameField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubrangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubrangeField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiSubrangeFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiSubrangeFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diSubrange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubrange" ):
                listener.enterDiSubrange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubrange" ):
                listener.exitDiSubrange(self)




    def diSubrange(self):

        localctx = LLVMIRParser.DiSubrangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_diSubrange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3851
            self.match(LLVMIRParser.T__362)
            self.state = 3852
            self.match(LLVMIRParser.T__25)
            self.state = 3861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 409)) & ~0x3f) == 0 and ((1 << (_la - 409)) & 4611686293305294849) != 0) or _la==482:
                self.state = 3853
                self.diSubrangeField()
                self.state = 3858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3854
                    self.match(LLVMIRParser.T__14)
                    self.state = 3855
                    self.diSubrangeField()
                    self.state = 3860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3863
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubrangeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def countField(self):
            return self.getTypedRuleContext(LLVMIRParser.CountFieldContext,0)


        def lowerBoundField(self):
            return self.getTypedRuleContext(LLVMIRParser.LowerBoundFieldContext,0)


        def upperBoundField(self):
            return self.getTypedRuleContext(LLVMIRParser.UpperBoundFieldContext,0)


        def strideField(self):
            return self.getTypedRuleContext(LLVMIRParser.StrideFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diSubrangeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubrangeField" ):
                listener.enterDiSubrangeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubrangeField" ):
                listener.exitDiSubrangeField(self)




    def diSubrangeField(self):

        localctx = LLVMIRParser.DiSubrangeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_diSubrangeField)
        try:
            self.state = 3869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [409]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3865
                self.countField()
                pass
            elif token in [447]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3866
                self.lowerBoundField()
                pass
            elif token in [482]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3867
                self.upperBoundField()
                pass
            elif token in [471]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3868
                self.strideField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubroutineTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSubroutineTypeField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiSubroutineTypeFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiSubroutineTypeFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diSubroutineType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubroutineType" ):
                listener.enterDiSubroutineType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubroutineType" ):
                listener.exitDiSubroutineType(self)




    def diSubroutineType(self):

        localctx = LLVMIRParser.DiSubroutineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_diSubroutineType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3871
            self.match(LLVMIRParser.T__382)
            self.state = 3872
            self.match(LLVMIRParser.T__25)
            self.state = 3881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==394 or _la==396 or _la==480 or _la==489:
                self.state = 3873
                self.diSubroutineTypeField()
                self.state = 3878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3874
                    self.match(LLVMIRParser.T__14)
                    self.state = 3875
                    self.diSubroutineTypeField()
                    self.state = 3880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3883
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateTypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diTemplateTypeParameterField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiTemplateTypeParameterFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiTemplateTypeParameterFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diTemplateTypeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateTypeParameter" ):
                listener.enterDiTemplateTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateTypeParameter" ):
                listener.exitDiTemplateTypeParameter(self)




    def diTemplateTypeParameter(self):

        localctx = LLVMIRParser.DiTemplateTypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_diTemplateTypeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3885
            self.match(LLVMIRParser.T__383)
            self.state = 3886
            self.match(LLVMIRParser.T__25)
            self.state = 3895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 7) != 0):
                self.state = 3887
                self.diTemplateTypeParameterField()
                self.state = 3892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3888
                    self.match(LLVMIRParser.T__14)
                    self.state = 3889
                    self.diTemplateTypeParameterField()
                    self.state = 3894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3897
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateValueParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diTemplateValueParameterField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiTemplateValueParameterFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiTemplateValueParameterFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diTemplateValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateValueParameter" ):
                listener.enterDiTemplateValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateValueParameter" ):
                listener.exitDiTemplateValueParameter(self)




    def diTemplateValueParameter(self):

        localctx = LLVMIRParser.DiTemplateValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_diTemplateValueParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3899
            self.match(LLVMIRParser.T__384)
            self.state = 3900
            self.match(LLVMIRParser.T__25)
            self.state = 3905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & 121) != 0):
                self.state = 3901
                self.diTemplateValueParameterField()

                self.state = 3902
                self.match(LLVMIRParser.T__14)
                self.state = 3903
                self.diTemplateValueParameterField()


            self.state = 3907
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericDiNodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericDINodeField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.GenericDINodeFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.GenericDINodeFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_genericDiNode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDiNode" ):
                listener.enterGenericDiNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDiNode" ):
                listener.exitGenericDiNode(self)




    def genericDiNode(self):

        localctx = LLVMIRParser.GenericDiNodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_genericDiNode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3909
            self.match(LLVMIRParser.T__385)
            self.state = 3910
            self.match(LLVMIRParser.T__25)
            self.state = 3919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & 7) != 0):
                self.state = 3911
                self.genericDINodeField()
                self.state = 3916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3912
                    self.match(LLVMIRParser.T__14)
                    self.state = 3913
                    self.genericDINodeField()
                    self.state = 3918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3921
            self.match(LLVMIRParser.T__26)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateTypeParameterFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeFieldContext,0)


        def defaultedField(self):
            return self.getTypedRuleContext(LLVMIRParser.DefaultedFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diTemplateTypeParameterField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateTypeParameterField" ):
                listener.enterDiTemplateTypeParameterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateTypeParameterField" ):
                listener.exitDiTemplateTypeParameterField(self)




    def diTemplateTypeParameterField(self):

        localctx = LLVMIRParser.DiTemplateTypeParameterFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_diTemplateTypeParameterField)
        try:
            self.state = 3926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [390]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3923
                self.nameField()
                pass
            elif token in [391]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3924
                self.typeField()
                pass
            elif token in [392]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3925
                self.defaultedField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCompileUnitFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def languageField(self):
            return self.getTypedRuleContext(LLVMIRParser.LanguageFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def producerField(self):
            return self.getTypedRuleContext(LLVMIRParser.ProducerFieldContext,0)


        def isOptimizedField(self):
            return self.getTypedRuleContext(LLVMIRParser.IsOptimizedFieldContext,0)


        def flagsStringField(self):
            return self.getTypedRuleContext(LLVMIRParser.FlagsStringFieldContext,0)


        def runtimeVersionField(self):
            return self.getTypedRuleContext(LLVMIRParser.RuntimeVersionFieldContext,0)


        def splitDebugFilenameField(self):
            return self.getTypedRuleContext(LLVMIRParser.SplitDebugFilenameFieldContext,0)


        def emissionKindField(self):
            return self.getTypedRuleContext(LLVMIRParser.EmissionKindFieldContext,0)


        def enumsField(self):
            return self.getTypedRuleContext(LLVMIRParser.EnumsFieldContext,0)


        def retainedTypesField(self):
            return self.getTypedRuleContext(LLVMIRParser.RetainedTypesFieldContext,0)


        def globalsField(self):
            return self.getTypedRuleContext(LLVMIRParser.GlobalsFieldContext,0)


        def importsField(self):
            return self.getTypedRuleContext(LLVMIRParser.ImportsFieldContext,0)


        def macrosField(self):
            return self.getTypedRuleContext(LLVMIRParser.MacrosFieldContext,0)


        def dwoIdField(self):
            return self.getTypedRuleContext(LLVMIRParser.DwoIdFieldContext,0)


        def splitDebugInliningField(self):
            return self.getTypedRuleContext(LLVMIRParser.SplitDebugInliningFieldContext,0)


        def debugInfoForProfilingField(self):
            return self.getTypedRuleContext(LLVMIRParser.DebugInfoForProfilingFieldContext,0)


        def nameTableKindField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameTableKindFieldContext,0)


        def rangesBaseAddressField(self):
            return self.getTypedRuleContext(LLVMIRParser.RangesBaseAddressFieldContext,0)


        def sysrootField(self):
            return self.getTypedRuleContext(LLVMIRParser.SysrootFieldContext,0)


        def sdkField(self):
            return self.getTypedRuleContext(LLVMIRParser.SdkFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diCompileUnitField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCompileUnitField" ):
                listener.enterDiCompileUnitField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCompileUnitField" ):
                listener.exitDiCompileUnitField(self)




    def diCompileUnitField(self):

        localctx = LLVMIRParser.DiCompileUnitFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_diCompileUnitField)
        try:
            self.state = 3948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [444]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3928
                self.languageField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3929
                self.fileField()
                pass
            elif token in [455]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3930
                self.producerField()
                pass
            elif token in [441]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3931
                self.isOptimizedField()
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3932
                self.flagsStringField()
                pass
            elif token in [461]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3933
                self.runtimeVersionField()
                pass
            elif token in [469]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3934
                self.splitDebugFilenameField()
                pass
            elif token in [418]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3935
                self.emissionKindField()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3936
                self.enumsField()
                pass
            elif token in [459]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3937
                self.retainedTypesField()
                pass
            elif token in [432]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3938
                self.globalsField()
                pass
            elif token in [434]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3939
                self.importsField()
                pass
            elif token in [448]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3940
                self.macrosField()
                pass
            elif token in [416]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3941
                self.dwoIdField()
                pass
            elif token in [470]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3942
                self.splitDebugInliningField()
                pass
            elif token in [410]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3943
                self.debugInfoForProfilingField()
                pass
            elif token in [449]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3944
                self.nameTableKindField()
                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3945
                self.rangesBaseAddressField()
                pass
            elif token in [475]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3946
                self.sysrootField()
                pass
            elif token in [464]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3947
                self.sdkField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiCommonBlockFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scopeField(self):
            return self.getTypedRuleContext(LLVMIRParser.ScopeFieldContext,0)


        def declarationField(self):
            return self.getTypedRuleContext(LLVMIRParser.DeclarationFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def fileField(self):
            return self.getTypedRuleContext(LLVMIRParser.FileFieldContext,0)


        def lineField(self):
            return self.getTypedRuleContext(LLVMIRParser.LineFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diCommonBlockField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiCommonBlockField" ):
                listener.enterDiCommonBlockField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiCommonBlockField" ):
                listener.exitDiCommonBlockField(self)




    def diCommonBlockField(self):

        localctx = LLVMIRParser.DiCommonBlockFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_diCommonBlockField)
        try:
            self.state = 3955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [462]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3950
                self.scopeField()
                pass
            elif token in [411]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3951
                self.declarationField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3952
                self.nameField()
                pass
            elif token in [429]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3953
                self.fileField()
                pass
            elif token in [445]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3954
                self.lineField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiBasicTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMIRParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def sizeField(self):
            return self.getTypedRuleContext(LLVMIRParser.SizeFieldContext,0)


        def alignField(self):
            return self.getTypedRuleContext(LLVMIRParser.AlignFieldContext,0)


        def encodingField(self):
            return self.getTypedRuleContext(LLVMIRParser.EncodingFieldContext,0)


        def flagsField(self):
            return self.getTypedRuleContext(LLVMIRParser.FlagsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diBasicTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiBasicTypeField" ):
                listener.enterDiBasicTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiBasicTypeField" ):
                listener.exitDiBasicTypeField(self)




    def diBasicTypeField(self):

        localctx = LLVMIRParser.DiBasicTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_diBasicTypeField)
        try:
            self.state = 3963
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3957
                self.tagField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3958
                self.nameField()
                pass
            elif token in [466]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3959
                self.sizeField()
                pass
            elif token in [397]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3960
                self.alignField()
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3961
                self.encodingField()
                pass
            elif token in [394]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3962
                self.flagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericDINodeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMIRParser.TagFieldContext,0)


        def headerField(self):
            return self.getTypedRuleContext(LLVMIRParser.HeaderFieldContext,0)


        def operandsField(self):
            return self.getTypedRuleContext(LLVMIRParser.OperandsFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_genericDINodeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDINodeField" ):
                listener.enterGenericDINodeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDINodeField" ):
                listener.exitGenericDINodeField(self)




    def genericDINodeField(self):

        localctx = LLVMIRParser.GenericDINodeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_genericDINodeField)
        try:
            self.state = 3968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3965
                self.tagField()
                pass
            elif token in [388]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3966
                self.headerField()
                pass
            elif token in [389]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3967
                self.operandsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DwarfTag(self):
            return self.getToken(LLVMIRParser.DwarfTag, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_tagField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagField" ):
                listener.enterTagField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagField" ):
                listener.exitTagField(self)




    def tagField(self):

        localctx = LLVMIRParser.TagFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_tagField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3970
            self.match(LLVMIRParser.T__386)
            self.state = 3971
            self.match(LLVMIRParser.DwarfTag)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HeaderFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_headerField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHeaderField" ):
                listener.enterHeaderField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHeaderField" ):
                listener.exitHeaderField(self)




    def headerField(self):

        localctx = LLVMIRParser.HeaderFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_headerField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3973
            self.match(LLVMIRParser.T__387)
            self.state = 3974
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.MdFieldContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_operandsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandsField" ):
                listener.enterOperandsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandsField" ):
                listener.exitOperandsField(self)




    def operandsField(self):

        localctx = LLVMIRParser.OperandsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_operandsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3976
            self.match(LLVMIRParser.T__388)
            self.state = 3977
            self.match(LLVMIRParser.T__20)
            self.state = 3986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4622945172125122560) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 175640385467458049) != 0) or ((((_la - 354)) & ~0x3f) == 0 and ((1 << (_la - 354)) & 8589934591) != 0) or ((((_la - 493)) & ~0x3f) == 0 and ((1 << (_la - 493)) & 97) != 0):
                self.state = 3978
                self.mdField()
                self.state = 3983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 3979
                    self.match(LLVMIRParser.T__14)
                    self.state = 3980
                    self.mdField()
                    self.state = 3985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3988
            self.match(LLVMIRParser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiTemplateValueParameterFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagField(self):
            return self.getTypedRuleContext(LLVMIRParser.TagFieldContext,0)


        def nameField(self):
            return self.getTypedRuleContext(LLVMIRParser.NameFieldContext,0)


        def typeField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypeFieldContext,0)


        def defaultedField(self):
            return self.getTypedRuleContext(LLVMIRParser.DefaultedFieldContext,0)


        def valueField(self):
            return self.getTypedRuleContext(LLVMIRParser.ValueFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diTemplateValueParameterField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiTemplateValueParameterField" ):
                listener.enterDiTemplateValueParameterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiTemplateValueParameterField" ):
                listener.exitDiTemplateValueParameterField(self)




    def diTemplateValueParameterField(self):

        localctx = LLVMIRParser.DiTemplateValueParameterFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_diTemplateValueParameterField)
        try:
            self.state = 3995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [387]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3990
                self.tagField()
                pass
            elif token in [390]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3991
                self.nameField()
                pass
            elif token in [391]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3992
                self.typeField()
                pass
            elif token in [392]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3993
                self.defaultedField()
                pass
            elif token in [393]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3994
                self.valueField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_nameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameField" ):
                listener.enterNameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameField" ):
                listener.exitNameField(self)




    def nameField(self):

        localctx = LLVMIRParser.NameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_nameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3997
            self.match(LLVMIRParser.T__389)
            self.state = 3998
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_typeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeField" ):
                listener.enterTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeField" ):
                listener.exitTypeField(self)




    def typeField(self):

        localctx = LLVMIRParser.TypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_typeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4000
            self.match(LLVMIRParser.T__390)
            self.state = 4001
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_defaultedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultedField" ):
                listener.enterDefaultedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultedField" ):
                listener.exitDefaultedField(self)




    def defaultedField(self):

        localctx = LLVMIRParser.DefaultedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_defaultedField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4003
            self.match(LLVMIRParser.T__391)
            self.state = 4004
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_valueField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueField" ):
                listener.enterValueField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueField" ):
                listener.exitValueField(self)




    def valueField(self):

        localctx = LLVMIRParser.ValueFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_valueField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4006
            self.match(LLVMIRParser.T__392)
            self.state = 4007
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MdFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullConst(self):
            return self.getTypedRuleContext(LLVMIRParser.NullConstContext,0)


        def metadata(self):
            return self.getTypedRuleContext(LLVMIRParser.MetadataContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_mdField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMdField" ):
                listener.enterMdField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMdField" ):
                listener.exitMdField(self)




    def mdField(self):

        localctx = LLVMIRParser.MdFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_mdField)
        try:
            self.state = 4011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4009
                self.nullConst()
                pass
            elif token in [21, 23, 34, 37, 51, 53, 64, 73, 77, 116, 117, 118, 121, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 493, 498, 499]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4010
                self.metadata()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiSubroutineTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def flagsField(self):
            return self.getTypedRuleContext(LLVMIRParser.FlagsFieldContext,0)


        def ccField(self):
            return self.getTypedRuleContext(LLVMIRParser.CcFieldContext,0)


        def typesField(self):
            return self.getTypedRuleContext(LLVMIRParser.TypesFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_diSubroutineTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiSubroutineTypeField" ):
                listener.enterDiSubroutineTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiSubroutineTypeField" ):
                listener.exitDiSubroutineTypeField(self)




    def diSubroutineTypeField(self):

        localctx = LLVMIRParser.DiSubroutineTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_diSubroutineTypeField)
        try:
            self.state = 4016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [394]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4013
                self.flagsField()
                pass
            elif token in [396, 489]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4014
                self.ccField()
                pass
            elif token in [480]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4015
                self.typesField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diFlags(self):
            return self.getTypedRuleContext(LLVMIRParser.DiFlagsContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_flagsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlagsField" ):
                listener.enterFlagsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlagsField" ):
                listener.exitFlagsField(self)




    def flagsField(self):

        localctx = LLVMIRParser.FlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_flagsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4018
            self.match(LLVMIRParser.T__393)
            self.state = 4019
            self.diFlags()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiFlagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DiFlag(self, i:int=None):
            if i is None:
                return self.getTokens(LLVMIRParser.DiFlag)
            else:
                return self.getToken(LLVMIRParser.DiFlag, i)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_diFlags

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiFlags" ):
                listener.enterDiFlags(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiFlags" ):
                listener.exitDiFlags(self)




    def diFlags(self):

        localctx = LLVMIRParser.DiFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_diFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4021
            self.match(LLVMIRParser.DiFlag)
            self.state = 4026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==395:
                self.state = 4022
                self.match(LLVMIRParser.T__394)
                self.state = 4023
                self.match(LLVMIRParser.DiFlag)
                self.state = 4028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CcFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DwarfCc(self):
            return self.getToken(LLVMIRParser.DwarfCc, 0)

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_ccField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCcField" ):
                listener.enterCcField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCcField" ):
                listener.exitCcField(self)




    def ccField(self):

        localctx = LLVMIRParser.CcFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_ccField)
        try:
            self.state = 4032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [396]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4029
                self.match(LLVMIRParser.T__395)
                self.state = 4030
                self.match(LLVMIRParser.DwarfCc)
                pass
            elif token in [489]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4031
                self.match(LLVMIRParser.IntLit)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_alignField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignField" ):
                listener.enterAlignField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignField" ):
                listener.exitAlignField(self)




    def alignField(self):

        localctx = LLVMIRParser.AlignFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_alignField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4034
            self.match(LLVMIRParser.T__396)
            self.state = 4035
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllocatedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_allocatedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocatedField" ):
                listener.enterAllocatedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocatedField" ):
                listener.exitAllocatedField(self)




    def allocatedField(self):

        localctx = LLVMIRParser.AllocatedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_allocatedField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4037
            self.match(LLVMIRParser.T__397)
            self.state = 4038
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_annotationsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationsField" ):
                listener.enterAnnotationsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationsField" ):
                listener.exitAnnotationsField(self)




    def annotationsField(self):

        localctx = LLVMIRParser.AnnotationsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_annotationsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4040
            self.match(LLVMIRParser.T__398)
            self.state = 4041
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_argField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgField" ):
                listener.enterArgField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgField" ):
                listener.exitArgField(self)




    def argField(self):

        localctx = LLVMIRParser.ArgFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_argField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4043
            self.match(LLVMIRParser.T__399)
            self.state = 4044
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssociatedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_associatedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssociatedField" ):
                listener.enterAssociatedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssociatedField" ):
                listener.exitAssociatedField(self)




    def associatedField(self):

        localctx = LLVMIRParser.AssociatedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_associatedField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4046
            self.match(LLVMIRParser.T__400)
            self.state = 4047
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_attributesField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributesField" ):
                listener.enterAttributesField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributesField" ):
                listener.exitAttributesField(self)




    def attributesField(self):

        localctx = LLVMIRParser.AttributesFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_attributesField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4049
            self.match(LLVMIRParser.T__401)
            self.state = 4050
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_baseTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseTypeField" ):
                listener.enterBaseTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseTypeField" ):
                listener.exitBaseTypeField(self)




    def baseTypeField(self):

        localctx = LLVMIRParser.BaseTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_baseTypeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4052
            self.match(LLVMIRParser.T__402)
            self.state = 4053
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_checksumField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumField" ):
                listener.enterChecksumField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumField" ):
                listener.exitChecksumField(self)




    def checksumField(self):

        localctx = LLVMIRParser.ChecksumFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_checksumField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4055
            self.match(LLVMIRParser.T__403)
            self.state = 4056
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumkindFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ChecksumKind(self):
            return self.getToken(LLVMIRParser.ChecksumKind, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_checksumkindField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumkindField" ):
                listener.enterChecksumkindField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumkindField" ):
                listener.exitChecksumkindField(self)




    def checksumkindField(self):

        localctx = LLVMIRParser.ChecksumkindFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_checksumkindField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4058
            self.match(LLVMIRParser.T__404)
            self.state = 4059
            self.match(LLVMIRParser.ChecksumKind)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_columnField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnField" ):
                listener.enterColumnField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnField" ):
                listener.exitColumnField(self)




    def columnField(self):

        localctx = LLVMIRParser.ColumnFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_columnField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4061
            self.match(LLVMIRParser.T__405)
            self.state = 4062
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigMacrosFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_configMacrosField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigMacrosField" ):
                listener.enterConfigMacrosField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigMacrosField" ):
                listener.exitConfigMacrosField(self)




    def configMacrosField(self):

        localctx = LLVMIRParser.ConfigMacrosFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_configMacrosField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4064
            self.match(LLVMIRParser.T__406)
            self.state = 4065
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainingTypeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_containingTypeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainingTypeField" ):
                listener.enterContainingTypeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainingTypeField" ):
                listener.exitContainingTypeField(self)




    def containingTypeField(self):

        localctx = LLVMIRParser.ContainingTypeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_containingTypeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4067
            self.match(LLVMIRParser.T__407)
            self.state = 4068
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdFieldOrInt(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldOrIntContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_countField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCountField" ):
                listener.enterCountField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCountField" ):
                listener.exitCountField(self)




    def countField(self):

        localctx = LLVMIRParser.CountFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_countField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4070
            self.match(LLVMIRParser.T__408)
            self.state = 4071
            self.mdFieldOrInt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebugInfoForProfilingFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_debugInfoForProfilingField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebugInfoForProfilingField" ):
                listener.enterDebugInfoForProfilingField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebugInfoForProfilingField" ):
                listener.exitDebugInfoForProfilingField(self)




    def debugInfoForProfilingField(self):

        localctx = LLVMIRParser.DebugInfoForProfilingFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_debugInfoForProfilingField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4073
            self.match(LLVMIRParser.T__409)
            self.state = 4074
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_declarationField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationField" ):
                listener.enterDeclarationField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationField" ):
                listener.exitDeclarationField(self)




    def declarationField(self):

        localctx = LLVMIRParser.DeclarationFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_declarationField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4076
            self.match(LLVMIRParser.T__410)
            self.state = 4077
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_directoryField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryField" ):
                listener.enterDirectoryField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryField" ):
                listener.exitDirectoryField(self)




    def directoryField(self):

        localctx = LLVMIRParser.DirectoryFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_directoryField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4079
            self.match(LLVMIRParser.T__411)
            self.state = 4080
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscriminatorFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_discriminatorField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscriminatorField" ):
                listener.enterDiscriminatorField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscriminatorField" ):
                listener.exitDiscriminatorField(self)




    def discriminatorField(self):

        localctx = LLVMIRParser.DiscriminatorFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_discriminatorField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4082
            self.match(LLVMIRParser.T__412)
            self.state = 4083
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataLocationFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_dataLocationField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataLocationField" ):
                listener.enterDataLocationField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataLocationField" ):
                listener.exitDataLocationField(self)




    def dataLocationField(self):

        localctx = LLVMIRParser.DataLocationFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_dataLocationField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4085
            self.match(LLVMIRParser.T__413)
            self.state = 4086
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiscriminatorIntFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_discriminatorIntField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscriminatorIntField" ):
                listener.enterDiscriminatorIntField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscriminatorIntField" ):
                listener.exitDiscriminatorIntField(self)




    def discriminatorIntField(self):

        localctx = LLVMIRParser.DiscriminatorIntFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_discriminatorIntField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4088
            self.match(LLVMIRParser.T__412)
            self.state = 4089
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwarfAddressSpaceFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_dwarfAddressSpaceField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwarfAddressSpaceField" ):
                listener.enterDwarfAddressSpaceField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwarfAddressSpaceField" ):
                listener.exitDwarfAddressSpaceField(self)




    def dwarfAddressSpaceField(self):

        localctx = LLVMIRParser.DwarfAddressSpaceFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_dwarfAddressSpaceField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4091
            self.match(LLVMIRParser.T__414)
            self.state = 4092
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DwoIdFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_dwoIdField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDwoIdField" ):
                listener.enterDwoIdField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDwoIdField" ):
                listener.exitDwoIdField(self)




    def dwoIdField(self):

        localctx = LLVMIRParser.DwoIdFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_dwoIdField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4094
            self.match(LLVMIRParser.T__415)
            self.state = 4095
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_elementsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementsField" ):
                listener.enterElementsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementsField" ):
                listener.exitElementsField(self)




    def elementsField(self):

        localctx = LLVMIRParser.ElementsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_elementsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4097
            self.match(LLVMIRParser.T__416)
            self.state = 4098
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmissionKindFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.emissionKind = None # Token


        def getRuleIndex(self):
            return LLVMIRParser.RULE_emissionKindField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmissionKindField" ):
                listener.enterEmissionKindField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmissionKindField" ):
                listener.exitEmissionKindField(self)




    def emissionKindField(self):

        localctx = LLVMIRParser.EmissionKindFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_emissionKindField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4100
            self.match(LLVMIRParser.T__417)
            self.state = 4101
            localctx.emissionKind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 419)) & ~0x3f) == 0 and ((1 << (_la - 419)) & 15) != 0)):
                localctx.emissionKind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EncodingFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def DwarfAttEncoding(self):
            return self.getToken(LLVMIRParser.DwarfAttEncoding, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_encodingField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEncodingField" ):
                listener.enterEncodingField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEncodingField" ):
                listener.exitEncodingField(self)




    def encodingField(self):

        localctx = LLVMIRParser.EncodingFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_encodingField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4103
            self.match(LLVMIRParser.T__422)
            self.state = 4104
            _la = self._input.LA(1)
            if not(_la==489 or _la==501):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntityFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_entityField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntityField" ):
                listener.enterEntityField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntityField" ):
                listener.exitEntityField(self)




    def entityField(self):

        localctx = LLVMIRParser.EntityFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_entityField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4106
            self.match(LLVMIRParser.T__423)
            self.state = 4107
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_enumsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumsField" ):
                listener.enterEnumsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumsField" ):
                listener.exitEnumsField(self)




    def enumsField(self):

        localctx = LLVMIRParser.EnumsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_enumsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4109
            self.match(LLVMIRParser.T__424)
            self.state = 4110
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportSymbolsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_exportSymbolsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportSymbolsField" ):
                listener.enterExportSymbolsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportSymbolsField" ):
                listener.exitExportSymbolsField(self)




    def exportSymbolsField(self):

        localctx = LLVMIRParser.ExportSymbolsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_exportSymbolsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4112
            self.match(LLVMIRParser.T__425)
            self.state = 4113
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_exprField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprField" ):
                listener.enterExprField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprField" ):
                listener.exitExprField(self)




    def exprField(self):

        localctx = LLVMIRParser.ExprFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_exprField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4115
            self.match(LLVMIRParser.T__426)
            self.state = 4116
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtraDataFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_extraDataField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtraDataField" ):
                listener.enterExtraDataField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtraDataField" ):
                listener.exitExtraDataField(self)




    def extraDataField(self):

        localctx = LLVMIRParser.ExtraDataFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_extraDataField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4118
            self.match(LLVMIRParser.T__427)
            self.state = 4119
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_fileField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileField" ):
                listener.enterFileField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileField" ):
                listener.exitFileField(self)




    def fileField(self):

        localctx = LLVMIRParser.FileFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_fileField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4121
            self.match(LLVMIRParser.T__428)
            self.state = 4122
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_filenameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilenameField" ):
                listener.enterFilenameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilenameField" ):
                listener.exitFilenameField(self)




    def filenameField(self):

        localctx = LLVMIRParser.FilenameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_filenameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4124
            self.match(LLVMIRParser.T__429)
            self.state = 4125
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagsStringFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_flagsStringField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlagsStringField" ):
                listener.enterFlagsStringField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlagsStringField" ):
                listener.exitFlagsStringField(self)




    def flagsStringField(self):

        localctx = LLVMIRParser.FlagsStringFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_flagsStringField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4127
            self.match(LLVMIRParser.T__393)
            self.state = 4128
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_getterField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterField" ):
                listener.enterGetterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterField" ):
                listener.exitGetterField(self)




    def getterField(self):

        localctx = LLVMIRParser.GetterFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_getterField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4130
            self.match(LLVMIRParser.T__430)
            self.state = 4131
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GlobalsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_globalsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalsField" ):
                listener.enterGlobalsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalsField" ):
                listener.exitGlobalsField(self)




    def globalsField(self):

        localctx = LLVMIRParser.GlobalsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_globalsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4133
            self.match(LLVMIRParser.T__431)
            self.state = 4134
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_identifierField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierField" ):
                listener.enterIdentifierField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierField" ):
                listener.exitIdentifierField(self)




    def identifierField(self):

        localctx = LLVMIRParser.IdentifierFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_identifierField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4136
            self.match(LLVMIRParser.T__432)
            self.state = 4137
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_importsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportsField" ):
                listener.enterImportsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportsField" ):
                listener.exitImportsField(self)




    def importsField(self):

        localctx = LLVMIRParser.ImportsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_importsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4139
            self.match(LLVMIRParser.T__433)
            self.state = 4140
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludePathFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_includePathField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludePathField" ):
                listener.enterIncludePathField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludePathField" ):
                listener.exitIncludePathField(self)




    def includePathField(self):

        localctx = LLVMIRParser.IncludePathFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_includePathField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4142
            self.match(LLVMIRParser.T__434)
            self.state = 4143
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlinedAtFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_inlinedAtField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlinedAtField" ):
                listener.enterInlinedAtField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlinedAtField" ):
                listener.exitInlinedAtField(self)




    def inlinedAtField(self):

        localctx = LLVMIRParser.InlinedAtFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_inlinedAtField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4145
            self.match(LLVMIRParser.T__435)
            self.state = 4146
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsDeclFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_isDeclField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsDeclField" ):
                listener.enterIsDeclField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsDeclField" ):
                listener.exitIsDeclField(self)




    def isDeclField(self):

        localctx = LLVMIRParser.IsDeclFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_isDeclField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4148
            self.match(LLVMIRParser.T__436)
            self.state = 4149
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsDefinitionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_isDefinitionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsDefinitionField" ):
                listener.enterIsDefinitionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsDefinitionField" ):
                listener.exitIsDefinitionField(self)




    def isDefinitionField(self):

        localctx = LLVMIRParser.IsDefinitionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_isDefinitionField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4151
            self.match(LLVMIRParser.T__437)
            self.state = 4152
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsImplicitCodeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_isImplicitCodeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsImplicitCodeField" ):
                listener.enterIsImplicitCodeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsImplicitCodeField" ):
                listener.exitIsImplicitCodeField(self)




    def isImplicitCodeField(self):

        localctx = LLVMIRParser.IsImplicitCodeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_isImplicitCodeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4154
            self.match(LLVMIRParser.T__438)
            self.state = 4155
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsLocalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_isLocalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsLocalField" ):
                listener.enterIsLocalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsLocalField" ):
                listener.exitIsLocalField(self)




    def isLocalField(self):

        localctx = LLVMIRParser.IsLocalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_isLocalField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4157
            self.match(LLVMIRParser.T__439)
            self.state = 4158
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOptimizedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_isOptimizedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOptimizedField" ):
                listener.enterIsOptimizedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOptimizedField" ):
                listener.exitIsOptimizedField(self)




    def isOptimizedField(self):

        localctx = LLVMIRParser.IsOptimizedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_isOptimizedField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4160
            self.match(LLVMIRParser.T__440)
            self.state = 4161
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsUnsignedFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_isUnsignedField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsUnsignedField" ):
                listener.enterIsUnsignedField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsUnsignedField" ):
                listener.exitIsUnsignedField(self)




    def isUnsignedField(self):

        localctx = LLVMIRParser.IsUnsignedFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_isUnsignedField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4163
            self.match(LLVMIRParser.T__441)
            self.state = 4164
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ApiNotesFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_apiNotesField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApiNotesField" ):
                listener.enterApiNotesField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApiNotesField" ):
                listener.exitApiNotesField(self)




    def apiNotesField(self):

        localctx = LLVMIRParser.ApiNotesFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_apiNotesField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4166
            self.match(LLVMIRParser.T__442)
            self.state = 4167
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DwarfLang(self):
            return self.getToken(LLVMIRParser.DwarfLang, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_languageField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguageField" ):
                listener.enterLanguageField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguageField" ):
                listener.exitLanguageField(self)




    def languageField(self):

        localctx = LLVMIRParser.LanguageFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_languageField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4169
            self.match(LLVMIRParser.T__443)
            self.state = 4170
            self.match(LLVMIRParser.DwarfLang)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_lineField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineField" ):
                listener.enterLineField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineField" ):
                listener.exitLineField(self)




    def lineField(self):

        localctx = LLVMIRParser.LineFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_lineField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4172
            self.match(LLVMIRParser.T__444)
            self.state = 4173
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkageNameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_linkageNameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkageNameField" ):
                listener.enterLinkageNameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkageNameField" ):
                listener.exitLinkageNameField(self)




    def linkageNameField(self):

        localctx = LLVMIRParser.LinkageNameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_linkageNameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4175
            self.match(LLVMIRParser.T__445)
            self.state = 4176
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LowerBoundFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdFieldOrInt(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldOrIntContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_lowerBoundField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLowerBoundField" ):
                listener.enterLowerBoundField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLowerBoundField" ):
                listener.exitLowerBoundField(self)




    def lowerBoundField(self):

        localctx = LLVMIRParser.LowerBoundFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_lowerBoundField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4178
            self.match(LLVMIRParser.T__446)
            self.state = 4179
            self.mdFieldOrInt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacrosFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_macrosField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacrosField" ):
                listener.enterMacrosField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacrosField" ):
                listener.exitMacrosField(self)




    def macrosField(self):

        localctx = LLVMIRParser.MacrosFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_macrosField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4181
            self.match(LLVMIRParser.T__447)
            self.state = 4182
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameTableKindFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nameTableKind = None # Token


        def getRuleIndex(self):
            return LLVMIRParser.RULE_nameTableKindField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNameTableKindField" ):
                listener.enterNameTableKindField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNameTableKindField" ):
                listener.exitNameTableKindField(self)




    def nameTableKindField(self):

        localctx = LLVMIRParser.NameTableKindFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_nameTableKindField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4184
            self.match(LLVMIRParser.T__448)
            self.state = 4185
            localctx.nameTableKind = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 450)) & ~0x3f) == 0 and ((1 << (_la - 450)) & 7) != 0)):
                localctx.nameTableKind = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NodesFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_nodesField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNodesField" ):
                listener.enterNodesField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNodesField" ):
                listener.exitNodesField(self)




    def nodesField(self):

        localctx = LLVMIRParser.NodesFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_nodesField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4187
            self.match(LLVMIRParser.T__452)
            self.state = 4188
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_offsetField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetField" ):
                listener.enterOffsetField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetField" ):
                listener.exitOffsetField(self)




    def offsetField(self):

        localctx = LLVMIRParser.OffsetFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_offsetField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4190
            self.match(LLVMIRParser.T__453)
            self.state = 4191
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProducerFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_producerField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProducerField" ):
                listener.enterProducerField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProducerField" ):
                listener.exitProducerField(self)




    def producerField(self):

        localctx = LLVMIRParser.ProducerFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_producerField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4193
            self.match(LLVMIRParser.T__454)
            self.state = 4194
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangesBaseAddressFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_rangesBaseAddressField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangesBaseAddressField" ):
                listener.enterRangesBaseAddressField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangesBaseAddressField" ):
                listener.exitRangesBaseAddressField(self)




    def rangesBaseAddressField(self):

        localctx = LLVMIRParser.RangesBaseAddressFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_rangesBaseAddressField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4196
            self.match(LLVMIRParser.T__455)
            self.state = 4197
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RankFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdFieldOrInt(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldOrIntContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_rankField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRankField" ):
                listener.enterRankField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRankField" ):
                listener.exitRankField(self)




    def rankField(self):

        localctx = LLVMIRParser.RankFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_rankField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4199
            self.match(LLVMIRParser.T__456)
            self.state = 4200
            self.mdFieldOrInt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetainedNodesFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_retainedNodesField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetainedNodesField" ):
                listener.enterRetainedNodesField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetainedNodesField" ):
                listener.exitRetainedNodesField(self)




    def retainedNodesField(self):

        localctx = LLVMIRParser.RetainedNodesFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_retainedNodesField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4202
            self.match(LLVMIRParser.T__457)
            self.state = 4203
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RetainedTypesFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_retainedTypesField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetainedTypesField" ):
                listener.enterRetainedTypesField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetainedTypesField" ):
                listener.exitRetainedTypesField(self)




    def retainedTypesField(self):

        localctx = LLVMIRParser.RetainedTypesFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_retainedTypesField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4205
            self.match(LLVMIRParser.T__458)
            self.state = 4206
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuntimeLangFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DwarfLang(self):
            return self.getToken(LLVMIRParser.DwarfLang, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_runtimeLangField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuntimeLangField" ):
                listener.enterRuntimeLangField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuntimeLangField" ):
                listener.exitRuntimeLangField(self)




    def runtimeLangField(self):

        localctx = LLVMIRParser.RuntimeLangFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_runtimeLangField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4208
            self.match(LLVMIRParser.T__459)
            self.state = 4209
            self.match(LLVMIRParser.DwarfLang)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RuntimeVersionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_runtimeVersionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRuntimeVersionField" ):
                listener.enterRuntimeVersionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRuntimeVersionField" ):
                listener.exitRuntimeVersionField(self)




    def runtimeVersionField(self):

        localctx = LLVMIRParser.RuntimeVersionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_runtimeVersionField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4211
            self.match(LLVMIRParser.T__460)
            self.state = 4212
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_scopeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopeField" ):
                listener.enterScopeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopeField" ):
                listener.exitScopeField(self)




    def scopeField(self):

        localctx = LLVMIRParser.ScopeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_scopeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4214
            self.match(LLVMIRParser.T__461)
            self.state = 4215
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeLineFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_scopeLineField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScopeLineField" ):
                listener.enterScopeLineField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScopeLineField" ):
                listener.exitScopeLineField(self)




    def scopeLineField(self):

        localctx = LLVMIRParser.ScopeLineFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_scopeLineField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4217
            self.match(LLVMIRParser.T__462)
            self.state = 4218
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SdkFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_sdkField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSdkField" ):
                listener.enterSdkField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSdkField" ):
                listener.exitSdkField(self)




    def sdkField(self):

        localctx = LLVMIRParser.SdkFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_sdkField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4220
            self.match(LLVMIRParser.T__463)
            self.state = 4221
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_setterField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetterField" ):
                listener.enterSetterField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetterField" ):
                listener.exitSetterField(self)




    def setterField(self):

        localctx = LLVMIRParser.SetterFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_setterField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4223
            self.match(LLVMIRParser.T__464)
            self.state = 4224
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_sizeField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSizeField" ):
                listener.enterSizeField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSizeField" ):
                listener.exitSizeField(self)




    def sizeField(self):

        localctx = LLVMIRParser.SizeFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_sizeField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4226
            self.match(LLVMIRParser.T__465)
            self.state = 4227
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_sourceField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceField" ):
                listener.enterSourceField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceField" ):
                listener.exitSourceField(self)




    def sourceField(self):

        localctx = LLVMIRParser.SourceFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_sourceField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4229
            self.match(LLVMIRParser.T__466)
            self.state = 4230
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpFlagsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def diSPFlag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(LLVMIRParser.DiSPFlagContext)
            else:
                return self.getTypedRuleContext(LLVMIRParser.DiSPFlagContext,i)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_spFlagsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpFlagsField" ):
                listener.enterSpFlagsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpFlagsField" ):
                listener.exitSpFlagsField(self)




    def spFlagsField(self):

        localctx = LLVMIRParser.SpFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_spFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4232
            self.match(LLVMIRParser.T__467)

            self.state = 4233
            self.diSPFlag()
            self.state = 4238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==395:
                self.state = 4234
                self.match(LLVMIRParser.T__394)
                self.state = 4235
                self.diSPFlag()
                self.state = 4240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SplitDebugFilenameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_splitDebugFilenameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSplitDebugFilenameField" ):
                listener.enterSplitDebugFilenameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSplitDebugFilenameField" ):
                listener.exitSplitDebugFilenameField(self)




    def splitDebugFilenameField(self):

        localctx = LLVMIRParser.SplitDebugFilenameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_splitDebugFilenameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4241
            self.match(LLVMIRParser.T__468)
            self.state = 4242
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SplitDebugInliningFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolConst(self):
            return self.getTypedRuleContext(LLVMIRParser.BoolConstContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_splitDebugInliningField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSplitDebugInliningField" ):
                listener.enterSplitDebugInliningField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSplitDebugInliningField" ):
                listener.exitSplitDebugInliningField(self)




    def splitDebugInliningField(self):

        localctx = LLVMIRParser.SplitDebugInliningFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_splitDebugInliningField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4244
            self.match(LLVMIRParser.T__469)
            self.state = 4245
            self.boolConst()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrideFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdFieldOrInt(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldOrIntContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_strideField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrideField" ):
                listener.enterStrideField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrideField" ):
                listener.exitStrideField(self)




    def strideField(self):

        localctx = LLVMIRParser.StrideFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_strideField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4247
            self.match(LLVMIRParser.T__470)
            self.state = 4248
            self.mdFieldOrInt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLengthFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_stringLengthField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLengthField" ):
                listener.enterStringLengthField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLengthField" ):
                listener.exitStringLengthField(self)




    def stringLengthField(self):

        localctx = LLVMIRParser.StringLengthFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_stringLengthField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4250
            self.match(LLVMIRParser.T__471)
            self.state = 4251
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLengthExpressionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_stringLengthExpressionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLengthExpressionField" ):
                listener.enterStringLengthExpressionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLengthExpressionField" ):
                listener.exitStringLengthExpressionField(self)




    def stringLengthExpressionField(self):

        localctx = LLVMIRParser.StringLengthExpressionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_stringLengthExpressionField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4253
            self.match(LLVMIRParser.T__472)
            self.state = 4254
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLocationExpressionFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_stringLocationExpressionField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLocationExpressionField" ):
                listener.enterStringLocationExpressionField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLocationExpressionField" ):
                listener.exitStringLocationExpressionField(self)




    def stringLocationExpressionField(self):

        localctx = LLVMIRParser.StringLocationExpressionFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_stringLocationExpressionField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4256
            self.match(LLVMIRParser.T__473)
            self.state = 4257
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysrootFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_sysrootField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysrootField" ):
                listener.enterSysrootField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysrootField" ):
                listener.exitSysrootField(self)




    def sysrootField(self):

        localctx = LLVMIRParser.SysrootFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_sysrootField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4259
            self.match(LLVMIRParser.T__474)
            self.state = 4260
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetFuncNameFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_targetFuncNameField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargetFuncNameField" ):
                listener.enterTargetFuncNameField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargetFuncNameField" ):
                listener.exitTargetFuncNameField(self)




    def targetFuncNameField(self):

        localctx = LLVMIRParser.TargetFuncNameFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_targetFuncNameField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4262
            self.match(LLVMIRParser.T__475)
            self.state = 4263
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateParamsFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_templateParamsField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateParamsField" ):
                listener.enterTemplateParamsField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateParamsField" ):
                listener.exitTemplateParamsField(self)




    def templateParamsField(self):

        localctx = LLVMIRParser.TemplateParamsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_templateParamsField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4265
            self.match(LLVMIRParser.T__476)
            self.state = 4266
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisAdjustmentFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_thisAdjustmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisAdjustmentField" ):
                listener.enterThisAdjustmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisAdjustmentField" ):
                listener.exitThisAdjustmentField(self)




    def thisAdjustmentField(self):

        localctx = LLVMIRParser.ThisAdjustmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_thisAdjustmentField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4268
            self.match(LLVMIRParser.T__477)
            self.state = 4269
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrownTypesFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_thrownTypesField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrownTypesField" ):
                listener.enterThrownTypesField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrownTypesField" ):
                listener.exitThrownTypesField(self)




    def thrownTypesField(self):

        localctx = LLVMIRParser.ThrownTypesFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_thrownTypesField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4271
            self.match(LLVMIRParser.T__478)
            self.state = 4272
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeMacinfoFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DwarfMacinfo(self):
            return self.getToken(LLVMIRParser.DwarfMacinfo, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_typeMacinfoField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeMacinfoField" ):
                listener.enterTypeMacinfoField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeMacinfoField" ):
                listener.exitTypeMacinfoField(self)




    def typeMacinfoField(self):

        localctx = LLVMIRParser.TypeMacinfoFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_typeMacinfoField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4274
            self.match(LLVMIRParser.T__390)
            self.state = 4275
            self.match(LLVMIRParser.DwarfMacinfo)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_typesField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypesField" ):
                listener.enterTypesField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypesField" ):
                listener.exitTypesField(self)




    def typesField(self):

        localctx = LLVMIRParser.TypesFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_typesField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4277
            self.match(LLVMIRParser.T__479)
            self.state = 4278
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_unitField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnitField" ):
                listener.enterUnitField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnitField" ):
                listener.exitUnitField(self)




    def unitField(self):

        localctx = LLVMIRParser.UnitFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_unitField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4280
            self.match(LLVMIRParser.T__480)
            self.state = 4281
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpperBoundFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdFieldOrInt(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldOrIntContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_upperBoundField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpperBoundField" ):
                listener.enterUpperBoundField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpperBoundField" ):
                listener.exitUpperBoundField(self)




    def upperBoundField(self):

        localctx = LLVMIRParser.UpperBoundFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_upperBoundField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4283
            self.match(LLVMIRParser.T__481)
            self.state = 4284
            self.mdFieldOrInt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueIntFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_valueIntField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueIntField" ):
                listener.enterValueIntField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueIntField" ):
                listener.exitValueIntField(self)




    def valueIntField(self):

        localctx = LLVMIRParser.ValueIntFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_valueIntField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4286
            self.match(LLVMIRParser.T__392)
            self.state = 4287
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueStringFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLit(self):
            return self.getToken(LLVMIRParser.StringLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_valueStringField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueStringField" ):
                listener.enterValueStringField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueStringField" ):
                listener.exitValueStringField(self)




    def valueStringField(self):

        localctx = LLVMIRParser.ValueStringFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_valueStringField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4289
            self.match(LLVMIRParser.T__392)
            self.state = 4290
            self.match(LLVMIRParser.StringLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_varField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarField" ):
                listener.enterVarField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarField" ):
                listener.exitVarField(self)




    def varField(self):

        localctx = LLVMIRParser.VarFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_varField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4292
            self.match(LLVMIRParser.T__482)
            self.state = 4293
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualIndexFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntLit(self):
            return self.getToken(LLVMIRParser.IntLit, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_virtualIndexField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualIndexField" ):
                listener.enterVirtualIndexField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualIndexField" ):
                listener.exitVirtualIndexField(self)




    def virtualIndexField(self):

        localctx = LLVMIRParser.VirtualIndexFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_virtualIndexField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4295
            self.match(LLVMIRParser.T__483)
            self.state = 4296
            self.match(LLVMIRParser.IntLit)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtualityFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DwarfVirtuality(self):
            return self.getToken(LLVMIRParser.DwarfVirtuality, 0)

        def getRuleIndex(self):
            return LLVMIRParser.RULE_virtualityField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtualityField" ):
                listener.enterVirtualityField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtualityField" ):
                listener.exitVirtualityField(self)




    def virtualityField(self):

        localctx = LLVMIRParser.VirtualityFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_virtualityField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4298
            self.match(LLVMIRParser.T__484)
            self.state = 4299
            self.match(LLVMIRParser.DwarfVirtuality)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VtableHolderFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mdField(self):
            return self.getTypedRuleContext(LLVMIRParser.MdFieldContext,0)


        def getRuleIndex(self):
            return LLVMIRParser.RULE_vtableHolderField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVtableHolderField" ):
                listener.enterVtableHolderField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVtableHolderField" ):
                listener.exitVtableHolderField(self)




    def vtableHolderField(self):

        localctx = LLVMIRParser.VtableHolderFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_vtableHolderField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4301
            self.match(LLVMIRParser.T__485)
            self.state = 4302
            self.mdField()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[87] = self.type_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def type_sempred(self, localctx:TypeContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         




